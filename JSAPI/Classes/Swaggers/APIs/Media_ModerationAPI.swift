//
// Media_ModerationAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class Media_ModerationAPI: APIBase {
    /**
     Add a flag
     - parameter flagResource: (body) The flag resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addFlag(flagResource: FlagResource? = nil, completion: @escaping ((_ data: FlagResource?, _ error: ErrorResponse?) -> Void)) {
        addFlagWithRequestBuilder(flagResource: flagResource).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add a flag
     - POST /moderation/flags
     - <b>Permissions Needed:</b> ANY
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "reason" : "reason",
  "context" : "context",
  "context_id" : "context_id",
  "created_date" : 0,
  "id" : 6,
  "updated_date" : 1,
  "user" : {
    "avatar_url" : "avatar_url",
    "id" : 9,
    "display_name" : "display_name",
    "username" : "username"
  }
}}]
     - parameter flagResource: (body) The flag resource object (optional)
     - returns: RequestBuilder<FlagResource> 
     */
    open class func addFlagWithRequestBuilder(flagResource: FlagResource? = nil) -> RequestBuilder<FlagResource> {
        let path = "/moderation/flags"
        let URLString = JSAPIAPI.basePath + path
        let parameters = flagResource?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FlagResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a flag
     - parameter contextName: (query) The name of the context (optional)
     - parameter contextId: (query) The id of the context (optional)
     - parameter userId: (query) The id of the user (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteFlag(contextName: String? = nil, contextId: String? = nil, userId: Int32? = nil, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        deleteFlagWithRequestBuilder(contextName: contextName, contextId: contextId, userId: userId).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Delete a flag
     - DELETE /moderation/flags
     - <b>Permissions Needed:</b> MODERATION_ADMIN or owner
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - parameter contextName: (query) The name of the context (optional)
     - parameter contextId: (query) The id of the context (optional)
     - parameter userId: (query) The id of the user (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func deleteFlagWithRequestBuilder(contextName: String? = nil, contextId: String? = nil, userId: Int32? = nil) -> RequestBuilder<Void> {
        let path = "/moderation/flags"
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "context_name": contextName, 
            "context_id": contextId, 
            "user_id": userId?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns a page of flags
     - parameter filterContext: (query) Filter by flag context (optional)
     - parameter filterContextId: (query) Filter by flag context ID (optional)
     - parameter filterUserId: (query) Filter by user ID (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFlags(filterContext: String? = nil, filterContextId: String? = nil, filterUserId: Int32? = nil, size: Int32? = nil, page: Int32? = nil, completion: @escaping ((_ data: PageResourceFlagResource?, _ error: ErrorResponse?) -> Void)) {
        getFlagsWithRequestBuilder(filterContext: filterContext, filterContextId: filterContextId, filterUserId: filterUserId, size: size, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns a page of flags
     - GET /moderation/flags
     - <b>Permissions Needed:</b> MODERATION_ADMIN or owner
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "number" : 0,
  "last" : true,
  "size" : 1,
  "total_elements" : 5,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  }, {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 5,
  "number_of_elements" : 6,
  "content" : [ {
    "reason" : "reason",
    "context" : "context",
    "context_id" : "context_id",
    "created_date" : 0,
    "id" : 6,
    "updated_date" : 1,
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    }
  }, {
    "reason" : "reason",
    "context" : "context",
    "context_id" : "context_id",
    "created_date" : 0,
    "id" : 6,
    "updated_date" : 1,
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    }
  } ],
  "first" : true
}}]
     - parameter filterContext: (query) Filter by flag context (optional)
     - parameter filterContextId: (query) Filter by flag context ID (optional)
     - parameter filterUserId: (query) Filter by user ID (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - returns: RequestBuilder<PageResourceFlagResource> 
     */
    open class func getFlagsWithRequestBuilder(filterContext: String? = nil, filterContextId: String? = nil, filterUserId: Int32? = nil, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<PageResourceFlagResource> {
        let path = "/moderation/flags"
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter_context": filterContext, 
            "filter_context_id": filterContextId, 
            "filter_user_id": filterUserId?.encodeToJSON(), 
            "size": size?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<PageResourceFlagResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a flag report
     - parameter id: (path) The flag report id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getModerationReport(id: Int64, completion: @escaping ((_ data: FlagReportResource?, _ error: ErrorResponse?) -> Void)) {
        getModerationReportWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a flag report
     - GET /moderation/reports/{id}
     - <b>Permissions Needed:</b> MODERATION_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "reason" : "reason",
  "context" : "context",
  "context_id" : "context_id",
  "created_date" : 0,
  "id" : 6,
  "updated_date" : 5,
  "resolution" : "banned",
  "resolved" : 1
}}]
     - parameter id: (path) The flag report id 
     - returns: RequestBuilder<FlagReportResource> 
     */
    open class func getModerationReportWithRequestBuilder(id: Int64) -> RequestBuilder<FlagReportResource> {
        var path = "/moderation/reports/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FlagReportResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns a page of flag reports
     - parameter excludeResolved: (query) Ignore resolved context (optional, default to true)
     - parameter filterContext: (query) Filter by moderation context (optional)
     - parameter filterContextId: (query) Filter by moderation context ID (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getModerationReports(excludeResolved: Bool? = nil, filterContext: String? = nil, filterContextId: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: PageResourceFlagReportResource?, _ error: ErrorResponse?) -> Void)) {
        getModerationReportsWithRequestBuilder(excludeResolved: excludeResolved, filterContext: filterContext, filterContextId: filterContextId, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns a page of flag reports
     - GET /moderation/reports
     - Context can be either a free-form string or a pre-defined context name. <br><br><b>Permissions Needed:</b> MODERATION_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "number" : 5,
  "last" : true,
  "size" : 7,
  "total_elements" : 9,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  }, {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 3,
  "number_of_elements" : 2,
  "content" : [ {
    "reason" : "reason",
    "context" : "context",
    "context_id" : "context_id",
    "created_date" : 0,
    "id" : 6,
    "updated_date" : 5,
    "resolution" : "banned",
    "resolved" : 1
  }, {
    "reason" : "reason",
    "context" : "context",
    "context_id" : "context_id",
    "created_date" : 0,
    "id" : 6,
    "updated_date" : 5,
    "resolution" : "banned",
    "resolved" : 1
  } ],
  "first" : true
}}]
     - parameter excludeResolved: (query) Ignore resolved context (optional, default to true)
     - parameter filterContext: (query) Filter by moderation context (optional)
     - parameter filterContextId: (query) Filter by moderation context ID (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)
     - returns: RequestBuilder<PageResourceFlagReportResource> 
     */
    open class func getModerationReportsWithRequestBuilder(excludeResolved: Bool? = nil, filterContext: String? = nil, filterContextId: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceFlagReportResource> {
        let path = "/moderation/reports"
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "exclude_resolved": excludeResolved, 
            "filter_context": filterContext, 
            "filter_context_id": filterContextId, 
            "size": size?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "order": order
        ])

        let requestBuilder: RequestBuilder<PageResourceFlagReportResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update a flag report
     - parameter id: (path) The flag report id 
     - parameter flagReportResource: (body) The new flag report (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateModerationReport(id: Int64, flagReportResource: FlagReportResource? = nil, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        updateModerationReportWithRequestBuilder(id: id, flagReportResource: flagReportResource).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Update a flag report
     - PUT /moderation/reports/{id}
     - Lets you set the resolution of a report. Resolution types is {banned,ignore} in case of 'banned' you will need to pass the reason. <br><br><b>Permissions Needed:</b> MODERATION_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - parameter id: (path) The flag report id 
     - parameter flagReportResource: (body) The new flag report (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func updateModerationReportWithRequestBuilder(id: Int64, flagReportResource: FlagReportResource? = nil) -> RequestBuilder<Void> {
        var path = "/moderation/reports/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = flagReportResource?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
