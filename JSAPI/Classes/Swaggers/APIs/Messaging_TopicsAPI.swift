//
// Messaging_TopicsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class Messaging_TopicsAPI: APIBase {
    /**
     Enable or disable messages for a user
     - parameter id: (path) The id of the topic 
     - parameter userId: (path) The id of the subscriber or &#39;me&#39; 
     - parameter disabled: (body) disabled 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func disableTopicSubscriber(id: String, userId: String, disabled: ValueWrapperboolean, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        disableTopicSubscriberWithRequestBuilder(id: id, userId: userId, disabled: disabled).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Enable or disable messages for a user
     - PUT /messaging/topics/{id}/subscribers/{user_id}/disabled
     - Useful for opt-out options on a single topic. Consider multiple topics for multiple opt-out options. <br><br><b>Permissions Needed:</b> TOPICS_ADMIN or self
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - parameter id: (path) The id of the topic 
     - parameter userId: (path) The id of the subscriber or &#39;me&#39; 
     - parameter disabled: (body) disabled 
     - returns: RequestBuilder<Void> 
     */
    open class func disableTopicSubscriberWithRequestBuilder(id: String, userId: String, disabled: ValueWrapperboolean) -> RequestBuilder<Void> {
        var path = "/messaging/topics/{id}/subscribers/{user_id}/disabled"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{user_id}", with: "\(userId)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = disabled.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get a subscriber to a topic
     - parameter id: (path) The id of the topic 
     - parameter userId: (path) The id of the subscriber or &#39;me&#39; 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTopicSubscriber(id: String, userId: String, completion: @escaping ((_ data: TopicSubscriberResource?, _ error: ErrorResponse?) -> Void)) {
        getTopicSubscriberWithRequestBuilder(id: id, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a subscriber to a topic
     - GET /messaging/topics/{id}/subscribers/{user_id}
     - <b>Permissions Needed:</b> TOPICS_ADMIN or self
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "user_id" : 0,
  "disabled" : false,
  "topic_id" : "topic_id",
  "username" : "username"
}}]
     - parameter id: (path) The id of the topic 
     - parameter userId: (path) The id of the subscriber or &#39;me&#39; 
     - returns: RequestBuilder<TopicSubscriberResource> 
     */
    open class func getTopicSubscriberWithRequestBuilder(id: String, userId: String) -> RequestBuilder<TopicSubscriberResource> {
        var path = "/messaging/topics/{id}/subscribers/{user_id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{user_id}", with: "\(userId)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TopicSubscriberResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all messaging topics for a given user
     - parameter id: (path) The id of the user or &#39;me&#39; 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserTopics(id: String, completion: @escaping ((_ data: PageResourceTopicResource?, _ error: ErrorResponse?) -> Void)) {
        getUserTopicsWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all messaging topics for a given user
     - GET /users/{id}/topics
     - <b>Permissions Needed:</b> TOPICS_ADMIN or self
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "number" : 5,
  "last" : true,
  "size" : 2,
  "total_elements" : 7,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  }, {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 9,
  "number_of_elements" : 5,
  "content" : [ {
    "user_count" : 1,
    "created_date" : 0,
    "id" : "id",
    "updated_date" : 6,
    "display_name" : "display_name",
    "locked" : false,
    "tags" : [ "tags", "tags" ]
  }, {
    "user_count" : 1,
    "created_date" : 0,
    "id" : "id",
    "updated_date" : 6,
    "display_name" : "display_name",
    "locked" : false,
    "tags" : [ "tags", "tags" ]
  } ],
  "first" : true
}}]
     - parameter id: (path) The id of the user or &#39;me&#39; 
     - returns: RequestBuilder<PageResourceTopicResource> 
     */
    open class func getUserTopicsWithRequestBuilder(id: String) -> RequestBuilder<PageResourceTopicResource> {
        var path = "/users/{id}/topics"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PageResourceTopicResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
