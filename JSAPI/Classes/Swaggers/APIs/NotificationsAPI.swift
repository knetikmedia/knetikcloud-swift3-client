//
// NotificationsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class NotificationsAPI: APIBase {
    /**
     Create a notification type
     - parameter notificationType: (body) notificationType (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createNotificationType(notificationType: NotificationTypeResource? = nil, completion: @escaping ((_ data: NotificationTypeResource?, _ error: ErrorResponse?) -> Void)) {
        createNotificationTypeWithRequestBuilder(notificationType: notificationType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a notification type
     - POST /notifications/types
     - <b>Permissions Needed:</b> NOTIFICATIONS_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "email_body_template_external" : false,
  "email_body_template_id" : "email_body_template_id",
  "name" : "name",
  "sms_template_id" : "sms_template_id",
  "created_date" : 0,
  "email_subject_template_id" : "email_subject_template_id",
  "id" : "id",
  "updated_date" : 6
}}]
     - parameter notificationType: (body) notificationType (optional)
     - returns: RequestBuilder<NotificationTypeResource> 
     */
    open class func createNotificationTypeWithRequestBuilder(notificationType: NotificationTypeResource? = nil) -> RequestBuilder<NotificationTypeResource> {
        let path = "/notifications/types"
        let URLString = JSAPIAPI.basePath + path
        let parameters = notificationType?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NotificationTypeResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a notification type
     - parameter id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteNotificationType(id: String, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        deleteNotificationTypeWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Delete a notification type
     - DELETE /notifications/types/{id}
     - <b>Permissions Needed:</b> NOTIFICATIONS_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - parameter id: (path) id 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteNotificationTypeWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var path = "/notifications/types/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a single notification type
     - parameter id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getNotificationType(id: String, completion: @escaping ((_ data: NotificationTypeResource?, _ error: ErrorResponse?) -> Void)) {
        getNotificationTypeWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a single notification type
     - GET /notifications/types/{id}
     - <b>Permissions Needed:</b> NOTIFICATIONS_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "email_body_template_external" : false,
  "email_body_template_id" : "email_body_template_id",
  "name" : "name",
  "sms_template_id" : "sms_template_id",
  "created_date" : 0,
  "email_subject_template_id" : "email_subject_template_id",
  "id" : "id",
  "updated_date" : 6
}}]
     - parameter id: (path) id 
     - returns: RequestBuilder<NotificationTypeResource> 
     */
    open class func getNotificationTypeWithRequestBuilder(id: String) -> RequestBuilder<NotificationTypeResource> {
        var path = "/notifications/types/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NotificationTypeResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List and search notification types
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getNotificationTypes(size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: PageResourceNotificationTypeResource?, _ error: ErrorResponse?) -> Void)) {
        getNotificationTypesWithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List and search notification types
     - GET /notifications/types
     - Get a list of notification type with optional filtering. <br><br><b>Permissions Needed:</b> NOTIFICATIONS_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "number" : 1,
  "last" : true,
  "size" : 5,
  "total_elements" : 2,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  }, {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 7,
  "number_of_elements" : 5,
  "content" : [ {
    "email_body_template_external" : false,
    "email_body_template_id" : "email_body_template_id",
    "name" : "name",
    "sms_template_id" : "sms_template_id",
    "created_date" : 0,
    "email_subject_template_id" : "email_subject_template_id",
    "id" : "id",
    "updated_date" : 6
  }, {
    "email_body_template_external" : false,
    "email_body_template_id" : "email_body_template_id",
    "name" : "name",
    "sms_template_id" : "sms_template_id",
    "created_date" : 0,
    "email_subject_template_id" : "email_subject_template_id",
    "id" : "id",
    "updated_date" : 6
  } ],
  "first" : true
}}]
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - returns: RequestBuilder<PageResourceNotificationTypeResource> 
     */
    open class func getNotificationTypesWithRequestBuilder(size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceNotificationTypeResource> {
        let path = "/notifications/types"
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "size": size?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "order": order
        ])

        let requestBuilder: RequestBuilder<PageResourceNotificationTypeResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     View a user's notification settings for a type
     - parameter typeId: (path) The id of the topic 
     - parameter userId: (path) The id of the subscriber or &#39;me&#39; 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserNotificationInfo(typeId: String, userId: String, completion: @escaping ((_ data: NotificationUserTypeResource?, _ error: ErrorResponse?) -> Void)) {
        getUserNotificationInfoWithRequestBuilder(typeId: typeId, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     View a user's notification settings for a type
     - GET /users/{user_id}/notifications/types/{type_id}
     - <b>Permissions Needed:</b> NOTIFICATIONS_ADMIN or self
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "silenced" : false,
  "user_id" : 0,
  "type" : "type"
}}]
     - parameter typeId: (path) The id of the topic 
     - parameter userId: (path) The id of the subscriber or &#39;me&#39; 
     - returns: RequestBuilder<NotificationUserTypeResource> 
     */
    open class func getUserNotificationInfoWithRequestBuilder(typeId: String, userId: String) -> RequestBuilder<NotificationUserTypeResource> {
        var path = "/users/{user_id}/notifications/types/{type_id}"
        path = path.replacingOccurrences(of: "{type_id}", with: "\(typeId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{user_id}", with: "\(userId)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NotificationUserTypeResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     View a user's notification settings
     - parameter userId: (path) The id of the subscriber or &#39;me&#39; 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserNotificationInfoList(userId: String, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: PageResourceNotificationUserTypeResource?, _ error: ErrorResponse?) -> Void)) {
        getUserNotificationInfoListWithRequestBuilder(userId: userId, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     View a user's notification settings
     - GET /users/{user_id}/notifications/types
     - <b>Permissions Needed:</b> NOTIFICATIONS_ADMIN or self
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "number" : 6,
  "last" : true,
  "size" : 5,
  "total_elements" : 5,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  }, {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 2,
  "number_of_elements" : 1,
  "content" : [ {
    "silenced" : false,
    "user_id" : 0,
    "type" : "type"
  }, {
    "silenced" : false,
    "user_id" : 0,
    "type" : "type"
  } ],
  "first" : true
}}]
     - parameter userId: (path) The id of the subscriber or &#39;me&#39; 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - returns: RequestBuilder<PageResourceNotificationUserTypeResource> 
     */
    open class func getUserNotificationInfoListWithRequestBuilder(userId: String, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceNotificationUserTypeResource> {
        var path = "/users/{user_id}/notifications/types"
        path = path.replacingOccurrences(of: "{user_id}", with: "\(userId)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "size": size?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "order": order
        ])

        let requestBuilder: RequestBuilder<PageResourceNotificationUserTypeResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter filterStatus
     */
    public enum FilterStatus_getUserNotifications: String { 
        case pending = "pending"
        case read = "read"
        case hidden = "hidden"
    }

    /**
     Get notifications
     - parameter id: (path) The id of the user or &#39;me&#39; 
     - parameter filterStatus: (query) filter for notifications with a given status (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserNotifications(id: String, filterStatus: FilterStatus_getUserNotifications? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: PageResourceUserNotificationResource?, _ error: ErrorResponse?) -> Void)) {
        getUserNotificationsWithRequestBuilder(id: id, filterStatus: filterStatus, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get notifications
     - GET /users/{id}/notifications
     - <b>Permissions Needed:</b> NOTIFICATIONS_ADMIN or self
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "number" : 5,
  "last" : true,
  "size" : 2,
  "total_elements" : 7,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  }, {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 9,
  "number_of_elements" : 5,
  "content" : [ {
    "recipient_type" : "user",
    "data" : "{}",
    "send_date" : 6,
    "user_id" : 1,
    "notification_type_id" : "notification_type_id",
    "recipient" : "recipient",
    "notification_id" : "notification_id",
    "retrieve_date" : 0,
    "status" : "pending"
  }, {
    "recipient_type" : "user",
    "data" : "{}",
    "send_date" : 6,
    "user_id" : 1,
    "notification_type_id" : "notification_type_id",
    "recipient" : "recipient",
    "notification_id" : "notification_id",
    "retrieve_date" : 0,
    "status" : "pending"
  } ],
  "first" : true
}}]
     - parameter id: (path) The id of the user or &#39;me&#39; 
     - parameter filterStatus: (query) filter for notifications with a given status (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - returns: RequestBuilder<PageResourceUserNotificationResource> 
     */
    open class func getUserNotificationsWithRequestBuilder(id: String, filterStatus: FilterStatus_getUserNotifications? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceUserNotificationResource> {
        var path = "/users/{id}/notifications"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter_status": filterStatus?.rawValue, 
            "size": size?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "order": order
        ])

        let requestBuilder: RequestBuilder<PageResourceUserNotificationResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Send a notification
     - parameter notification: (body) notification (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendNotification(notification: NotificationResource? = nil, completion: @escaping ((_ data: NotificationResource?, _ error: ErrorResponse?) -> Void)) {
        sendNotificationWithRequestBuilder(notification: notification).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Send a notification
     - POST /notifications
     - <b>Permissions Needed:</b> NOTIFICATIONS_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "recipient_type" : "user",
  "data" : "{}",
  "send_date" : 0,
  "notification_type_id" : "notification_type_id",
  "recipient" : "recipient",
  "notification_id" : "notification_id"
}}]
     - parameter notification: (body) notification (optional)
     - returns: RequestBuilder<NotificationResource> 
     */
    open class func sendNotificationWithRequestBuilder(notification: NotificationResource? = nil) -> RequestBuilder<NotificationResource> {
        let path = "/notifications"
        let URLString = JSAPIAPI.basePath + path
        let parameters = notification?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NotificationResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set notification status
     - parameter userId: (path) The id of the user or &#39;me&#39; 
     - parameter notificationId: (path) The id of the notification 
     - parameter notification: (body) status (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setUserNotificationStatus(userId: String, notificationId: String, notification: UserNotificationStatusWrapper? = nil, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        setUserNotificationStatusWithRequestBuilder(userId: userId, notificationId: notificationId, notification: notification).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Set notification status
     - PUT /users/{user_id}/notifications/{notification_id}/status
     - <b>Permissions Needed:</b> NOTIFICATIONS_ADMIN or self
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - parameter userId: (path) The id of the user or &#39;me&#39; 
     - parameter notificationId: (path) The id of the notification 
     - parameter notification: (body) status (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func setUserNotificationStatusWithRequestBuilder(userId: String, notificationId: String, notification: UserNotificationStatusWrapper? = nil) -> RequestBuilder<Void> {
        var path = "/users/{user_id}/notifications/{notification_id}/status"
        path = path.replacingOccurrences(of: "{user_id}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{notification_id}", with: "\(notificationId)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = notification?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Enable or disable direct notifications for a user
     - parameter typeId: (path) The id of the topic 
     - parameter userId: (path) The id of the subscriber or &#39;me&#39; 
     - parameter silenced: (body) silenced 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func silenceDirectNotifications(typeId: String, userId: String, silenced: ValueWrapperboolean, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        silenceDirectNotificationsWithRequestBuilder(typeId: typeId, userId: userId, silenced: silenced).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Enable or disable direct notifications for a user
     - PUT /users/{user_id}/notifications/types/{type_id}/silenced
     - Allows enabling or disabling messages for a given notification type when sent direct to the user. Notifications can still be retrieved by endpoint. For notifications broadcased to a topic, see the topic service to disable messages for the user there. <br><br><b>Permissions Needed:</b> NOTIFICATIONS_ADMIN or self
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - parameter typeId: (path) The id of the topic 
     - parameter userId: (path) The id of the subscriber or &#39;me&#39; 
     - parameter silenced: (body) silenced 
     - returns: RequestBuilder<Void> 
     */
    open class func silenceDirectNotificationsWithRequestBuilder(typeId: String, userId: String, silenced: ValueWrapperboolean) -> RequestBuilder<Void> {
        var path = "/users/{user_id}/notifications/types/{type_id}/silenced"
        path = path.replacingOccurrences(of: "{type_id}", with: "\(typeId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{user_id}", with: "\(userId)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = silenced.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a notificationType
     - parameter id: (path) id 
     - parameter notificationType: (body) notificationType (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateNotificationType(id: String, notificationType: NotificationTypeResource? = nil, completion: @escaping ((_ data: NotificationTypeResource?, _ error: ErrorResponse?) -> Void)) {
        updateNotificationTypeWithRequestBuilder(id: id, notificationType: notificationType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update a notificationType
     - PUT /notifications/types/{id}
     - <b>Permissions Needed:</b> NOTIFICATIONS_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "email_body_template_external" : false,
  "email_body_template_id" : "email_body_template_id",
  "name" : "name",
  "sms_template_id" : "sms_template_id",
  "created_date" : 0,
  "email_subject_template_id" : "email_subject_template_id",
  "id" : "id",
  "updated_date" : 6
}}]
     - parameter id: (path) id 
     - parameter notificationType: (body) notificationType (optional)
     - returns: RequestBuilder<NotificationTypeResource> 
     */
    open class func updateNotificationTypeWithRequestBuilder(id: String, notificationType: NotificationTypeResource? = nil) -> RequestBuilder<NotificationTypeResource> {
        var path = "/notifications/types/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = notificationType?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NotificationTypeResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
