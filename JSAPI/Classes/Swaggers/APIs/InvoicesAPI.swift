//
// InvoicesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class InvoicesAPI: APIBase {
    /**
     Create an invoice
     - parameter req: (body) Invoice to be created (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createInvoice(req: InvoiceCreateRequest? = nil, completion: @escaping ((_ data: [InvoiceResource]?, _ error: ErrorResponse?) -> Void)) {
        createInvoiceWithRequestBuilder(req: req).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create an invoice
     - POST /invoices
     - Create an invoice(s) by providing a cart GUID. Note that there may be multiple invoices created, one per vendor.

     - examples: [{contentType=application/json, example=[ {
  "shipping_city_name" : "shipping_city_name",
  "order_notes" : "order_notes",
  "parent_invoice_id" : 1,
  "discount" : 6.027456183070403,
  "state_tax" : 4.965218492984954,
  "cart_id" : "cart_id",
  "name_prefix" : "name_prefix",
  "billing_postal_code" : "billing_postal_code",
  "shipping" : 7.457744773683766,
  "billing_state_name" : "billing_state_name",
  "billing_country_name" : "billing_country_name",
  "currency" : "currency",
  "current_fulfillment_status" : "current_fulfillment_status",
  "grand_total" : 5.962133916683182,
  "id" : 5,
  "current_payment_status" : "current_payment_status",
  "billing_address1" : "billing_address1",
  "invoice_number" : "invoice_number",
  "billing_address2" : "billing_address2",
  "email" : "email",
  "vendor_name" : "vendor_name",
  "billing_full_name" : "billing_full_name",
  "sort" : 1,
  "shipping_full_name" : "shipping_full_name",
  "fed_tax" : 1.4658129805029452,
  "payment_method_id" : 6,
  "phone" : "phone",
  "external_ref" : "external_ref",
  "shipping_address2" : "shipping_address2",
  "subtotal" : 5.025004791520295,
  "shipping_address1" : "shipping_address1",
  "vendor_id" : 9,
  "shipping_state_name" : "shipping_state_name",
  "billing_city_name" : "billing_city_name",
  "phone_number" : "phone_number",
  "created_date" : 0,
  "shipping_country_name" : "shipping_country_name",
  "updated_date" : 9,
  "items" : [ {
    "type_hint" : "type_hint",
    "total_price" : 1.2315135367772556,
    "item_id" : 9,
    "system_price" : 7.386281948385884,
    "item_name" : "item_name",
    "original_unit_price" : 2.027123023002322,
    "unit_price" : 1.0246457001441578,
    "qty" : 4,
    "invoice_id" : 7,
    "current_fulfillment_status" : "current_fulfillment_status",
    "id" : 2,
    "sale_name" : "sale_name",
    "bundle_sku" : "bundle_sku",
    "original_total_price" : 3.616076749251911,
    "sku" : "sku",
    "sku_description" : "sku_description"
  }, {
    "type_hint" : "type_hint",
    "total_price" : 1.2315135367772556,
    "item_id" : 9,
    "system_price" : 7.386281948385884,
    "item_name" : "item_name",
    "original_unit_price" : 2.027123023002322,
    "unit_price" : 1.0246457001441578,
    "qty" : 4,
    "invoice_id" : 7,
    "current_fulfillment_status" : "current_fulfillment_status",
    "id" : 2,
    "sale_name" : "sale_name",
    "bundle_sku" : "bundle_sku",
    "original_total_price" : 3.616076749251911,
    "sku" : "sku",
    "sku_description" : "sku_description"
  } ],
  "user" : {
    "avatar_url" : "avatar_url",
    "id" : 1,
    "display_name" : "display_name",
    "username" : "username"
  },
  "shipping_postal_code" : "shipping_postal_code"
}, {
  "shipping_city_name" : "shipping_city_name",
  "order_notes" : "order_notes",
  "parent_invoice_id" : 1,
  "discount" : 6.027456183070403,
  "state_tax" : 4.965218492984954,
  "cart_id" : "cart_id",
  "name_prefix" : "name_prefix",
  "billing_postal_code" : "billing_postal_code",
  "shipping" : 7.457744773683766,
  "billing_state_name" : "billing_state_name",
  "billing_country_name" : "billing_country_name",
  "currency" : "currency",
  "current_fulfillment_status" : "current_fulfillment_status",
  "grand_total" : 5.962133916683182,
  "id" : 5,
  "current_payment_status" : "current_payment_status",
  "billing_address1" : "billing_address1",
  "invoice_number" : "invoice_number",
  "billing_address2" : "billing_address2",
  "email" : "email",
  "vendor_name" : "vendor_name",
  "billing_full_name" : "billing_full_name",
  "sort" : 1,
  "shipping_full_name" : "shipping_full_name",
  "fed_tax" : 1.4658129805029452,
  "payment_method_id" : 6,
  "phone" : "phone",
  "external_ref" : "external_ref",
  "shipping_address2" : "shipping_address2",
  "subtotal" : 5.025004791520295,
  "shipping_address1" : "shipping_address1",
  "vendor_id" : 9,
  "shipping_state_name" : "shipping_state_name",
  "billing_city_name" : "billing_city_name",
  "phone_number" : "phone_number",
  "created_date" : 0,
  "shipping_country_name" : "shipping_country_name",
  "updated_date" : 9,
  "items" : [ {
    "type_hint" : "type_hint",
    "total_price" : 1.2315135367772556,
    "item_id" : 9,
    "system_price" : 7.386281948385884,
    "item_name" : "item_name",
    "original_unit_price" : 2.027123023002322,
    "unit_price" : 1.0246457001441578,
    "qty" : 4,
    "invoice_id" : 7,
    "current_fulfillment_status" : "current_fulfillment_status",
    "id" : 2,
    "sale_name" : "sale_name",
    "bundle_sku" : "bundle_sku",
    "original_total_price" : 3.616076749251911,
    "sku" : "sku",
    "sku_description" : "sku_description"
  }, {
    "type_hint" : "type_hint",
    "total_price" : 1.2315135367772556,
    "item_id" : 9,
    "system_price" : 7.386281948385884,
    "item_name" : "item_name",
    "original_unit_price" : 2.027123023002322,
    "unit_price" : 1.0246457001441578,
    "qty" : 4,
    "invoice_id" : 7,
    "current_fulfillment_status" : "current_fulfillment_status",
    "id" : 2,
    "sale_name" : "sale_name",
    "bundle_sku" : "bundle_sku",
    "original_total_price" : 3.616076749251911,
    "sku" : "sku",
    "sku_description" : "sku_description"
  } ],
  "user" : {
    "avatar_url" : "avatar_url",
    "id" : 1,
    "display_name" : "display_name",
    "username" : "username"
  },
  "shipping_postal_code" : "shipping_postal_code"
} ]}]
     - parameter req: (body) Invoice to be created (optional)
     - returns: RequestBuilder<[InvoiceResource]> 
     */
    open class func createInvoiceWithRequestBuilder(req: InvoiceCreateRequest? = nil) -> RequestBuilder<[InvoiceResource]> {
        let path = "/invoices"
        let URLString = JSAPIAPI.basePath + path
        let parameters = req?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InvoiceResource]>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Lists available fulfillment statuses
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFulFillmentStatuses(completion: @escaping ((_ data: [String]?, _ error: ErrorResponse?) -> Void)) {
        getFulFillmentStatusesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Lists available fulfillment statuses
     - GET /invoices/fulfillment-statuses

     - examples: [{contentType=application/json, example=[ "", "" ]}]
     - returns: RequestBuilder<[String]> 
     */
    open class func getFulFillmentStatusesWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/invoices/fulfillment-statuses"
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieve an invoice
     - parameter id: (path) The id of the invoice 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInvoice(id: Int32, completion: @escaping ((_ data: InvoiceResource?, _ error: ErrorResponse?) -> Void)) {
        getInvoiceWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve an invoice
     - GET /invoices/{id}

     - examples: [{contentType=application/json, example={
  "shipping_city_name" : "shipping_city_name",
  "order_notes" : "order_notes",
  "parent_invoice_id" : 1,
  "discount" : 6.027456183070403,
  "state_tax" : 4.965218492984954,
  "cart_id" : "cart_id",
  "name_prefix" : "name_prefix",
  "billing_postal_code" : "billing_postal_code",
  "shipping" : 7.457744773683766,
  "billing_state_name" : "billing_state_name",
  "billing_country_name" : "billing_country_name",
  "currency" : "currency",
  "current_fulfillment_status" : "current_fulfillment_status",
  "grand_total" : 5.962133916683182,
  "id" : 5,
  "current_payment_status" : "current_payment_status",
  "billing_address1" : "billing_address1",
  "invoice_number" : "invoice_number",
  "billing_address2" : "billing_address2",
  "email" : "email",
  "vendor_name" : "vendor_name",
  "billing_full_name" : "billing_full_name",
  "sort" : 1,
  "shipping_full_name" : "shipping_full_name",
  "fed_tax" : 1.4658129805029452,
  "payment_method_id" : 6,
  "phone" : "phone",
  "external_ref" : "external_ref",
  "shipping_address2" : "shipping_address2",
  "subtotal" : 5.025004791520295,
  "shipping_address1" : "shipping_address1",
  "vendor_id" : 9,
  "shipping_state_name" : "shipping_state_name",
  "billing_city_name" : "billing_city_name",
  "phone_number" : "phone_number",
  "created_date" : 0,
  "shipping_country_name" : "shipping_country_name",
  "updated_date" : 9,
  "items" : [ {
    "type_hint" : "type_hint",
    "total_price" : 1.2315135367772556,
    "item_id" : 9,
    "system_price" : 7.386281948385884,
    "item_name" : "item_name",
    "original_unit_price" : 2.027123023002322,
    "unit_price" : 1.0246457001441578,
    "qty" : 4,
    "invoice_id" : 7,
    "current_fulfillment_status" : "current_fulfillment_status",
    "id" : 2,
    "sale_name" : "sale_name",
    "bundle_sku" : "bundle_sku",
    "original_total_price" : 3.616076749251911,
    "sku" : "sku",
    "sku_description" : "sku_description"
  }, {
    "type_hint" : "type_hint",
    "total_price" : 1.2315135367772556,
    "item_id" : 9,
    "system_price" : 7.386281948385884,
    "item_name" : "item_name",
    "original_unit_price" : 2.027123023002322,
    "unit_price" : 1.0246457001441578,
    "qty" : 4,
    "invoice_id" : 7,
    "current_fulfillment_status" : "current_fulfillment_status",
    "id" : 2,
    "sale_name" : "sale_name",
    "bundle_sku" : "bundle_sku",
    "original_total_price" : 3.616076749251911,
    "sku" : "sku",
    "sku_description" : "sku_description"
  } ],
  "user" : {
    "avatar_url" : "avatar_url",
    "id" : 1,
    "display_name" : "display_name",
    "username" : "username"
  },
  "shipping_postal_code" : "shipping_postal_code"
}}]
     - parameter id: (path) The id of the invoice 
     - returns: RequestBuilder<InvoiceResource> 
     */
    open class func getInvoiceWithRequestBuilder(id: Int32) -> RequestBuilder<InvoiceResource> {
        var path = "/invoices/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InvoiceResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List invoice logs
     - parameter id: (path) The id of the invoice 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInvoiceLogs(id: Int32, size: Int32? = nil, page: Int32? = nil, completion: @escaping ((_ data: PageResourceInvoiceLogEntry?, _ error: ErrorResponse?) -> Void)) {
        getInvoiceLogsWithRequestBuilder(id: id, size: size, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List invoice logs
     - GET /invoices/{id}/logs

     - examples: [{contentType=application/json, example={
  "number" : 1,
  "last" : true,
  "size" : 5,
  "total_elements" : 2,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  }, {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 7,
  "number_of_elements" : 5,
  "content" : [ {
    "date" : 0,
    "invoice_id" : 6,
    "message" : "message",
    "type" : "type"
  }, {
    "date" : 0,
    "invoice_id" : 6,
    "message" : "message",
    "type" : "type"
  } ],
  "first" : true
}}]
     - parameter id: (path) The id of the invoice 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - returns: RequestBuilder<PageResourceInvoiceLogEntry> 
     */
    open class func getInvoiceLogsWithRequestBuilder(id: Int32, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<PageResourceInvoiceLogEntry> {
        var path = "/invoices/{id}/logs"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "size": size?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<PageResourceInvoiceLogEntry>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieve invoices
     - parameter filterUser: (query) The id of a user to get invoices for. Automtically added if not being called with admin permissions. (optional)
     - parameter filterEmail: (query) Filters invoices by customer&#39;s email. Admins only. (optional)
     - parameter filterFulfillmentStatus: (query) Filters invoices by fulfillment status type. Can be a comma separated list of statuses (optional)
     - parameter filterPaymentStatus: (query) Filters invoices by payment status type. Can be a comma separated list of statuses (optional)
     - parameter filterItemName: (query) Filters invoices by item name containing the given string (optional)
     - parameter filterExternalRef: (query) Filters invoices by external reference. (optional)
     - parameter filterCreatedDate: (query) Filters invoices by creation date. Multiple values possible for range search. Format: filter_created_date&#x3D;OP,ts&amp;... where OP in (GT, LT, GOE, LOE, EQ) and ts is a unix timestamp in seconds. Ex: filter_created_date&#x3D;GT,1452154258,LT,1554254874 (optional)
     - parameter filterVendorIds: (query) Filters invoices for ones from one of the vendors whose id is in the given comma separated list (optional)
     - parameter filterCurrency: (query) Filters invoices by currency. ISO3 currency code (optional)
     - parameter filterShippingStateName: (query) Filters invoices by shipping address: Exact match state name (optional)
     - parameter filterShippingCountryName: (query) Filters invoices by shipping address: Exact match country name (optional)
     - parameter filterShipping: (query) Filters invoices by shipping price. Multiple values possible for range search. Format: filter_shipping&#x3D;OP,ts&amp;... where OP in (GT, LT, GOE, LOE, EQ). Ex: filter_shipping&#x3D;GT,14.58,LT,15.54 (optional)
     - parameter filterVendorName: (query) Filters invoices by vendor name starting with given string (optional)
     - parameter filterSku: (query) Filters invoices by item sku (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInvoices(filterUser: Int32? = nil, filterEmail: String? = nil, filterFulfillmentStatus: String? = nil, filterPaymentStatus: String? = nil, filterItemName: String? = nil, filterExternalRef: String? = nil, filterCreatedDate: String? = nil, filterVendorIds: String? = nil, filterCurrency: String? = nil, filterShippingStateName: String? = nil, filterShippingCountryName: String? = nil, filterShipping: String? = nil, filterVendorName: String? = nil, filterSku: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: PageResourceInvoiceResource?, _ error: ErrorResponse?) -> Void)) {
        getInvoicesWithRequestBuilder(filterUser: filterUser, filterEmail: filterEmail, filterFulfillmentStatus: filterFulfillmentStatus, filterPaymentStatus: filterPaymentStatus, filterItemName: filterItemName, filterExternalRef: filterExternalRef, filterCreatedDate: filterCreatedDate, filterVendorIds: filterVendorIds, filterCurrency: filterCurrency, filterShippingStateName: filterShippingStateName, filterShippingCountryName: filterShippingCountryName, filterShipping: filterShipping, filterVendorName: filterVendorName, filterSku: filterSku, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve invoices
     - GET /invoices
     - Without INVOICES_ADMIN permission the results are automatically filtered for only the logged in user's invoices. It is recomended however that filter_user be added to avoid issues for admin users accidentally getting additional invoices.

     - examples: [{contentType=application/json, example={
  "number" : 6,
  "last" : true,
  "size" : 9,
  "total_elements" : 6,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  }, {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 3,
  "number_of_elements" : 8,
  "content" : [ {
    "shipping_city_name" : "shipping_city_name",
    "order_notes" : "order_notes",
    "parent_invoice_id" : 1,
    "discount" : 6.027456183070403,
    "state_tax" : 4.965218492984954,
    "cart_id" : "cart_id",
    "name_prefix" : "name_prefix",
    "billing_postal_code" : "billing_postal_code",
    "shipping" : 7.457744773683766,
    "billing_state_name" : "billing_state_name",
    "billing_country_name" : "billing_country_name",
    "currency" : "currency",
    "current_fulfillment_status" : "current_fulfillment_status",
    "grand_total" : 5.962133916683182,
    "id" : 5,
    "current_payment_status" : "current_payment_status",
    "billing_address1" : "billing_address1",
    "invoice_number" : "invoice_number",
    "billing_address2" : "billing_address2",
    "email" : "email",
    "vendor_name" : "vendor_name",
    "billing_full_name" : "billing_full_name",
    "sort" : 1,
    "shipping_full_name" : "shipping_full_name",
    "fed_tax" : 1.4658129805029452,
    "payment_method_id" : 6,
    "phone" : "phone",
    "external_ref" : "external_ref",
    "shipping_address2" : "shipping_address2",
    "subtotal" : 5.025004791520295,
    "shipping_address1" : "shipping_address1",
    "vendor_id" : 9,
    "shipping_state_name" : "shipping_state_name",
    "billing_city_name" : "billing_city_name",
    "phone_number" : "phone_number",
    "created_date" : 0,
    "shipping_country_name" : "shipping_country_name",
    "updated_date" : 9,
    "items" : [ {
      "type_hint" : "type_hint",
      "total_price" : 1.2315135367772556,
      "item_id" : 9,
      "system_price" : 7.386281948385884,
      "item_name" : "item_name",
      "original_unit_price" : 2.027123023002322,
      "unit_price" : 1.0246457001441578,
      "qty" : 4,
      "invoice_id" : 7,
      "current_fulfillment_status" : "current_fulfillment_status",
      "id" : 2,
      "sale_name" : "sale_name",
      "bundle_sku" : "bundle_sku",
      "original_total_price" : 3.616076749251911,
      "sku" : "sku",
      "sku_description" : "sku_description"
    }, {
      "type_hint" : "type_hint",
      "total_price" : 1.2315135367772556,
      "item_id" : 9,
      "system_price" : 7.386281948385884,
      "item_name" : "item_name",
      "original_unit_price" : 2.027123023002322,
      "unit_price" : 1.0246457001441578,
      "qty" : 4,
      "invoice_id" : 7,
      "current_fulfillment_status" : "current_fulfillment_status",
      "id" : 2,
      "sale_name" : "sale_name",
      "bundle_sku" : "bundle_sku",
      "original_total_price" : 3.616076749251911,
      "sku" : "sku",
      "sku_description" : "sku_description"
    } ],
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 1,
      "display_name" : "display_name",
      "username" : "username"
    },
    "shipping_postal_code" : "shipping_postal_code"
  }, {
    "shipping_city_name" : "shipping_city_name",
    "order_notes" : "order_notes",
    "parent_invoice_id" : 1,
    "discount" : 6.027456183070403,
    "state_tax" : 4.965218492984954,
    "cart_id" : "cart_id",
    "name_prefix" : "name_prefix",
    "billing_postal_code" : "billing_postal_code",
    "shipping" : 7.457744773683766,
    "billing_state_name" : "billing_state_name",
    "billing_country_name" : "billing_country_name",
    "currency" : "currency",
    "current_fulfillment_status" : "current_fulfillment_status",
    "grand_total" : 5.962133916683182,
    "id" : 5,
    "current_payment_status" : "current_payment_status",
    "billing_address1" : "billing_address1",
    "invoice_number" : "invoice_number",
    "billing_address2" : "billing_address2",
    "email" : "email",
    "vendor_name" : "vendor_name",
    "billing_full_name" : "billing_full_name",
    "sort" : 1,
    "shipping_full_name" : "shipping_full_name",
    "fed_tax" : 1.4658129805029452,
    "payment_method_id" : 6,
    "phone" : "phone",
    "external_ref" : "external_ref",
    "shipping_address2" : "shipping_address2",
    "subtotal" : 5.025004791520295,
    "shipping_address1" : "shipping_address1",
    "vendor_id" : 9,
    "shipping_state_name" : "shipping_state_name",
    "billing_city_name" : "billing_city_name",
    "phone_number" : "phone_number",
    "created_date" : 0,
    "shipping_country_name" : "shipping_country_name",
    "updated_date" : 9,
    "items" : [ {
      "type_hint" : "type_hint",
      "total_price" : 1.2315135367772556,
      "item_id" : 9,
      "system_price" : 7.386281948385884,
      "item_name" : "item_name",
      "original_unit_price" : 2.027123023002322,
      "unit_price" : 1.0246457001441578,
      "qty" : 4,
      "invoice_id" : 7,
      "current_fulfillment_status" : "current_fulfillment_status",
      "id" : 2,
      "sale_name" : "sale_name",
      "bundle_sku" : "bundle_sku",
      "original_total_price" : 3.616076749251911,
      "sku" : "sku",
      "sku_description" : "sku_description"
    }, {
      "type_hint" : "type_hint",
      "total_price" : 1.2315135367772556,
      "item_id" : 9,
      "system_price" : 7.386281948385884,
      "item_name" : "item_name",
      "original_unit_price" : 2.027123023002322,
      "unit_price" : 1.0246457001441578,
      "qty" : 4,
      "invoice_id" : 7,
      "current_fulfillment_status" : "current_fulfillment_status",
      "id" : 2,
      "sale_name" : "sale_name",
      "bundle_sku" : "bundle_sku",
      "original_total_price" : 3.616076749251911,
      "sku" : "sku",
      "sku_description" : "sku_description"
    } ],
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 1,
      "display_name" : "display_name",
      "username" : "username"
    },
    "shipping_postal_code" : "shipping_postal_code"
  } ],
  "first" : true
}}]
     - parameter filterUser: (query) The id of a user to get invoices for. Automtically added if not being called with admin permissions. (optional)
     - parameter filterEmail: (query) Filters invoices by customer&#39;s email. Admins only. (optional)
     - parameter filterFulfillmentStatus: (query) Filters invoices by fulfillment status type. Can be a comma separated list of statuses (optional)
     - parameter filterPaymentStatus: (query) Filters invoices by payment status type. Can be a comma separated list of statuses (optional)
     - parameter filterItemName: (query) Filters invoices by item name containing the given string (optional)
     - parameter filterExternalRef: (query) Filters invoices by external reference. (optional)
     - parameter filterCreatedDate: (query) Filters invoices by creation date. Multiple values possible for range search. Format: filter_created_date&#x3D;OP,ts&amp;... where OP in (GT, LT, GOE, LOE, EQ) and ts is a unix timestamp in seconds. Ex: filter_created_date&#x3D;GT,1452154258,LT,1554254874 (optional)
     - parameter filterVendorIds: (query) Filters invoices for ones from one of the vendors whose id is in the given comma separated list (optional)
     - parameter filterCurrency: (query) Filters invoices by currency. ISO3 currency code (optional)
     - parameter filterShippingStateName: (query) Filters invoices by shipping address: Exact match state name (optional)
     - parameter filterShippingCountryName: (query) Filters invoices by shipping address: Exact match country name (optional)
     - parameter filterShipping: (query) Filters invoices by shipping price. Multiple values possible for range search. Format: filter_shipping&#x3D;OP,ts&amp;... where OP in (GT, LT, GOE, LOE, EQ). Ex: filter_shipping&#x3D;GT,14.58,LT,15.54 (optional)
     - parameter filterVendorName: (query) Filters invoices by vendor name starting with given string (optional)
     - parameter filterSku: (query) Filters invoices by item sku (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     - returns: RequestBuilder<PageResourceInvoiceResource> 
     */
    open class func getInvoicesWithRequestBuilder(filterUser: Int32? = nil, filterEmail: String? = nil, filterFulfillmentStatus: String? = nil, filterPaymentStatus: String? = nil, filterItemName: String? = nil, filterExternalRef: String? = nil, filterCreatedDate: String? = nil, filterVendorIds: String? = nil, filterCurrency: String? = nil, filterShippingStateName: String? = nil, filterShippingCountryName: String? = nil, filterShipping: String? = nil, filterVendorName: String? = nil, filterSku: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceInvoiceResource> {
        let path = "/invoices"
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter_user": filterUser?.encodeToJSON(), 
            "filter_email": filterEmail, 
            "filter_fulfillment_status": filterFulfillmentStatus, 
            "filter_payment_status": filterPaymentStatus, 
            "filter_item_name": filterItemName, 
            "filter_external_ref": filterExternalRef, 
            "filter_created_date": filterCreatedDate, 
            "filter_vendor_ids": filterVendorIds, 
            "filter_currency": filterCurrency, 
            "filter_shipping_state_name": filterShippingStateName, 
            "filter_shipping_country_name": filterShippingCountryName, 
            "filter_shipping": filterShipping, 
            "filter_vendor_name": filterVendorName, 
            "filter_sku": filterSku, 
            "size": size?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "order": order
        ])

        let requestBuilder: RequestBuilder<PageResourceInvoiceResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Lists available payment statuses
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPaymentStatuses(completion: @escaping ((_ data: [String]?, _ error: ErrorResponse?) -> Void)) {
        getPaymentStatusesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Lists available payment statuses
     - GET /invoices/payment-statuses

     - examples: [{contentType=application/json, example=[ "", "" ]}]
     - returns: RequestBuilder<[String]> 
     */
    open class func getPaymentStatusesWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/invoices/payment-statuses"
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Pay an invoice using a saved payment method
     - parameter id: (path) The id of the invoice 
     - parameter request: (body) The payment method details. Will default to the appropriate user&#39;s wallet in the invoice currency if ommited. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func payInvoice(id: Int32, request: PayBySavedMethodRequest? = nil, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        payInvoiceWithRequestBuilder(id: id, request: request).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Pay an invoice using a saved payment method
     - POST /invoices/{id}/payments

     - parameter id: (path) The id of the invoice 
     - parameter request: (body) The payment method details. Will default to the appropriate user&#39;s wallet in the invoice currency if ommited. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func payInvoiceWithRequestBuilder(id: Int32, request: PayBySavedMethodRequest? = nil) -> RequestBuilder<Void> {
        var path = "/invoices/{id}/payments"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = request?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set the fulfillment status of a bundled invoice item
     - parameter id: (path) The id of the invoice 
     - parameter bundleSku: (path) The sku of the bundle in the invoice that contains the given target 
     - parameter sku: (path) The sku of an item in the bundle in the invoice 
     - parameter status: (body) The new fulfillment status for the item. Additional options may be available based on configuration.  Allowable values:  &#39;unfulfilled&#39;, &#39;fulfilled&#39;, &#39;not fulfillable&#39;, &#39;failed&#39;, &#39;processing&#39;, &#39;failed_permanent&#39;, &#39;delayed&#39; 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setBundledInvoiceItemFulfillmentStatus(id: Int32, bundleSku: String, sku: String, status: StringWrapper, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        setBundledInvoiceItemFulfillmentStatusWithRequestBuilder(id: id, bundleSku: bundleSku, sku: sku, status: status).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Set the fulfillment status of a bundled invoice item
     - PUT /invoices/{id}/items/{bundleSku}/bundled-skus/{sku}/fulfillment-status
     - This allows external fulfillment systems to report success or failure. Fulfillment status changes are restricted by a specific flow determining which status can lead to which.

     - parameter id: (path) The id of the invoice 
     - parameter bundleSku: (path) The sku of the bundle in the invoice that contains the given target 
     - parameter sku: (path) The sku of an item in the bundle in the invoice 
     - parameter status: (body) The new fulfillment status for the item. Additional options may be available based on configuration.  Allowable values:  &#39;unfulfilled&#39;, &#39;fulfilled&#39;, &#39;not fulfillable&#39;, &#39;failed&#39;, &#39;processing&#39;, &#39;failed_permanent&#39;, &#39;delayed&#39; 
     - returns: RequestBuilder<Void> 
     */
    open class func setBundledInvoiceItemFulfillmentStatusWithRequestBuilder(id: Int32, bundleSku: String, sku: String, status: StringWrapper) -> RequestBuilder<Void> {
        var path = "/invoices/{id}/items/{bundleSku}/bundled-skus/{sku}/fulfillment-status"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{bundleSku}", with: "\(bundleSku)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{sku}", with: "\(sku)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = status.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set the external reference of an invoice
     - parameter id: (path) The id of the invoice 
     - parameter externalRef: (body) External reference info (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setExternalRef(id: Int32, externalRef: StringWrapper? = nil, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        setExternalRefWithRequestBuilder(id: id, externalRef: externalRef).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Set the external reference of an invoice
     - PUT /invoices/{id}/external-ref

     - parameter id: (path) The id of the invoice 
     - parameter externalRef: (body) External reference info (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func setExternalRefWithRequestBuilder(id: Int32, externalRef: StringWrapper? = nil) -> RequestBuilder<Void> {
        var path = "/invoices/{id}/external-ref"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = externalRef?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set the fulfillment status of an invoice item
     - parameter id: (path) The id of the invoice 
     - parameter sku: (path) The sku of an item in the invoice 
     - parameter status: (body) The new fulfillment status for the item. Additional options may be available based on configuration.  Allowable values:  &#39;unfulfilled&#39;, &#39;fulfilled&#39;, &#39;not fulfillable&#39;, &#39;failed&#39;, &#39;processing&#39;, &#39;failed_permanent&#39;, &#39;delayed&#39; 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setInvoiceItemFulfillmentStatus(id: Int32, sku: String, status: StringWrapper, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        setInvoiceItemFulfillmentStatusWithRequestBuilder(id: id, sku: sku, status: status).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Set the fulfillment status of an invoice item
     - PUT /invoices/{id}/items/{sku}/fulfillment-status
     - This allows external fulfillment systems to report success or failure. Fulfillment status changes are restricted by a specific flow determining which status can lead to which.

     - parameter id: (path) The id of the invoice 
     - parameter sku: (path) The sku of an item in the invoice 
     - parameter status: (body) The new fulfillment status for the item. Additional options may be available based on configuration.  Allowable values:  &#39;unfulfilled&#39;, &#39;fulfilled&#39;, &#39;not fulfillable&#39;, &#39;failed&#39;, &#39;processing&#39;, &#39;failed_permanent&#39;, &#39;delayed&#39; 
     - returns: RequestBuilder<Void> 
     */
    open class func setInvoiceItemFulfillmentStatusWithRequestBuilder(id: Int32, sku: String, status: StringWrapper) -> RequestBuilder<Void> {
        var path = "/invoices/{id}/items/{sku}/fulfillment-status"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{sku}", with: "\(sku)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = status.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set the order notes of an invoice
     - parameter id: (path) The id of the invoice 
     - parameter orderNotes: (body) Payment status info (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setOrderNotes(id: Int32, orderNotes: StringWrapper? = nil, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        setOrderNotesWithRequestBuilder(id: id, orderNotes: orderNotes).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Set the order notes of an invoice
     - PUT /invoices/{id}/order-notes

     - parameter id: (path) The id of the invoice 
     - parameter orderNotes: (body) Payment status info (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func setOrderNotesWithRequestBuilder(id: Int32, orderNotes: StringWrapper? = nil) -> RequestBuilder<Void> {
        var path = "/invoices/{id}/order-notes"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = orderNotes?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set the payment status of an invoice
     - parameter id: (path) The id of the invoice 
     - parameter request: (body) Payment status info (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setPaymentStatus(id: Int32, request: InvoicePaymentStatusRequest? = nil, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        setPaymentStatusWithRequestBuilder(id: id, request: request).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Set the payment status of an invoice
     - PUT /invoices/{id}/payment-status
     - This may trigger fulfillment if setting the status to 'paid'. This is mainly intended to support external payment systems that cannot be incorporated into the payment method system. Payment status changes are restricted by a specific flow determining which status can lead to which.

     - parameter id: (path) The id of the invoice 
     - parameter request: (body) Payment status info (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func setPaymentStatusWithRequestBuilder(id: Int32, request: InvoicePaymentStatusRequest? = nil) -> RequestBuilder<Void> {
        var path = "/invoices/{id}/payment-status"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = request?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set or update billing info
     - parameter id: (path) The id of the invoice 
     - parameter billingInfoRequest: (body) Address info (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateBillingInfo(id: Int32, billingInfoRequest: AddressResource? = nil, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        updateBillingInfoWithRequestBuilder(id: id, billingInfoRequest: billingInfoRequest).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Set or update billing info
     - PUT /invoices/{id}/billing-address

     - parameter id: (path) The id of the invoice 
     - parameter billingInfoRequest: (body) Address info (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func updateBillingInfoWithRequestBuilder(id: Int32, billingInfoRequest: AddressResource? = nil) -> RequestBuilder<Void> {
        var path = "/invoices/{id}/billing-address"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = billingInfoRequest?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
