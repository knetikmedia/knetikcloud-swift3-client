//
// PaymentsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class PaymentsAPI: APIBase {
    /**
     Create a new payment method for a user
     - parameter userId: (path) ID of the user for whom the payment method is being created 
     - parameter paymentMethod: (body) Payment method being created (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createPaymentMethod(userId: Int32, paymentMethod: PaymentMethodResource? = nil, completion: @escaping ((_ data: PaymentMethodResource?, _ error: ErrorResponse?) -> Void)) {
        createPaymentMethodWithRequestBuilder(userId: userId, paymentMethod: paymentMethod).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a new payment method for a user
     - POST /users/{user_id}/payment-methods
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "payment_method_type" : {
    "supports_refunds" : false,
    "supports_rebill" : false,
    "invoice_processing_hours" : 7,
    "supports_capture" : false,
    "name" : "name",
    "id" : 2,
    "supports_partial" : false
  },
  "last4" : "last4",
  "unique_key" : "unique_key",
  "verified" : true,
  "sort" : 9,
  "expiration_date" : 6,
  "token" : "token",
  "expiration_year" : 5,
  "default" : true,
  "payment_type" : "card",
  "user_id" : 2,
  "expiration_month" : 1,
  "name" : "name",
  "disabled" : false,
  "created_date" : 0,
  "id" : 5,
  "updated_date" : 3
}}]
     - parameter userId: (path) ID of the user for whom the payment method is being created 
     - parameter paymentMethod: (body) Payment method being created (optional)
     - returns: RequestBuilder<PaymentMethodResource> 
     */
    open class func createPaymentMethodWithRequestBuilder(userId: Int32, paymentMethod: PaymentMethodResource? = nil) -> RequestBuilder<PaymentMethodResource> {
        var path = "/users/{user_id}/payment-methods"
        path = path.replacingOccurrences(of: "{user_id}", with: "\(userId)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = paymentMethod?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PaymentMethodResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete an existing payment method for a user
     - parameter userId: (path) ID of the user for whom the payment method is being updated 
     - parameter id: (path) ID of the payment method being deleted 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deletePaymentMethod(userId: Int32, id: Int32, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        deletePaymentMethodWithRequestBuilder(userId: userId, id: id).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Delete an existing payment method for a user
     - DELETE /users/{user_id}/payment-methods/{id}
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - parameter userId: (path) ID of the user for whom the payment method is being updated 
     - parameter id: (path) ID of the payment method being deleted 
     - returns: RequestBuilder<Void> 
     */
    open class func deletePaymentMethodWithRequestBuilder(userId: Int32, id: Int32) -> RequestBuilder<Void> {
        var path = "/users/{user_id}/payment-methods/{id}"
        path = path.replacingOccurrences(of: "{user_id}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a single payment method for a user
     - parameter userId: (path) ID of the user for whom the payment method is being retrieved 
     - parameter id: (path) ID of the payment method being retrieved 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPaymentMethod(userId: Int32, id: Int32, completion: @escaping ((_ data: PaymentMethodResource?, _ error: ErrorResponse?) -> Void)) {
        getPaymentMethodWithRequestBuilder(userId: userId, id: id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a single payment method for a user
     - GET /users/{user_id}/payment-methods/{id}
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "payment_method_type" : {
    "supports_refunds" : false,
    "supports_rebill" : false,
    "invoice_processing_hours" : 7,
    "supports_capture" : false,
    "name" : "name",
    "id" : 2,
    "supports_partial" : false
  },
  "last4" : "last4",
  "unique_key" : "unique_key",
  "verified" : true,
  "sort" : 9,
  "expiration_date" : 6,
  "token" : "token",
  "expiration_year" : 5,
  "default" : true,
  "payment_type" : "card",
  "user_id" : 2,
  "expiration_month" : 1,
  "name" : "name",
  "disabled" : false,
  "created_date" : 0,
  "id" : 5,
  "updated_date" : 3
}}]
     - parameter userId: (path) ID of the user for whom the payment method is being retrieved 
     - parameter id: (path) ID of the payment method being retrieved 
     - returns: RequestBuilder<PaymentMethodResource> 
     */
    open class func getPaymentMethodWithRequestBuilder(userId: Int32, id: Int32) -> RequestBuilder<PaymentMethodResource> {
        var path = "/users/{user_id}/payment-methods/{id}"
        path = path.replacingOccurrences(of: "{user_id}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PaymentMethodResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a single payment method type
     - parameter id: (path) ID of the payment method type being retrieved 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPaymentMethodType(id: Int32, completion: @escaping ((_ data: PaymentMethodTypeResource?, _ error: ErrorResponse?) -> Void)) {
        getPaymentMethodTypeWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a single payment method type
     - GET /payment/types/{id}
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "supports_refunds" : false,
  "supports_rebill" : false,
  "invoice_processing_hours" : 7,
  "supports_capture" : false,
  "name" : "name",
  "id" : 2,
  "supports_partial" : false
}}]
     - parameter id: (path) ID of the payment method type being retrieved 
     - returns: RequestBuilder<PaymentMethodTypeResource> 
     */
    open class func getPaymentMethodTypeWithRequestBuilder(id: Int32) -> RequestBuilder<PaymentMethodTypeResource> {
        var path = "/payment/types/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PaymentMethodTypeResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all payment method types
     - parameter filterName: (query) Filter for payment method types whose name matches a given string (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPaymentMethodTypes(filterName: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: PageResourcePaymentMethodTypeResource?, _ error: ErrorResponse?) -> Void)) {
        getPaymentMethodTypesWithRequestBuilder(filterName: filterName, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all payment method types
     - GET /payment/types
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "number" : 0,
  "last" : true,
  "size" : 1,
  "total_elements" : 5,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  }, {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 5,
  "number_of_elements" : 6,
  "content" : [ {
    "supports_refunds" : false,
    "supports_rebill" : false,
    "invoice_processing_hours" : 7,
    "supports_capture" : false,
    "name" : "name",
    "id" : 2,
    "supports_partial" : false
  }, {
    "supports_refunds" : false,
    "supports_rebill" : false,
    "invoice_processing_hours" : 7,
    "supports_capture" : false,
    "name" : "name",
    "id" : 2,
    "supports_partial" : false
  } ],
  "first" : true
}}]
     - parameter filterName: (query) Filter for payment method types whose name matches a given string (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - returns: RequestBuilder<PageResourcePaymentMethodTypeResource> 
     */
    open class func getPaymentMethodTypesWithRequestBuilder(filterName: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourcePaymentMethodTypeResource> {
        let path = "/payment/types"
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter_name": filterName, 
            "size": size?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "order": order
        ])

        let requestBuilder: RequestBuilder<PageResourcePaymentMethodTypeResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter filterPaymentType
     */
    public enum FilterPaymentType_getPaymentMethods: String { 
        case card = "card"
        case bankAccount = "bank_account"
    }

    /**
     Get all payment methods for a user
     - parameter userId: (path) ID of the user for whom the payment methods are being retrieved 
     - parameter filterName: (query) Filter for payment methods whose name starts with a given string (optional)
     - parameter filterPaymentType: (query) Filter for payment methods with a specific payment type (optional)
     - parameter filterPaymentMethodTypeId: (query) Filter for payment methods with a specific payment method type by id (optional)
     - parameter filterPaymentMethodTypeName: (query) Filter for payment methods whose payment method type name starts with a given string (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPaymentMethods(userId: Int32, filterName: String? = nil, filterPaymentType: FilterPaymentType_getPaymentMethods? = nil, filterPaymentMethodTypeId: Int32? = nil, filterPaymentMethodTypeName: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: [PaymentMethodResource]?, _ error: ErrorResponse?) -> Void)) {
        getPaymentMethodsWithRequestBuilder(userId: userId, filterName: filterName, filterPaymentType: filterPaymentType, filterPaymentMethodTypeId: filterPaymentMethodTypeId, filterPaymentMethodTypeName: filterPaymentMethodTypeName, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all payment methods for a user
     - GET /users/{user_id}/payment-methods
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example=[ {
  "payment_method_type" : {
    "supports_refunds" : false,
    "supports_rebill" : false,
    "invoice_processing_hours" : 7,
    "supports_capture" : false,
    "name" : "name",
    "id" : 2,
    "supports_partial" : false
  },
  "last4" : "last4",
  "unique_key" : "unique_key",
  "verified" : true,
  "sort" : 9,
  "expiration_date" : 6,
  "token" : "token",
  "expiration_year" : 5,
  "default" : true,
  "payment_type" : "card",
  "user_id" : 2,
  "expiration_month" : 1,
  "name" : "name",
  "disabled" : false,
  "created_date" : 0,
  "id" : 5,
  "updated_date" : 3
}, {
  "payment_method_type" : {
    "supports_refunds" : false,
    "supports_rebill" : false,
    "invoice_processing_hours" : 7,
    "supports_capture" : false,
    "name" : "name",
    "id" : 2,
    "supports_partial" : false
  },
  "last4" : "last4",
  "unique_key" : "unique_key",
  "verified" : true,
  "sort" : 9,
  "expiration_date" : 6,
  "token" : "token",
  "expiration_year" : 5,
  "default" : true,
  "payment_type" : "card",
  "user_id" : 2,
  "expiration_month" : 1,
  "name" : "name",
  "disabled" : false,
  "created_date" : 0,
  "id" : 5,
  "updated_date" : 3
} ]}]
     - parameter userId: (path) ID of the user for whom the payment methods are being retrieved 
     - parameter filterName: (query) Filter for payment methods whose name starts with a given string (optional)
     - parameter filterPaymentType: (query) Filter for payment methods with a specific payment type (optional)
     - parameter filterPaymentMethodTypeId: (query) Filter for payment methods with a specific payment method type by id (optional)
     - parameter filterPaymentMethodTypeName: (query) Filter for payment methods whose payment method type name starts with a given string (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - returns: RequestBuilder<[PaymentMethodResource]> 
     */
    open class func getPaymentMethodsWithRequestBuilder(userId: Int32, filterName: String? = nil, filterPaymentType: FilterPaymentType_getPaymentMethods? = nil, filterPaymentMethodTypeId: Int32? = nil, filterPaymentMethodTypeName: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<[PaymentMethodResource]> {
        var path = "/users/{user_id}/payment-methods"
        path = path.replacingOccurrences(of: "{user_id}", with: "\(userId)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter_name": filterName, 
            "filter_payment_type": filterPaymentType?.rawValue, 
            "filter_payment_method_type_id": filterPaymentMethodTypeId?.encodeToJSON(), 
            "filter_payment_method_type_name": filterPaymentMethodTypeName, 
            "size": size?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "order": order
        ])

        let requestBuilder: RequestBuilder<[PaymentMethodResource]>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Authorize payment of an invoice for later capture
     - parameter request: (body) Payment authorization request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func paymentAuthorization(request: PaymentAuthorizationResource? = nil, completion: @escaping ((_ data: PaymentAuthorizationResource?, _ error: ErrorResponse?) -> Void)) {
        paymentAuthorizationWithRequestBuilder(request: request).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Authorize payment of an invoice for later capture
     - POST /payment/authorizations
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "payment_type" : {
    "name" : "name",
    "id" : 5
  },
  "created" : 0,
  "captured" : false,
  "details" : "{}",
  "id" : 6,
  "invoice" : 1
}}]
     - parameter request: (body) Payment authorization request (optional)
     - returns: RequestBuilder<PaymentAuthorizationResource> 
     */
    open class func paymentAuthorizationWithRequestBuilder(request: PaymentAuthorizationResource? = nil) -> RequestBuilder<PaymentAuthorizationResource> {
        let path = "/payment/authorizations"
        let URLString = JSAPIAPI.basePath + path
        let parameters = request?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PaymentAuthorizationResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Capture an existing invoice payment authorization
     - parameter id: (path) ID of the payment authorization to capture 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func paymentCapture(id: Int32, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        paymentCaptureWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Capture an existing invoice payment authorization
     - POST /payment/authorizations/{id}/capture
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - parameter id: (path) ID of the payment authorization to capture 
     - returns: RequestBuilder<Void> 
     */
    open class func paymentCaptureWithRequestBuilder(id: Int32) -> RequestBuilder<Void> {
        var path = "/payment/authorizations/{id}/capture"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update an existing payment method for a user
     - parameter userId: (path) ID of the user for whom the payment method is being updated 
     - parameter id: (path) ID of the payment method being updated 
     - parameter paymentMethod: (body) The updated payment method data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updatePaymentMethod(userId: Int32, id: Int32, paymentMethod: PaymentMethodResource? = nil, completion: @escaping ((_ data: PaymentMethodResource?, _ error: ErrorResponse?) -> Void)) {
        updatePaymentMethodWithRequestBuilder(userId: userId, id: id, paymentMethod: paymentMethod).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update an existing payment method for a user
     - PUT /users/{user_id}/payment-methods/{id}
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "payment_method_type" : {
    "supports_refunds" : false,
    "supports_rebill" : false,
    "invoice_processing_hours" : 7,
    "supports_capture" : false,
    "name" : "name",
    "id" : 2,
    "supports_partial" : false
  },
  "last4" : "last4",
  "unique_key" : "unique_key",
  "verified" : true,
  "sort" : 9,
  "expiration_date" : 6,
  "token" : "token",
  "expiration_year" : 5,
  "default" : true,
  "payment_type" : "card",
  "user_id" : 2,
  "expiration_month" : 1,
  "name" : "name",
  "disabled" : false,
  "created_date" : 0,
  "id" : 5,
  "updated_date" : 3
}}]
     - parameter userId: (path) ID of the user for whom the payment method is being updated 
     - parameter id: (path) ID of the payment method being updated 
     - parameter paymentMethod: (body) The updated payment method data (optional)
     - returns: RequestBuilder<PaymentMethodResource> 
     */
    open class func updatePaymentMethodWithRequestBuilder(userId: Int32, id: Int32, paymentMethod: PaymentMethodResource? = nil) -> RequestBuilder<PaymentMethodResource> {
        var path = "/users/{user_id}/payment-methods/{id}"
        path = path.replacingOccurrences(of: "{user_id}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = paymentMethod?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PaymentMethodResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
