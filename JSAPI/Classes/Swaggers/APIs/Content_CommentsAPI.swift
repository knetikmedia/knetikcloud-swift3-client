//
// Content_CommentsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class Content_CommentsAPI: APIBase {
    /**
     Add a new comment
     - parameter commentResource: (body) The comment to be added (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addComment(commentResource: CommentResource? = nil, completion: @escaping ((_ data: CommentResource?, _ error: ErrorResponse?) -> Void)) {
        addCommentWithRequestBuilder(commentResource: commentResource).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add a new comment
     - POST /comments
     - <b>Permissions Needed:</b> COMMENTS_USER or COMMENTS_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "summary" : "summary",
  "context" : "context",
  "context_id" : 0,
  "created_date" : 6,
  "id" : 1,
  "updated_date" : 5,
  "user" : {
    "avatar_url" : "avatar_url",
    "id" : 9,
    "display_name" : "display_name",
    "username" : "username"
  },
  "content" : "content"
}}]
     - parameter commentResource: (body) The comment to be added (optional)
     - returns: RequestBuilder<CommentResource> 
     */
    open class func addCommentWithRequestBuilder(commentResource: CommentResource? = nil) -> RequestBuilder<CommentResource> {
        let path = "/comments"
        let URLString = JSAPIAPI.basePath + path
        let parameters = commentResource?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CommentResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a comment
     - parameter id: (path) The comment id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteComment(id: Int64, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        deleteCommentWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Delete a comment
     - DELETE /comments/{id}
     - <b>Permissions Needed:</b> COMMENTS_USER or COMMENTS_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - parameter id: (path) The comment id 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteCommentWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/comments/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Return a comment
     - parameter id: (path) The comment id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getComment(id: Int64, completion: @escaping ((_ data: CommentResource?, _ error: ErrorResponse?) -> Void)) {
        getCommentWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Return a comment
     - GET /comments/{id}
     - <b>Permissions Needed:</b> ANY
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "summary" : "summary",
  "context" : "context",
  "context_id" : 0,
  "created_date" : 6,
  "id" : 1,
  "updated_date" : 5,
  "user" : {
    "avatar_url" : "avatar_url",
    "id" : 9,
    "display_name" : "display_name",
    "username" : "username"
  },
  "content" : "content"
}}]
     - parameter id: (path) The comment id 
     - returns: RequestBuilder<CommentResource> 
     */
    open class func getCommentWithRequestBuilder(id: Int64) -> RequestBuilder<CommentResource> {
        var path = "/comments/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CommentResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns a page of comments
     - parameter context: (query) Get comments by context type 
     - parameter contextId: (query) Get comments by context id 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getComments(context: String, contextId: Int32, size: Int32? = nil, page: Int32? = nil, completion: @escaping ((_ data: PageResourceCommentResource?, _ error: ErrorResponse?) -> Void)) {
        getCommentsWithRequestBuilder(context: context, contextId: contextId, size: size, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns a page of comments
     - GET /comments
     - <b>Permissions Needed:</b> ANY
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "number" : 5,
  "last" : true,
  "size" : 7,
  "total_elements" : 9,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  }, {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 3,
  "number_of_elements" : 2,
  "content" : [ {
    "summary" : "summary",
    "context" : "context",
    "context_id" : 0,
    "created_date" : 6,
    "id" : 1,
    "updated_date" : 5,
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "content" : "content"
  }, {
    "summary" : "summary",
    "context" : "context",
    "context_id" : 0,
    "created_date" : 6,
    "id" : 1,
    "updated_date" : 5,
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "content" : "content"
  } ],
  "first" : true
}}]
     - parameter context: (query) Get comments by context type 
     - parameter contextId: (query) Get comments by context id 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - returns: RequestBuilder<PageResourceCommentResource> 
     */
    open class func getCommentsWithRequestBuilder(context: String, contextId: Int32, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<PageResourceCommentResource> {
        let path = "/comments"
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "context": context, 
            "context_id": contextId.encodeToJSON(), 
            "size": size?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<PageResourceCommentResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update a comment
     - parameter id: (path) The comment id 
     - parameter content: (body) The comment content (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateComment(id: Int64, content: StringWrapper? = nil, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        updateCommentWithRequestBuilder(id: id, content: content).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Update a comment
     - PUT /comments/{id}/content
     - <b>Permissions Needed:</b> COMMENTS_USER or COMMENTS_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - parameter id: (path) The comment id 
     - parameter content: (body) The comment content (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func updateCommentWithRequestBuilder(id: Int64, content: StringWrapper? = nil) -> RequestBuilder<Void> {
        var path = "/comments/{id}/content"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = content?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
