//
// UsersFriendshipsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class UsersFriendshipsAPI: APIBase {
    /**
     Add a friend
     - parameter userId: (path) The id of the user or &#39;me&#39; if logged in 
     - parameter id: (path) The id of the user to befriend 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addFriend(userId: String, id: Int32, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        addFriendWithRequestBuilder(userId: userId, id: id).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Add a friend
     - POST /users/{user_id}/friends/{id}
     - As a user, either creates or confirm a pending request. As an admin, call this endpoint twice while inverting the IDs to create a confirmed friendship. <br><br><b>Permissions Needed:</b> FRIENDSHIPS_ADMIN or (FRIENDSHIPS_USER and owner)
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - parameter userId: (path) The id of the user or &#39;me&#39; if logged in 
     - parameter id: (path) The id of the user to befriend 
     - returns: RequestBuilder<Void> 
     */
    open class func addFriendWithRequestBuilder(userId: String, id: Int32) -> RequestBuilder<Void> {
        var path = "/users/{user_id}/friends/{id}"
        path = path.replacingOccurrences(of: "{user_id}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get friends list
     - parameter userId: (path) The id of the user or &#39;me&#39; 
     - parameter filterUsername: (query) Filter for friends with the given username (optional)
     - parameter filterUserId: (query) Filter for friends by user id (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFriends(userId: String, filterUsername: String? = nil, filterUserId: Int32? = nil, size: Int32? = nil, page: Int32? = nil, completion: @escaping ((_ data: PageResourceSimpleUserResource?, _ error: ErrorResponse?) -> Void)) {
        getFriendsWithRequestBuilder(userId: userId, filterUsername: filterUsername, filterUserId: filterUserId, size: size, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get friends list
     - GET /users/{user_id}/friends
     - <b>Permissions Needed:</b> FRIENDSHIPS_ADMIN or (FRIENDSHIPS_USER and owner)
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "number" : 0,
  "last" : true,
  "size" : 1,
  "total_elements" : 5,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  }, {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 5,
  "number_of_elements" : 6,
  "content" : [ {
    "avatar_url" : "avatar_url",
    "id" : 9,
    "display_name" : "display_name",
    "username" : "username"
  }, {
    "avatar_url" : "avatar_url",
    "id" : 9,
    "display_name" : "display_name",
    "username" : "username"
  } ],
  "first" : true
}}]
     - parameter userId: (path) The id of the user or &#39;me&#39; 
     - parameter filterUsername: (query) Filter for friends with the given username (optional)
     - parameter filterUserId: (query) Filter for friends by user id (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - returns: RequestBuilder<PageResourceSimpleUserResource> 
     */
    open class func getFriendsWithRequestBuilder(userId: String, filterUsername: String? = nil, filterUserId: Int32? = nil, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<PageResourceSimpleUserResource> {
        var path = "/users/{user_id}/friends"
        path = path.replacingOccurrences(of: "{user_id}", with: "\(userId)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter_username": filterUsername, 
            "filter_user_id": filterUserId?.encodeToJSON(), 
            "size": size?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<PageResourceSimpleUserResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns the invite token
     - parameter userId: (path) The id of the user or &#39;me&#39; if logged in 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInviteToken(userId: String, completion: @escaping ((_ data: String?, _ error: ErrorResponse?) -> Void)) {
        getInviteTokenWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns the invite token
     - GET /users/{user_id}/invite-token
     - This is a unique invite token that allows direct connection to the request user.  Exposing that token presents privacy issues if the token is leaked. Use friend request. <br><br><b>Permissions Needed:</b> FRIENDSHIPS_ADMIN or (FRIENDSHIPS_USER and owner)flow instead if confirmation is required
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example=""}]
     - parameter userId: (path) The id of the user or &#39;me&#39; if logged in 
     - returns: RequestBuilder<String> 
     */
    open class func getInviteTokenWithRequestBuilder(userId: String) -> RequestBuilder<String> {
        var path = "/users/{user_id}/invite-token"
        path = path.replacingOccurrences(of: "{user_id}", with: "\(userId)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get pending invites
     - parameter userId: (path) The id of the user or &#39;me&#39; 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInvites(userId: String, size: Int32? = nil, page: Int32? = nil, completion: @escaping ((_ data: PageResourceSimpleUserResource?, _ error: ErrorResponse?) -> Void)) {
        getInvitesWithRequestBuilder(userId: userId, size: size, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get pending invites
     - GET /users/{user_id}/invites
     - Invites that the specified user received. <br><br><b>Permissions Needed:</b> FRIENDSHIPS_ADMIN or (FRIENDSHIPS_USER and owner)
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "number" : 0,
  "last" : true,
  "size" : 1,
  "total_elements" : 5,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  }, {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 5,
  "number_of_elements" : 6,
  "content" : [ {
    "avatar_url" : "avatar_url",
    "id" : 9,
    "display_name" : "display_name",
    "username" : "username"
  }, {
    "avatar_url" : "avatar_url",
    "id" : 9,
    "display_name" : "display_name",
    "username" : "username"
  } ],
  "first" : true
}}]
     - parameter userId: (path) The id of the user or &#39;me&#39; 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - returns: RequestBuilder<PageResourceSimpleUserResource> 
     */
    open class func getInvitesWithRequestBuilder(userId: String, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<PageResourceSimpleUserResource> {
        var path = "/users/{user_id}/invites"
        path = path.replacingOccurrences(of: "{user_id}", with: "\(userId)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "size": size?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<PageResourceSimpleUserResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Redeem friendship token
     - parameter userId: (path) The id of the user or &#39;me&#39; if logged in 
     - parameter token: (body) The invite token (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func redeemFriendshipToken(userId: String, token: StringWrapper? = nil, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        redeemFriendshipTokenWithRequestBuilder(userId: userId, token: token).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Redeem friendship token
     - POST /users/{user_id}/friends/tokens
     - Immediately connects the requested user with the user mapped by the provided invite token. <br><br><b>Permissions Needed:</b> FRIENDSHIPS_ADMIN or (FRIENDSHIPS_USER and owner)
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - parameter userId: (path) The id of the user or &#39;me&#39; if logged in 
     - parameter token: (body) The invite token (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func redeemFriendshipTokenWithRequestBuilder(userId: String, token: StringWrapper? = nil) -> RequestBuilder<Void> {
        var path = "/users/{user_id}/friends/tokens"
        path = path.replacingOccurrences(of: "{user_id}", with: "\(userId)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = token?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Remove or decline a friend
     - parameter userId: (path) The id of the user or &#39;me&#39; if logged in 
     - parameter id: (path) The id of the user to befriend 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeOrDeclineFriend(userId: String, id: Int32, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        removeOrDeclineFriendWithRequestBuilder(userId: userId, id: id).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Remove or decline a friend
     - DELETE /users/{user_id}/friends/{id}
     - <b>Permissions Needed:</b> FRIENDSHIPS_ADMIN or (FRIENDSHIPS_USER and owner)
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - parameter userId: (path) The id of the user or &#39;me&#39; if logged in 
     - parameter id: (path) The id of the user to befriend 
     - returns: RequestBuilder<Void> 
     */
    open class func removeOrDeclineFriendWithRequestBuilder(userId: String, id: Int32) -> RequestBuilder<Void> {
        var path = "/users/{user_id}/friends/{id}"
        path = path.replacingOccurrences(of: "{user_id}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
