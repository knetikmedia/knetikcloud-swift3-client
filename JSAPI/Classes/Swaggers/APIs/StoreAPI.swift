//
// StoreAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class StoreAPI: APIBase {
    /**
     Create an item template
     
     - parameter itemTemplateResource: (body) The new item template (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createItemTemplate(itemTemplateResource: StoreItemTemplateResource? = nil, completion: @escaping ((_ data: StoreItemTemplateResource?,_ error: Error?) -> Void)) {
        createItemTemplateWithRequestBuilder(itemTemplateResource: itemTemplateResource).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create an item template
     - POST /store/items/templates
     - Item Templates define a type of item and the properties they have.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "behaviors" : [ {
    "behavior" : {
      "type_hint" : "aeiou",
      "description" : "aeiou"
    },
    "modifiable" : false,
    "required" : false
  } ],
  "name" : "aeiou",
  "sku_template" : {
    "name" : "aeiou",
    "created_date" : 9,
    "id" : "aeiou",
    "updated_date" : 7,
    "properties" : [ "" ]
  },
  "created_date" : 1,
  "id" : "aeiou",
  "updated_date" : 7,
  "properties" : [ {
    "name" : "aeiou",
    "type" : "aeiou",
    "required" : false
  } ]
}}]
     
     - parameter itemTemplateResource: (body) The new item template (optional)

     - returns: RequestBuilder<StoreItemTemplateResource> 
     */
    open class func createItemTemplateWithRequestBuilder(itemTemplateResource: StoreItemTemplateResource? = nil) -> RequestBuilder<StoreItemTemplateResource> {
        let path = "/store/items/templates"
        let URLString = JSAPIAPI.basePath + path
        let parameters = itemTemplateResource?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<StoreItemTemplateResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a store item
     
     - parameter cascade: (query) Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (optional, default to false)
     - parameter storeItem: (body) The store item object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createStoreItem(cascade: Bool? = nil, storeItem: StoreItem? = nil, completion: @escaping ((_ data: StoreItem?,_ error: Error?) -> Void)) {
        createStoreItemWithRequestBuilder(cascade: cascade, storeItem: storeItem).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create a store item
     - POST /store/items
     - SKUs have to be unique in the entire store. If a duplicate SKU is found, a 400 error is generated and the response will have a \"parameters\" field that is a list of duplicates. A duplicate is an object like {item_id, offending_sku_list}. Ex:<br /> {..., parameters: [[{item: 1, skus: [\"SKU-1\"]}]]}<br /> If an item is brand new and has duplicate SKUs within itself, the item ID will be 0.  Item subclasses are not allowed here, you will have to use their respective endpoints.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "geo_policy_type" : "whitelist",
  "template" : "aeiou",
  "short_description" : "aeiou",
  "geo_country_list" : [ "aeiou" ],
  "skus" : [ {
    "sale_id" : 8,
    "original_price" : 2.0900701957911694,
    "description" : "aeiou",
    "stop_date" : 3,
    "published" : false,
    "inventory" : 0,
    "min_inventory_threshold" : 0,
    "currency_code" : "aeiou",
    "price" : 7.547984001491468,
    "additional_properties" : {
      "key" : ""
    },
    "sale_name" : "aeiou",
    "sku" : "aeiou",
    "start_date" : 7
  } ],
  "store_end" : 4,
  "type_hint" : "aeiou",
  "behaviors" : [ {
    "type_hint" : "aeiou",
    "description" : "aeiou"
  } ],
  "unique_key" : "aeiou",
  "displayable" : false,
  "long_description" : "aeiou",
  "sort" : 1,
  "tags" : [ "aeiou" ],
  "shipping_tier" : 4,
  "store_start" : 3,
  "vendor_id" : 9,
  "name" : "aeiou",
  "additional_properties" : {
    "key" : {
      "type" : "aeiou"
    }
  },
  "created_date" : 3,
  "id" : 1,
  "updated_date" : 5,
  "category" : "aeiou"
}}]
     
     - parameter cascade: (query) Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (optional, default to false)
     - parameter storeItem: (body) The store item object (optional)

     - returns: RequestBuilder<StoreItem> 
     */
    open class func createStoreItemWithRequestBuilder(cascade: Bool? = nil, storeItem: StoreItem? = nil) -> RequestBuilder<StoreItem> {
        let path = "/store/items"
        let URLString = JSAPIAPI.basePath + path
        let parameters = storeItem?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "cascade": cascade
        ])
        

        let requestBuilder: RequestBuilder<StoreItem>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete an item template
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) force deleting the template if it&#39;s attached to other objects, cascade &#x3D; detach (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteItemTemplate(id: String, cascade: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteItemTemplateWithRequestBuilder(id: id, cascade: cascade).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete an item template
     - DELETE /store/items/templates/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) force deleting the template if it&#39;s attached to other objects, cascade &#x3D; detach (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteItemTemplateWithRequestBuilder(id: String, cascade: String? = nil) -> RequestBuilder<Void> {
        var path = "/store/items/templates/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "cascade": cascade
        ])
        

        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a store item
     
     - parameter id: (path) The id of the item 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteStoreItem(id: Int32, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteStoreItemWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete a store item
     - DELETE /store/items/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The id of the item 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteStoreItemWithRequestBuilder(id: Int32) -> RequestBuilder<Void> {
        var path = "/store/items/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List available item behaviors
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBehaviors(completion: @escaping ((_ data: [BehaviorDefinitionResource]?,_ error: Error?) -> Void)) {
        getBehaviorsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List available item behaviors
     - GET /store/items/behaviors
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example=[ {
  "prerequisite_behaviors" : [ {
    "type_hint" : "aeiou",
    "description" : "aeiou"
  } ],
  "type_hint" : "aeiou",
  "description" : "aeiou",
  "properties" : [ {
    "name" : "aeiou",
    "type" : "aeiou",
    "required" : false
  } ]
} ]}]

     - returns: RequestBuilder<[BehaviorDefinitionResource]> 
     */
    open class func getBehaviorsWithRequestBuilder() -> RequestBuilder<[BehaviorDefinitionResource]> {
        let path = "/store/items/behaviors"
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[BehaviorDefinitionResource]>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a single item template
     
     - parameter id: (path) The id of the template 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getItemTemplate(id: String, completion: @escaping ((_ data: StoreItemTemplateResource?,_ error: Error?) -> Void)) {
        getItemTemplateWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get a single item template
     - GET /store/items/templates/{id}
     - Item Templates define a type of item and the properties they have.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "behaviors" : [ {
    "behavior" : {
      "type_hint" : "aeiou",
      "description" : "aeiou"
    },
    "modifiable" : false,
    "required" : false
  } ],
  "name" : "aeiou",
  "sku_template" : {
    "name" : "aeiou",
    "created_date" : 3,
    "id" : "aeiou",
    "updated_date" : 6,
    "properties" : [ "" ]
  },
  "created_date" : 9,
  "id" : "aeiou",
  "updated_date" : 6,
  "properties" : [ {
    "name" : "aeiou",
    "type" : "aeiou",
    "required" : false
  } ]
}}]
     
     - parameter id: (path) The id of the template 

     - returns: RequestBuilder<StoreItemTemplateResource> 
     */
    open class func getItemTemplateWithRequestBuilder(id: String) -> RequestBuilder<StoreItemTemplateResource> {
        var path = "/store/items/templates/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<StoreItemTemplateResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List and search item templates
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getItemTemplates(size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: PageResourceStoreItemTemplateResource?,_ error: Error?) -> Void)) {
        getItemTemplatesWithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List and search item templates
     - GET /store/items/templates
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 2,
  "last" : true,
  "size" : 5,
  "total_elements" : 7,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 6,
  "number_of_elements" : 7,
  "content" : [ {
    "behaviors" : [ {
      "behavior" : {
        "type_hint" : "aeiou",
        "description" : "aeiou"
      },
      "modifiable" : false,
      "required" : false
    } ],
    "name" : "aeiou",
    "sku_template" : {
      "name" : "aeiou",
      "created_date" : 2,
      "id" : "aeiou",
      "updated_date" : 4,
      "properties" : [ "" ]
    },
    "created_date" : 1,
    "id" : "aeiou",
    "updated_date" : 5,
    "properties" : [ {
      "name" : "aeiou",
      "type" : "aeiou",
      "required" : false
    } ]
  } ],
  "first" : true
}}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)

     - returns: RequestBuilder<PageResourceStoreItemTemplateResource> 
     */
    open class func getItemTemplatesWithRequestBuilder(size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceStoreItemTemplateResource> {
        let path = "/store/items/templates"
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "size": size?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "order": order
        ])
        

        let requestBuilder: RequestBuilder<PageResourceStoreItemTemplateResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a listing of store items
     
     - parameter limit: (query) The amount of items returned (optional)
     - parameter page: (query) The page of the request (optional)
     - parameter useCatalog: (query) Whether to remove items that are not intended for display or not in date (optional)
     - parameter ignoreLocation: (query) Whether to ignore country restrictions based on the caller&#39;s location (optional)
     - parameter inStockOnly: (query) Whether only in-stock items should be returned.  Default value is false (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getStore(limit: Int32? = nil, page: Int32? = nil, useCatalog: Bool? = nil, ignoreLocation: Bool? = nil, inStockOnly: Bool? = nil, completion: @escaping ((_ data: PageResourceStoreItem?,_ error: Error?) -> Void)) {
        getStoreWithRequestBuilder(limit: limit, page: page, useCatalog: useCatalog, ignoreLocation: ignoreLocation, inStockOnly: inStockOnly).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get a listing of store items
     - GET /store
     - The exact structure of each items may differ to include fields specific to the type. The same is true for behaviors.
     - examples: [{contentType=application/json, example={
  "number" : 3,
  "last" : true,
  "size" : 2,
  "total_elements" : 2,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 3,
  "number_of_elements" : 2,
  "content" : [ {
    "geo_policy_type" : "whitelist",
    "template" : "aeiou",
    "short_description" : "aeiou",
    "geo_country_list" : [ "aeiou" ],
    "skus" : [ {
      "sale_id" : 4,
      "original_price" : 7.309491876114568,
      "description" : "aeiou",
      "stop_date" : 3,
      "published" : false,
      "inventory" : 6,
      "min_inventory_threshold" : 4,
      "currency_code" : "aeiou",
      "price" : 7.1162322165723015,
      "additional_properties" : {
        "key" : ""
      },
      "sale_name" : "aeiou",
      "sku" : "aeiou",
      "start_date" : 3
    } ],
    "store_end" : 6,
    "type_hint" : "aeiou",
    "behaviors" : [ {
      "type_hint" : "aeiou",
      "description" : "aeiou"
    } ],
    "unique_key" : "aeiou",
    "displayable" : false,
    "long_description" : "aeiou",
    "sort" : 9,
    "tags" : [ "aeiou" ],
    "shipping_tier" : 8,
    "store_start" : 5,
    "vendor_id" : 0,
    "name" : "aeiou",
    "additional_properties" : {
      "key" : {
        "type" : "aeiou"
      }
    },
    "created_date" : 8,
    "id" : 8,
    "updated_date" : 0,
    "category" : "aeiou"
  } ],
  "first" : true
}}]
     
     - parameter limit: (query) The amount of items returned (optional)
     - parameter page: (query) The page of the request (optional)
     - parameter useCatalog: (query) Whether to remove items that are not intended for display or not in date (optional)
     - parameter ignoreLocation: (query) Whether to ignore country restrictions based on the caller&#39;s location (optional)
     - parameter inStockOnly: (query) Whether only in-stock items should be returned.  Default value is false (optional, default to false)

     - returns: RequestBuilder<PageResourceStoreItem> 
     */
    open class func getStoreWithRequestBuilder(limit: Int32? = nil, page: Int32? = nil, useCatalog: Bool? = nil, ignoreLocation: Bool? = nil, inStockOnly: Bool? = nil) -> RequestBuilder<PageResourceStoreItem> {
        let path = "/store"
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "limit": limit?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "use_catalog": useCatalog, 
            "ignore_location": ignoreLocation, 
            "in_stock_only": inStockOnly
        ])
        

        let requestBuilder: RequestBuilder<PageResourceStoreItem>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a single store item
     
     - parameter id: (path) The id of the item 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getStoreItem(id: Int32, completion: @escaping ((_ data: StoreItem?,_ error: Error?) -> Void)) {
        getStoreItemWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get a single store item
     - GET /store/items/{id}
     - examples: [{contentType=application/json, example={
  "geo_policy_type" : "whitelist",
  "template" : "aeiou",
  "short_description" : "aeiou",
  "geo_country_list" : [ "aeiou" ],
  "skus" : [ {
    "sale_id" : 0,
    "original_price" : 0.591191634188577,
    "description" : "aeiou",
    "stop_date" : 9,
    "published" : false,
    "inventory" : 4,
    "min_inventory_threshold" : 3,
    "currency_code" : "aeiou",
    "price" : 2.847714223506339,
    "additional_properties" : {
      "key" : ""
    },
    "sale_name" : "aeiou",
    "sku" : "aeiou",
    "start_date" : 6
  } ],
  "store_end" : 4,
  "type_hint" : "aeiou",
  "behaviors" : [ {
    "type_hint" : "aeiou",
    "description" : "aeiou"
  } ],
  "unique_key" : "aeiou",
  "displayable" : false,
  "long_description" : "aeiou",
  "sort" : 8,
  "tags" : [ "aeiou" ],
  "shipping_tier" : 9,
  "store_start" : 7,
  "vendor_id" : 7,
  "name" : "aeiou",
  "additional_properties" : {
    "key" : {
      "type" : "aeiou"
    }
  },
  "created_date" : 5,
  "id" : 5,
  "updated_date" : 0,
  "category" : "aeiou"
}}]
     
     - parameter id: (path) The id of the item 

     - returns: RequestBuilder<StoreItem> 
     */
    open class func getStoreItemWithRequestBuilder(id: Int32) -> RequestBuilder<StoreItem> {
        var path = "/store/items/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<StoreItem>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List and search store items
     
     - parameter filterNameSearch: (query) Filter for items whose name starts with a given string. (optional)
     - parameter filterUniqueKey: (query) Filter for items whose unique_key is a given string. (optional)
     - parameter filterPublished: (query) Filter for skus that have been published. (optional)
     - parameter filterDisplayable: (query) Filter for items that are displayable. (optional)
     - parameter filterStart: (query) A comma separated string without spaces.  First value is the operator to search on, second value is the store start date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ). (optional)
     - parameter filterEnd: (query) A comma separated string without spaces.  First value is the operator to search on, second value is the store end date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ). (optional)
     - parameter filterStartDate: (query) A comma separated string without spaces.  First value is the operator to search on, second value is the sku start date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ). (optional)
     - parameter filterStopDate: (query) A comma separated string without spaces.  First value is the operator to search on, second value is the sku end date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ). (optional)
     - parameter filterSku: (query) Filter for skus whose name starts with a given string. (optional)
     - parameter filterPrice: (query) A colon separated string without spaces.  First value is the operator to search on, second value is the price of a sku.  Allowed operators: (LT, GT, LTE, GTE, EQ). (optional)
     - parameter filterTag: (query) A comma separated list without spaces of the names of tags. Will only return items with at least one of the tags. (optional)
     - parameter filterItemsByType: (query) Filter for item type based on its type hint. (optional)
     - parameter filterBundledSkus: (query) Filter for skus inside bundles whose name starts with a given string.  Used only when type hint is &#39;bundle_item&#39; (optional)
     - parameter filterVendor: (query) Filter for items from a given vendor, by id. (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getStoreItems(filterNameSearch: String? = nil, filterUniqueKey: String? = nil, filterPublished: Bool? = nil, filterDisplayable: Bool? = nil, filterStart: String? = nil, filterEnd: String? = nil, filterStartDate: String? = nil, filterStopDate: String? = nil, filterSku: String? = nil, filterPrice: String? = nil, filterTag: String? = nil, filterItemsByType: String? = nil, filterBundledSkus: String? = nil, filterVendor: Int32? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: PageResourceStoreItem?,_ error: Error?) -> Void)) {
        getStoreItemsWithRequestBuilder(filterNameSearch: filterNameSearch, filterUniqueKey: filterUniqueKey, filterPublished: filterPublished, filterDisplayable: filterDisplayable, filterStart: filterStart, filterEnd: filterEnd, filterStartDate: filterStartDate, filterStopDate: filterStopDate, filterSku: filterSku, filterPrice: filterPrice, filterTag: filterTag, filterItemsByType: filterItemsByType, filterBundledSkus: filterBundledSkus, filterVendor: filterVendor, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List and search store items
     - GET /store/items
     - examples: [{contentType=application/json, example={
  "number" : 1,
  "last" : true,
  "size" : 0,
  "total_elements" : 4,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 6,
  "number_of_elements" : 3,
  "content" : [ {
    "geo_policy_type" : "whitelist",
    "template" : "aeiou",
    "short_description" : "aeiou",
    "geo_country_list" : [ "aeiou" ],
    "skus" : [ {
      "sale_id" : 6,
      "original_price" : 1.8148185515044735,
      "description" : "aeiou",
      "stop_date" : 3,
      "published" : false,
      "inventory" : 6,
      "min_inventory_threshold" : 2,
      "currency_code" : "aeiou",
      "price" : 3.4270531156657826,
      "additional_properties" : {
        "key" : ""
      },
      "sale_name" : "aeiou",
      "sku" : "aeiou",
      "start_date" : 6
    } ],
    "store_end" : 2,
    "type_hint" : "aeiou",
    "behaviors" : [ {
      "type_hint" : "aeiou",
      "description" : "aeiou"
    } ],
    "unique_key" : "aeiou",
    "displayable" : false,
    "long_description" : "aeiou",
    "sort" : 9,
    "tags" : [ "aeiou" ],
    "shipping_tier" : 6,
    "store_start" : 2,
    "vendor_id" : 7,
    "name" : "aeiou",
    "additional_properties" : {
      "key" : {
        "type" : "aeiou"
      }
    },
    "created_date" : 3,
    "id" : 5,
    "updated_date" : 4,
    "category" : "aeiou"
  } ],
  "first" : true
}}]
     
     - parameter filterNameSearch: (query) Filter for items whose name starts with a given string. (optional)
     - parameter filterUniqueKey: (query) Filter for items whose unique_key is a given string. (optional)
     - parameter filterPublished: (query) Filter for skus that have been published. (optional)
     - parameter filterDisplayable: (query) Filter for items that are displayable. (optional)
     - parameter filterStart: (query) A comma separated string without spaces.  First value is the operator to search on, second value is the store start date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ). (optional)
     - parameter filterEnd: (query) A comma separated string without spaces.  First value is the operator to search on, second value is the store end date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ). (optional)
     - parameter filterStartDate: (query) A comma separated string without spaces.  First value is the operator to search on, second value is the sku start date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ). (optional)
     - parameter filterStopDate: (query) A comma separated string without spaces.  First value is the operator to search on, second value is the sku end date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ). (optional)
     - parameter filterSku: (query) Filter for skus whose name starts with a given string. (optional)
     - parameter filterPrice: (query) A colon separated string without spaces.  First value is the operator to search on, second value is the price of a sku.  Allowed operators: (LT, GT, LTE, GTE, EQ). (optional)
     - parameter filterTag: (query) A comma separated list without spaces of the names of tags. Will only return items with at least one of the tags. (optional)
     - parameter filterItemsByType: (query) Filter for item type based on its type hint. (optional)
     - parameter filterBundledSkus: (query) Filter for skus inside bundles whose name starts with a given string.  Used only when type hint is &#39;bundle_item&#39; (optional)
     - parameter filterVendor: (query) Filter for items from a given vendor, by id. (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)

     - returns: RequestBuilder<PageResourceStoreItem> 
     */
    open class func getStoreItemsWithRequestBuilder(filterNameSearch: String? = nil, filterUniqueKey: String? = nil, filterPublished: Bool? = nil, filterDisplayable: Bool? = nil, filterStart: String? = nil, filterEnd: String? = nil, filterStartDate: String? = nil, filterStopDate: String? = nil, filterSku: String? = nil, filterPrice: String? = nil, filterTag: String? = nil, filterItemsByType: String? = nil, filterBundledSkus: String? = nil, filterVendor: Int32? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceStoreItem> {
        let path = "/store/items"
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter_name_search": filterNameSearch, 
            "filter_unique_key": filterUniqueKey, 
            "filter_published": filterPublished, 
            "filter_displayable": filterDisplayable, 
            "filter_start": filterStart, 
            "filter_end": filterEnd, 
            "filter_start_date": filterStartDate, 
            "filter_stop_date": filterStopDate, 
            "filter_sku": filterSku, 
            "filter_price": filterPrice, 
            "filter_tag": filterTag, 
            "filter_items_by_type": filterItemsByType, 
            "filter_bundled_skus": filterBundledSkus, 
            "filter_vendor": filterVendor?.encodeToJSON(), 
            "size": size?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "order": order
        ])
        

        let requestBuilder: RequestBuilder<PageResourceStoreItem>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update an item template
     
     - parameter id: (path) The id of the template 
     - parameter itemTemplateResource: (body) The item template resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateItemTemplate(id: String, itemTemplateResource: StoreItemTemplateResource? = nil, completion: @escaping ((_ data: StoreItemTemplateResource?,_ error: Error?) -> Void)) {
        updateItemTemplateWithRequestBuilder(id: id, itemTemplateResource: itemTemplateResource).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Update an item template
     - PUT /store/items/templates/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "behaviors" : [ {
    "behavior" : {
      "type_hint" : "aeiou",
      "description" : "aeiou"
    },
    "modifiable" : false,
    "required" : false
  } ],
  "name" : "aeiou",
  "sku_template" : {
    "name" : "aeiou",
    "created_date" : 2,
    "id" : "aeiou",
    "updated_date" : 4,
    "properties" : [ "" ]
  },
  "created_date" : 1,
  "id" : "aeiou",
  "updated_date" : 3,
  "properties" : [ {
    "name" : "aeiou",
    "type" : "aeiou",
    "required" : false
  } ]
}}]
     
     - parameter id: (path) The id of the template 
     - parameter itemTemplateResource: (body) The item template resource object (optional)

     - returns: RequestBuilder<StoreItemTemplateResource> 
     */
    open class func updateItemTemplateWithRequestBuilder(id: String, itemTemplateResource: StoreItemTemplateResource? = nil) -> RequestBuilder<StoreItemTemplateResource> {
        var path = "/store/items/templates/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = itemTemplateResource?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<StoreItemTemplateResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a store item
     
     - parameter id: (path) The id of the item 
     - parameter cascade: (query) Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (optional, default to false)
     - parameter storeItem: (body) The store item object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateStoreItem(id: Int32, cascade: Bool? = nil, storeItem: StoreItem? = nil, completion: @escaping ((_ data: StoreItem?,_ error: Error?) -> Void)) {
        updateStoreItemWithRequestBuilder(id: id, cascade: cascade, storeItem: storeItem).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Update a store item
     - PUT /store/items/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "geo_policy_type" : "whitelist",
  "template" : "aeiou",
  "short_description" : "aeiou",
  "geo_country_list" : [ "aeiou" ],
  "skus" : [ {
    "sale_id" : 6,
    "original_price" : 6.114128813382487,
    "description" : "aeiou",
    "stop_date" : 0,
    "published" : false,
    "inventory" : 9,
    "min_inventory_threshold" : 4,
    "currency_code" : "aeiou",
    "price" : 9.818136749975265,
    "additional_properties" : {
      "key" : ""
    },
    "sale_name" : "aeiou",
    "sku" : "aeiou",
    "start_date" : 6
  } ],
  "store_end" : 2,
  "type_hint" : "aeiou",
  "behaviors" : [ {
    "type_hint" : "aeiou",
    "description" : "aeiou"
  } ],
  "unique_key" : "aeiou",
  "displayable" : false,
  "long_description" : "aeiou",
  "sort" : 8,
  "tags" : [ "aeiou" ],
  "shipping_tier" : 1,
  "store_start" : 8,
  "vendor_id" : 4,
  "name" : "aeiou",
  "additional_properties" : {
    "key" : {
      "type" : "aeiou"
    }
  },
  "created_date" : 1,
  "id" : 1,
  "updated_date" : 5,
  "category" : "aeiou"
}}]
     
     - parameter id: (path) The id of the item 
     - parameter cascade: (query) Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (optional, default to false)
     - parameter storeItem: (body) The store item object (optional)

     - returns: RequestBuilder<StoreItem> 
     */
    open class func updateStoreItemWithRequestBuilder(id: Int32, cascade: Bool? = nil, storeItem: StoreItem? = nil) -> RequestBuilder<StoreItem> {
        var path = "/store/items/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = storeItem?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "cascade": cascade
        ])
        

        let requestBuilder: RequestBuilder<StoreItem>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
