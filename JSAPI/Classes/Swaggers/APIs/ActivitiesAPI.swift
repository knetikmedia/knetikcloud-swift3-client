//
// ActivitiesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ActivitiesAPI: APIBase {
    /**
     Add a user to an occurrence
     - parameter activityOccurrenceId: (path) The id of the activity occurrence 
     - parameter test: (query) if true, indicates that the user should NOT be added. This can be used to test for eligibility (optional, default to false)
     - parameter bypassRestrictions: (query) if true, indicates that restrictions such as max player count should be ignored. Can only be used with ACTIVITIES_ADMIN (optional, default to false)
     - parameter userId: (body) The id of the user, or null for &#39;caller&#39; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addUser(activityOccurrenceId: Int64, test: Bool? = nil, bypassRestrictions: Bool? = nil, userId: IntWrapper? = nil, completion: @escaping ((_ data: ActivityOccurrenceResource?, _ error: ErrorResponse?) -> Void)) {
        addUserWithRequestBuilder(activityOccurrenceId: activityOccurrenceId, test: test, bypassRestrictions: bypassRestrictions, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add a user to an occurrence
     - POST /activity-occurrences/{activity_occurrence_id}/users
     - If called with no body, defaults to the user making the call.
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "settings" : [ {
    "key_name" : "key_name",
    "value" : "value",
    "key" : "key",
    "value_name" : "value_name"
  }, {
    "key_name" : "key_name",
    "value" : "value",
    "key" : "key",
    "value_name" : "value_name"
  } ],
  "challenge_activity_id" : 1,
  "simulated" : false,
  "core_settings" : {
    "non_host_status_control" : false,
    "host_status_control" : false,
    "boot_in_play" : false,
    "leave_in_play" : false,
    "join_in_play" : false,
    "max_players" : 5,
    "results_trust" : "none",
    "custom_launch_address" : "custom_launch_address",
    "min_players" : 5
  },
  "bans" : [ 6, 6 ],
  "entitlement" : {
    "item_id" : 5,
    "price" : 5.63737665663332876420099637471139430999755859375,
    "name" : "name",
    "sku" : "sku",
    "currency_code" : "currency_code"
  },
  "users" : [ {
    "joined_date" : 1,
    "metric" : {
      "user_id" : 6,
      "value" : 7,
      "activity_occurence_id" : 1,
      "tags" : [ "tags", "tags" ]
    },
    "host" : false,
    "left_date" : 1,
    "id" : 7,
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "status" : "present"
  }, {
    "joined_date" : 1,
    "metric" : {
      "user_id" : 6,
      "value" : 7,
      "activity_occurence_id" : 1,
      "tags" : [ "tags", "tags" ]
    },
    "host" : false,
    "left_date" : 1,
    "id" : 7,
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "status" : "present"
  } ],
  "event_id" : 7,
  "activity_id" : 0,
  "host" : {
    "avatar_url" : "avatar_url",
    "id" : 9,
    "display_name" : "display_name",
    "username" : "username"
  },
  "created_date" : 2,
  "id" : 3,
  "updated_date" : 4,
  "reward_status" : "pending",
  "start_date" : 2,
  "status" : "SETUP"
}}]
     - parameter activityOccurrenceId: (path) The id of the activity occurrence 
     - parameter test: (query) if true, indicates that the user should NOT be added. This can be used to test for eligibility (optional, default to false)
     - parameter bypassRestrictions: (query) if true, indicates that restrictions such as max player count should be ignored. Can only be used with ACTIVITIES_ADMIN (optional, default to false)
     - parameter userId: (body) The id of the user, or null for &#39;caller&#39; (optional)
     - returns: RequestBuilder<ActivityOccurrenceResource> 
     */
    open class func addUserWithRequestBuilder(activityOccurrenceId: Int64, test: Bool? = nil, bypassRestrictions: Bool? = nil, userId: IntWrapper? = nil) -> RequestBuilder<ActivityOccurrenceResource> {
        var path = "/activity-occurrences/{activity_occurrence_id}/users"
        path = path.replacingOccurrences(of: "{activity_occurrence_id}", with: "\(activityOccurrenceId)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = userId?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "test": test, 
            "bypass_restrictions": bypassRestrictions
        ])

        let requestBuilder: RequestBuilder<ActivityOccurrenceResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create an activity
     - parameter activityResource: (body) The activity resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createActivity(activityResource: ActivityResource? = nil, completion: @escaping ((_ data: ActivityResource?, _ error: ErrorResponse?) -> Void)) {
        createActivityWithRequestBuilder(activityResource: activityResource).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create an activity
     - POST /activities
     - <b>Permissions Needed:</b> ACTIVITIES_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "entitlements" : [ {
    "item_id" : 5,
    "price" : 5.63737665663332876420099637471139430999755859375,
    "name" : "name",
    "sku" : "sku",
    "currency_code" : "currency_code"
  }, {
    "item_id" : 5,
    "price" : 5.63737665663332876420099637471139430999755859375,
    "name" : "name",
    "sku" : "sku",
    "currency_code" : "currency_code"
  } ],
  "template" : false,
  "reward_set" : {
    "short_description" : "short_description",
    "unique_key" : "unique_key",
    "currency_rewards" : [ {
      "currency_name" : "currency_name",
      "max_rank" : 9,
      "min_rank" : 3,
      "percent" : false,
      "value" : 2.027123023002322,
      "currency_code" : "currency_code"
    }, {
      "currency_name" : "currency_name",
      "max_rank" : 9,
      "min_rank" : 3,
      "percent" : false,
      "value" : 2.027123023002322,
      "currency_code" : "currency_code"
    } ],
    "name" : "name",
    "created_date" : 7,
    "id" : 4,
    "long_description" : "long_description",
    "max_placing" : 6,
    "updated_date" : 7,
    "item_rewards" : [ {
      "quantity" : 1,
      "item_id" : 7,
      "max_rank" : 1,
      "item_name" : "item_name",
      "min_rank" : 1
    }, {
      "quantity" : 1,
      "item_id" : 7,
      "max_rank" : 1,
      "item_name" : "item_name",
      "min_rank" : 1
    } ]
  },
  "settings" : [ {
    "advanced_option" : false,
    "name" : "name",
    "options" : [ {
      "name" : "name",
      "value" : "value"
    }, {
      "name" : "name",
      "value" : "value"
    } ],
    "description" : "description",
    "default_value" : "default_value",
    "type" : "type",
    "key" : "key"
  }, {
    "advanced_option" : false,
    "name" : "name",
    "options" : [ {
      "name" : "name",
      "value" : "value"
    }, {
      "name" : "name",
      "value" : "value"
    } ],
    "description" : "description",
    "default_value" : "default_value",
    "type" : "type",
    "key" : "key"
  } ],
  "short_description" : "short_description",
  "unique_key" : "unique_key",
  "core_settings" : {
    "host_status_control" : false,
    "boot_in_play" : false,
    "leave_in_play" : false,
    "join_in_play" : false,
    "max_players" : 0,
    "results_trust" : "none",
    "custom_launch_address_allowed" : false,
    "host_option" : "admin_only",
    "min_players" : 6
  },
  "launch" : "launch",
  "long_description" : "long_description",
  "type" : "type",
  "leaderboard_strategy" : "leaderboard_strategy",
  "name" : "name",
  "template_id" : "template_id",
  "additional_properties" : {
    "key" : {
      "type" : "type"
    }
  },
  "created_date" : 1,
  "id" : 2,
  "updated_date" : 1
}}]
     - parameter activityResource: (body) The activity resource object (optional)
     - returns: RequestBuilder<ActivityResource> 
     */
    open class func createActivityWithRequestBuilder(activityResource: ActivityResource? = nil) -> RequestBuilder<ActivityResource> {
        let path = "/activities"
        let URLString = JSAPIAPI.basePath + path
        let parameters = activityResource?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ActivityResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a new activity occurrence. Ex: start a game
     - parameter test: (query) if true, indicates that the occurrence should NOT be created. This can be used to test for eligibility and valid settings (optional, default to false)
     - parameter activityOccurrenceResource: (body) The activity occurrence object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createActivityOccurrence(test: Bool? = nil, activityOccurrenceResource: CreateActivityOccurrenceRequest? = nil, completion: @escaping ((_ data: ActivityOccurrenceResource?, _ error: ErrorResponse?) -> Void)) {
        createActivityOccurrenceWithRequestBuilder(test: test, activityOccurrenceResource: activityOccurrenceResource).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a new activity occurrence. Ex: start a game
     - POST /activity-occurrences
     - Has to enforce extra rules if not used as an admin. <br><br><b>Permissions Needed:</b> ACTIVITIES_USER or ACTIVITIES_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "settings" : [ {
    "key_name" : "key_name",
    "value" : "value",
    "key" : "key",
    "value_name" : "value_name"
  }, {
    "key_name" : "key_name",
    "value" : "value",
    "key" : "key",
    "value_name" : "value_name"
  } ],
  "challenge_activity_id" : 1,
  "simulated" : false,
  "core_settings" : {
    "non_host_status_control" : false,
    "host_status_control" : false,
    "boot_in_play" : false,
    "leave_in_play" : false,
    "join_in_play" : false,
    "max_players" : 5,
    "results_trust" : "none",
    "custom_launch_address" : "custom_launch_address",
    "min_players" : 5
  },
  "bans" : [ 6, 6 ],
  "entitlement" : {
    "item_id" : 5,
    "price" : 5.63737665663332876420099637471139430999755859375,
    "name" : "name",
    "sku" : "sku",
    "currency_code" : "currency_code"
  },
  "users" : [ {
    "joined_date" : 1,
    "metric" : {
      "user_id" : 6,
      "value" : 7,
      "activity_occurence_id" : 1,
      "tags" : [ "tags", "tags" ]
    },
    "host" : false,
    "left_date" : 1,
    "id" : 7,
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "status" : "present"
  }, {
    "joined_date" : 1,
    "metric" : {
      "user_id" : 6,
      "value" : 7,
      "activity_occurence_id" : 1,
      "tags" : [ "tags", "tags" ]
    },
    "host" : false,
    "left_date" : 1,
    "id" : 7,
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "status" : "present"
  } ],
  "event_id" : 7,
  "activity_id" : 0,
  "host" : {
    "avatar_url" : "avatar_url",
    "id" : 9,
    "display_name" : "display_name",
    "username" : "username"
  },
  "created_date" : 2,
  "id" : 3,
  "updated_date" : 4,
  "reward_status" : "pending",
  "start_date" : 2,
  "status" : "SETUP"
}}]
     - parameter test: (query) if true, indicates that the occurrence should NOT be created. This can be used to test for eligibility and valid settings (optional, default to false)
     - parameter activityOccurrenceResource: (body) The activity occurrence object (optional)
     - returns: RequestBuilder<ActivityOccurrenceResource> 
     */
    open class func createActivityOccurrenceWithRequestBuilder(test: Bool? = nil, activityOccurrenceResource: CreateActivityOccurrenceRequest? = nil) -> RequestBuilder<ActivityOccurrenceResource> {
        let path = "/activity-occurrences"
        let URLString = JSAPIAPI.basePath + path
        let parameters = activityOccurrenceResource?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "test": test
        ])

        let requestBuilder: RequestBuilder<ActivityOccurrenceResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a activity template
     - parameter activityTemplateResource: (body) The activity template resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createActivityTemplate(activityTemplateResource: TemplateResource? = nil, completion: @escaping ((_ data: TemplateResource?, _ error: ErrorResponse?) -> Void)) {
        createActivityTemplateWithRequestBuilder(activityTemplateResource: activityTemplateResource).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a activity template
     - POST /activities/templates
     - Activity Templates define a type of activity and the properties they have. <br><br><b>Permissions Needed:</b> TEMPLATE_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "allow_additional" : false,
  "name" : "name",
  "created_date" : 0,
  "id" : "id",
  "updated_date" : 6,
  "properties" : [ {
    "friendly_name" : "friendly_name",
    "option_value_path" : "path.to.value",
    "option_label_path" : "path.to.label",
    "name" : "name",
    "description" : "description",
    "options_url" : "options_url",
    "type" : "type",
    "field_list" : {
      "property_definition_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ],
      "property_type" : "property_type",
      "property_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ]
    },
    "required" : false
  }, {
    "friendly_name" : "friendly_name",
    "option_value_path" : "path.to.value",
    "option_label_path" : "path.to.label",
    "name" : "name",
    "description" : "description",
    "options_url" : "options_url",
    "type" : "type",
    "field_list" : {
      "property_definition_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ],
      "property_type" : "property_type",
      "property_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ]
    },
    "required" : false
  } ]
}}]
     - parameter activityTemplateResource: (body) The activity template resource object (optional)
     - returns: RequestBuilder<TemplateResource> 
     */
    open class func createActivityTemplateWithRequestBuilder(activityTemplateResource: TemplateResource? = nil) -> RequestBuilder<TemplateResource> {
        let path = "/activities/templates"
        let URLString = JSAPIAPI.basePath + path
        let parameters = activityTemplateResource?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TemplateResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete an activity
     - parameter id: (path) The id of the activity 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteActivity(id: Int64, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        deleteActivityWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Delete an activity
     - DELETE /activities/{id}
     - <b>Permissions Needed:</b> ACTIVITIES_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - parameter id: (path) The id of the activity 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteActivityWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/activities/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a activity template
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) The value needed to delete used templates (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteActivityTemplate(id: String, cascade: String? = nil, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        deleteActivityTemplateWithRequestBuilder(id: id, cascade: cascade).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Delete a activity template
     - DELETE /activities/templates/{id}
     - If cascade = 'detach', it will force delete the template even if it's attached to other objects. <br><br><b>Permissions Needed:</b> TEMPLATE_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) The value needed to delete used templates (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func deleteActivityTemplateWithRequestBuilder(id: String, cascade: String? = nil) -> RequestBuilder<Void> {
        var path = "/activities/templates/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "cascade": cascade
        ])

        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List activity definitions
     - parameter filterTemplate: (query) Filter for activities that are templates, or specifically not if false (optional)
     - parameter filterName: (query) Filter for activities that have a name starting with specified string (optional)
     - parameter filterId: (query) Filter for activities with an id in the given comma separated list of ids (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getActivities(filterTemplate: Bool? = nil, filterName: String? = nil, filterId: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: PageResourceBareActivityResource?, _ error: ErrorResponse?) -> Void)) {
        getActivitiesWithRequestBuilder(filterTemplate: filterTemplate, filterName: filterName, filterId: filterId, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List activity definitions
     - GET /activities
     - <b>Permissions Needed:</b> ANY
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "number" : 5,
  "last" : true,
  "size" : 2,
  "total_elements" : 7,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  }, {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 9,
  "number_of_elements" : 5,
  "content" : [ {
    "template" : false,
    "short_description" : "short_description",
    "unique_key" : "unique_key",
    "name" : "name",
    "launch" : "launch",
    "created_date" : 0,
    "id" : 6,
    "long_description" : "long_description",
    "updated_date" : 1,
    "type" : "type"
  }, {
    "template" : false,
    "short_description" : "short_description",
    "unique_key" : "unique_key",
    "name" : "name",
    "launch" : "launch",
    "created_date" : 0,
    "id" : 6,
    "long_description" : "long_description",
    "updated_date" : 1,
    "type" : "type"
  } ],
  "first" : true
}}]
     - parameter filterTemplate: (query) Filter for activities that are templates, or specifically not if false (optional)
     - parameter filterName: (query) Filter for activities that have a name starting with specified string (optional)
     - parameter filterId: (query) Filter for activities with an id in the given comma separated list of ids (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - returns: RequestBuilder<PageResourceBareActivityResource> 
     */
    open class func getActivitiesWithRequestBuilder(filterTemplate: Bool? = nil, filterName: String? = nil, filterId: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceBareActivityResource> {
        let path = "/activities"
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter_template": filterTemplate, 
            "filter_name": filterName, 
            "filter_id": filterId, 
            "size": size?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "order": order
        ])

        let requestBuilder: RequestBuilder<PageResourceBareActivityResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a single activity
     - parameter id: (path) The id of the activity 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getActivity(id: Int64, completion: @escaping ((_ data: ActivityResource?, _ error: ErrorResponse?) -> Void)) {
        getActivityWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a single activity
     - GET /activities/{id}
     - <b>Permissions Needed:</b> ANY
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "entitlements" : [ {
    "item_id" : 5,
    "price" : 5.63737665663332876420099637471139430999755859375,
    "name" : "name",
    "sku" : "sku",
    "currency_code" : "currency_code"
  }, {
    "item_id" : 5,
    "price" : 5.63737665663332876420099637471139430999755859375,
    "name" : "name",
    "sku" : "sku",
    "currency_code" : "currency_code"
  } ],
  "template" : false,
  "reward_set" : {
    "short_description" : "short_description",
    "unique_key" : "unique_key",
    "currency_rewards" : [ {
      "currency_name" : "currency_name",
      "max_rank" : 9,
      "min_rank" : 3,
      "percent" : false,
      "value" : 2.027123023002322,
      "currency_code" : "currency_code"
    }, {
      "currency_name" : "currency_name",
      "max_rank" : 9,
      "min_rank" : 3,
      "percent" : false,
      "value" : 2.027123023002322,
      "currency_code" : "currency_code"
    } ],
    "name" : "name",
    "created_date" : 7,
    "id" : 4,
    "long_description" : "long_description",
    "max_placing" : 6,
    "updated_date" : 7,
    "item_rewards" : [ {
      "quantity" : 1,
      "item_id" : 7,
      "max_rank" : 1,
      "item_name" : "item_name",
      "min_rank" : 1
    }, {
      "quantity" : 1,
      "item_id" : 7,
      "max_rank" : 1,
      "item_name" : "item_name",
      "min_rank" : 1
    } ]
  },
  "settings" : [ {
    "advanced_option" : false,
    "name" : "name",
    "options" : [ {
      "name" : "name",
      "value" : "value"
    }, {
      "name" : "name",
      "value" : "value"
    } ],
    "description" : "description",
    "default_value" : "default_value",
    "type" : "type",
    "key" : "key"
  }, {
    "advanced_option" : false,
    "name" : "name",
    "options" : [ {
      "name" : "name",
      "value" : "value"
    }, {
      "name" : "name",
      "value" : "value"
    } ],
    "description" : "description",
    "default_value" : "default_value",
    "type" : "type",
    "key" : "key"
  } ],
  "short_description" : "short_description",
  "unique_key" : "unique_key",
  "core_settings" : {
    "host_status_control" : false,
    "boot_in_play" : false,
    "leave_in_play" : false,
    "join_in_play" : false,
    "max_players" : 0,
    "results_trust" : "none",
    "custom_launch_address_allowed" : false,
    "host_option" : "admin_only",
    "min_players" : 6
  },
  "launch" : "launch",
  "long_description" : "long_description",
  "type" : "type",
  "leaderboard_strategy" : "leaderboard_strategy",
  "name" : "name",
  "template_id" : "template_id",
  "additional_properties" : {
    "key" : {
      "type" : "type"
    }
  },
  "created_date" : 1,
  "id" : 2,
  "updated_date" : 1
}}]
     - parameter id: (path) The id of the activity 
     - returns: RequestBuilder<ActivityResource> 
     */
    open class func getActivityWithRequestBuilder(id: Int64) -> RequestBuilder<ActivityResource> {
        var path = "/activities/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ActivityResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Load a single activity occurrence details
     - parameter activityOccurrenceId: (path) The id of the activity occurrence 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getActivityOccurrenceDetails(activityOccurrenceId: Int64, completion: @escaping ((_ data: ActivityOccurrenceResource?, _ error: ErrorResponse?) -> Void)) {
        getActivityOccurrenceDetailsWithRequestBuilder(activityOccurrenceId: activityOccurrenceId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Load a single activity occurrence details
     - GET /activity-occurrences/{activity_occurrence_id}
     - <b>Permissions Needed:</b> ACTIVITIES_USER or ACTIVITIES_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "settings" : [ {
    "key_name" : "key_name",
    "value" : "value",
    "key" : "key",
    "value_name" : "value_name"
  }, {
    "key_name" : "key_name",
    "value" : "value",
    "key" : "key",
    "value_name" : "value_name"
  } ],
  "challenge_activity_id" : 1,
  "simulated" : false,
  "core_settings" : {
    "non_host_status_control" : false,
    "host_status_control" : false,
    "boot_in_play" : false,
    "leave_in_play" : false,
    "join_in_play" : false,
    "max_players" : 5,
    "results_trust" : "none",
    "custom_launch_address" : "custom_launch_address",
    "min_players" : 5
  },
  "bans" : [ 6, 6 ],
  "entitlement" : {
    "item_id" : 5,
    "price" : 5.63737665663332876420099637471139430999755859375,
    "name" : "name",
    "sku" : "sku",
    "currency_code" : "currency_code"
  },
  "users" : [ {
    "joined_date" : 1,
    "metric" : {
      "user_id" : 6,
      "value" : 7,
      "activity_occurence_id" : 1,
      "tags" : [ "tags", "tags" ]
    },
    "host" : false,
    "left_date" : 1,
    "id" : 7,
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "status" : "present"
  }, {
    "joined_date" : 1,
    "metric" : {
      "user_id" : 6,
      "value" : 7,
      "activity_occurence_id" : 1,
      "tags" : [ "tags", "tags" ]
    },
    "host" : false,
    "left_date" : 1,
    "id" : 7,
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "status" : "present"
  } ],
  "event_id" : 7,
  "activity_id" : 0,
  "host" : {
    "avatar_url" : "avatar_url",
    "id" : 9,
    "display_name" : "display_name",
    "username" : "username"
  },
  "created_date" : 2,
  "id" : 3,
  "updated_date" : 4,
  "reward_status" : "pending",
  "start_date" : 2,
  "status" : "SETUP"
}}]
     - parameter activityOccurrenceId: (path) The id of the activity occurrence 
     - returns: RequestBuilder<ActivityOccurrenceResource> 
     */
    open class func getActivityOccurrenceDetailsWithRequestBuilder(activityOccurrenceId: Int64) -> RequestBuilder<ActivityOccurrenceResource> {
        var path = "/activity-occurrences/{activity_occurrence_id}"
        path = path.replacingOccurrences(of: "{activity_occurrence_id}", with: "\(activityOccurrenceId)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ActivityOccurrenceResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a single activity template
     - parameter id: (path) The id of the template 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getActivityTemplate(id: String, completion: @escaping ((_ data: TemplateResource?, _ error: ErrorResponse?) -> Void)) {
        getActivityTemplateWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a single activity template
     - GET /activities/templates/{id}
     - <b>Permissions Needed:</b> TEMPLATE_ADMIN or ACTIVITIES_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "allow_additional" : false,
  "name" : "name",
  "created_date" : 0,
  "id" : "id",
  "updated_date" : 6,
  "properties" : [ {
    "friendly_name" : "friendly_name",
    "option_value_path" : "path.to.value",
    "option_label_path" : "path.to.label",
    "name" : "name",
    "description" : "description",
    "options_url" : "options_url",
    "type" : "type",
    "field_list" : {
      "property_definition_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ],
      "property_type" : "property_type",
      "property_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ]
    },
    "required" : false
  }, {
    "friendly_name" : "friendly_name",
    "option_value_path" : "path.to.value",
    "option_label_path" : "path.to.label",
    "name" : "name",
    "description" : "description",
    "options_url" : "options_url",
    "type" : "type",
    "field_list" : {
      "property_definition_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ],
      "property_type" : "property_type",
      "property_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ]
    },
    "required" : false
  } ]
}}]
     - parameter id: (path) The id of the template 
     - returns: RequestBuilder<TemplateResource> 
     */
    open class func getActivityTemplateWithRequestBuilder(id: String) -> RequestBuilder<TemplateResource> {
        var path = "/activities/templates/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TemplateResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List and search activity templates
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getActivityTemplates(size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: PageResourceTemplateResource?, _ error: ErrorResponse?) -> Void)) {
        getActivityTemplatesWithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List and search activity templates
     - GET /activities/templates
     - <b>Permissions Needed:</b> TEMPLATE_ADMIN or ACTIVITIES_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "number" : 1,
  "last" : true,
  "size" : 5,
  "total_elements" : 2,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  }, {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 7,
  "number_of_elements" : 5,
  "content" : [ {
    "allow_additional" : false,
    "name" : "name",
    "created_date" : 0,
    "id" : "id",
    "updated_date" : 6,
    "properties" : [ {
      "friendly_name" : "friendly_name",
      "option_value_path" : "path.to.value",
      "option_label_path" : "path.to.label",
      "name" : "name",
      "description" : "description",
      "options_url" : "options_url",
      "type" : "type",
      "field_list" : {
        "property_definition_fields" : [ {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        }, {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        } ],
        "property_type" : "property_type",
        "property_fields" : [ {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        }, {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        } ]
      },
      "required" : false
    }, {
      "friendly_name" : "friendly_name",
      "option_value_path" : "path.to.value",
      "option_label_path" : "path.to.label",
      "name" : "name",
      "description" : "description",
      "options_url" : "options_url",
      "type" : "type",
      "field_list" : {
        "property_definition_fields" : [ {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        }, {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        } ],
        "property_type" : "property_type",
        "property_fields" : [ {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        }, {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        } ]
      },
      "required" : false
    } ]
  }, {
    "allow_additional" : false,
    "name" : "name",
    "created_date" : 0,
    "id" : "id",
    "updated_date" : 6,
    "properties" : [ {
      "friendly_name" : "friendly_name",
      "option_value_path" : "path.to.value",
      "option_label_path" : "path.to.label",
      "name" : "name",
      "description" : "description",
      "options_url" : "options_url",
      "type" : "type",
      "field_list" : {
        "property_definition_fields" : [ {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        }, {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        } ],
        "property_type" : "property_type",
        "property_fields" : [ {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        }, {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        } ]
      },
      "required" : false
    }, {
      "friendly_name" : "friendly_name",
      "option_value_path" : "path.to.value",
      "option_label_path" : "path.to.label",
      "name" : "name",
      "description" : "description",
      "options_url" : "options_url",
      "type" : "type",
      "field_list" : {
        "property_definition_fields" : [ {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        }, {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        } ],
        "property_type" : "property_type",
        "property_fields" : [ {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        }, {
          "inner_type" : "integer",
          "valid_values" : [ "valid_values", "valid_values" ],
          "name" : "name",
          "description" : "description",
          "type" : "integer",
          "inner_type_fields" : [ null, null ],
          "required" : false
        } ]
      },
      "required" : false
    } ]
  } ],
  "first" : true
}}]
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - returns: RequestBuilder<PageResourceTemplateResource> 
     */
    open class func getActivityTemplatesWithRequestBuilder(size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceTemplateResource> {
        let path = "/activities/templates"
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "size": size?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "order": order
        ])

        let requestBuilder: RequestBuilder<PageResourceTemplateResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List activity occurrences
     - parameter filterActivity: (query) Filter for occurrences of the given activity ID (optional)
     - parameter filterStatus: (query) Filter for occurrences in the given status (optional)
     - parameter filterEvent: (query) Filter for occurrences played during the given event (optional)
     - parameter filterChallenge: (query) Filter for occurrences played within the given challenge (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listActivityOccurrences(filterActivity: String? = nil, filterStatus: String? = nil, filterEvent: Int32? = nil, filterChallenge: Int32? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: PageResourceActivityOccurrenceResource?, _ error: ErrorResponse?) -> Void)) {
        listActivityOccurrencesWithRequestBuilder(filterActivity: filterActivity, filterStatus: filterStatus, filterEvent: filterEvent, filterChallenge: filterChallenge, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List activity occurrences
     - GET /activity-occurrences
     - <b>Permissions Needed:</b> ACTIVITIES_USER or ACTIVITIES_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "number" : 1,
  "last" : true,
  "size" : 5,
  "total_elements" : 9,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  }, {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "property",
    "ascending" : true,
    "descending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 9,
  "number_of_elements" : 4,
  "content" : [ {
    "settings" : [ {
      "key_name" : "key_name",
      "value" : "value",
      "key" : "key",
      "value_name" : "value_name"
    }, {
      "key_name" : "key_name",
      "value" : "value",
      "key" : "key",
      "value_name" : "value_name"
    } ],
    "challenge_activity_id" : 1,
    "simulated" : false,
    "core_settings" : {
      "non_host_status_control" : false,
      "host_status_control" : false,
      "boot_in_play" : false,
      "leave_in_play" : false,
      "join_in_play" : false,
      "max_players" : 5,
      "results_trust" : "none",
      "custom_launch_address" : "custom_launch_address",
      "min_players" : 5
    },
    "bans" : [ 6, 6 ],
    "entitlement" : {
      "item_id" : 5,
      "price" : 5.63737665663332876420099637471139430999755859375,
      "name" : "name",
      "sku" : "sku",
      "currency_code" : "currency_code"
    },
    "users" : [ {
      "joined_date" : 1,
      "metric" : {
        "user_id" : 6,
        "value" : 7,
        "activity_occurence_id" : 1,
        "tags" : [ "tags", "tags" ]
      },
      "host" : false,
      "left_date" : 1,
      "id" : 7,
      "user" : {
        "avatar_url" : "avatar_url",
        "id" : 9,
        "display_name" : "display_name",
        "username" : "username"
      },
      "status" : "present"
    }, {
      "joined_date" : 1,
      "metric" : {
        "user_id" : 6,
        "value" : 7,
        "activity_occurence_id" : 1,
        "tags" : [ "tags", "tags" ]
      },
      "host" : false,
      "left_date" : 1,
      "id" : 7,
      "user" : {
        "avatar_url" : "avatar_url",
        "id" : 9,
        "display_name" : "display_name",
        "username" : "username"
      },
      "status" : "present"
    } ],
    "event_id" : 7,
    "activity_id" : 0,
    "host" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "created_date" : 2,
    "id" : 3,
    "updated_date" : 4,
    "reward_status" : "pending",
    "start_date" : 2,
    "status" : "SETUP"
  }, {
    "settings" : [ {
      "key_name" : "key_name",
      "value" : "value",
      "key" : "key",
      "value_name" : "value_name"
    }, {
      "key_name" : "key_name",
      "value" : "value",
      "key" : "key",
      "value_name" : "value_name"
    } ],
    "challenge_activity_id" : 1,
    "simulated" : false,
    "core_settings" : {
      "non_host_status_control" : false,
      "host_status_control" : false,
      "boot_in_play" : false,
      "leave_in_play" : false,
      "join_in_play" : false,
      "max_players" : 5,
      "results_trust" : "none",
      "custom_launch_address" : "custom_launch_address",
      "min_players" : 5
    },
    "bans" : [ 6, 6 ],
    "entitlement" : {
      "item_id" : 5,
      "price" : 5.63737665663332876420099637471139430999755859375,
      "name" : "name",
      "sku" : "sku",
      "currency_code" : "currency_code"
    },
    "users" : [ {
      "joined_date" : 1,
      "metric" : {
        "user_id" : 6,
        "value" : 7,
        "activity_occurence_id" : 1,
        "tags" : [ "tags", "tags" ]
      },
      "host" : false,
      "left_date" : 1,
      "id" : 7,
      "user" : {
        "avatar_url" : "avatar_url",
        "id" : 9,
        "display_name" : "display_name",
        "username" : "username"
      },
      "status" : "present"
    }, {
      "joined_date" : 1,
      "metric" : {
        "user_id" : 6,
        "value" : 7,
        "activity_occurence_id" : 1,
        "tags" : [ "tags", "tags" ]
      },
      "host" : false,
      "left_date" : 1,
      "id" : 7,
      "user" : {
        "avatar_url" : "avatar_url",
        "id" : 9,
        "display_name" : "display_name",
        "username" : "username"
      },
      "status" : "present"
    } ],
    "event_id" : 7,
    "activity_id" : 0,
    "host" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "created_date" : 2,
    "id" : 3,
    "updated_date" : 4,
    "reward_status" : "pending",
    "start_date" : 2,
    "status" : "SETUP"
  } ],
  "first" : true
}}]
     - parameter filterActivity: (query) Filter for occurrences of the given activity ID (optional)
     - parameter filterStatus: (query) Filter for occurrences in the given status (optional)
     - parameter filterEvent: (query) Filter for occurrences played during the given event (optional)
     - parameter filterChallenge: (query) Filter for occurrences played within the given challenge (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - returns: RequestBuilder<PageResourceActivityOccurrenceResource> 
     */
    open class func listActivityOccurrencesWithRequestBuilder(filterActivity: String? = nil, filterStatus: String? = nil, filterEvent: Int32? = nil, filterChallenge: Int32? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceActivityOccurrenceResource> {
        let path = "/activity-occurrences"
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter_activity": filterActivity, 
            "filter_status": filterStatus, 
            "filter_event": filterEvent?.encodeToJSON(), 
            "filter_challenge": filterChallenge?.encodeToJSON(), 
            "size": size?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "order": order
        ])

        let requestBuilder: RequestBuilder<PageResourceActivityOccurrenceResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove a user from an occurrence
     - parameter activityOccurrenceId: (path) The id of the activity occurrence 
     - parameter userId: (path) The id of the user, or &#39;me&#39; 
     - parameter ban: (query) if true, indicates that the user should not be allowed to re-join. Can only be set by host or admin (optional, default to false)
     - parameter bypassRestrictions: (query) if true, indicates that restrictions such as current status should be ignored. Can only be used with ACTIVITIES_ADMIN (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeUser(activityOccurrenceId: Int64, userId: String, ban: Bool? = nil, bypassRestrictions: Bool? = nil, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        removeUserWithRequestBuilder(activityOccurrenceId: activityOccurrenceId, userId: userId, ban: ban, bypassRestrictions: bypassRestrictions).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Remove a user from an occurrence
     - DELETE /activity-occurrences/{activity_occurrence_id}/users/{user_id}
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - parameter activityOccurrenceId: (path) The id of the activity occurrence 
     - parameter userId: (path) The id of the user, or &#39;me&#39; 
     - parameter ban: (query) if true, indicates that the user should not be allowed to re-join. Can only be set by host or admin (optional, default to false)
     - parameter bypassRestrictions: (query) if true, indicates that restrictions such as current status should be ignored. Can only be used with ACTIVITIES_ADMIN (optional, default to false)
     - returns: RequestBuilder<Void> 
     */
    open class func removeUserWithRequestBuilder(activityOccurrenceId: Int64, userId: String, ban: Bool? = nil, bypassRestrictions: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/activity-occurrences/{activity_occurrence_id}/users/{user_id}"
        path = path.replacingOccurrences(of: "{activity_occurrence_id}", with: "\(activityOccurrenceId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{user_id}", with: "\(userId)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "ban": ban, 
            "bypass_restrictions": bypassRestrictions
        ])

        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Sets the status of an activity occurrence to FINISHED and logs metrics
     - parameter activityOccurrenceId: (path) The id of the activity occurrence 
     - parameter activityOccurrenceResults: (body) The activity occurrence object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setActivityOccurrenceResults(activityOccurrenceId: Int64, activityOccurrenceResults: ActivityOccurrenceResultsResource? = nil, completion: @escaping ((_ data: ActivityOccurrenceResults?, _ error: ErrorResponse?) -> Void)) {
        setActivityOccurrenceResultsWithRequestBuilder(activityOccurrenceId: activityOccurrenceId, activityOccurrenceResults: activityOccurrenceResults).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Sets the status of an activity occurrence to FINISHED and logs metrics
     - POST /activity-occurrences/{activity_occurrence_id}/results
     - In addition to user permissions requirements there is security based on the core_settings.results_trust setting. <br><br><b>Permissions Needed:</b> ACTIVITIES_USER or ACTIVITIES_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "users" : [ {
    "score" : 6,
    "ties" : 1,
    "currency_rewards" : [ {
      "currency_name" : "currency_name",
      "max_rank" : 9,
      "min_rank" : 3,
      "percent" : false,
      "value" : 2.027123023002322,
      "currency_code" : "currency_code"
    }, {
      "currency_name" : "currency_name",
      "max_rank" : 9,
      "min_rank" : 3,
      "percent" : false,
      "value" : 2.027123023002322,
      "currency_code" : "currency_code"
    } ],
    "rank" : 0,
    "updated_date" : 5,
    "item_rewards" : [ {
      "quantity" : 1,
      "item_id" : 7,
      "max_rank" : 1,
      "item_name" : "item_name",
      "min_rank" : 1
    }, {
      "quantity" : 1,
      "item_id" : 7,
      "max_rank" : 1,
      "item_name" : "item_name",
      "min_rank" : 1
    } ],
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "tags" : [ "tags", "tags" ]
  }, {
    "score" : 6,
    "ties" : 1,
    "currency_rewards" : [ {
      "currency_name" : "currency_name",
      "max_rank" : 9,
      "min_rank" : 3,
      "percent" : false,
      "value" : 2.027123023002322,
      "currency_code" : "currency_code"
    }, {
      "currency_name" : "currency_name",
      "max_rank" : 9,
      "min_rank" : 3,
      "percent" : false,
      "value" : 2.027123023002322,
      "currency_code" : "currency_code"
    } ],
    "rank" : 0,
    "updated_date" : 5,
    "item_rewards" : [ {
      "quantity" : 1,
      "item_id" : 7,
      "max_rank" : 1,
      "item_name" : "item_name",
      "min_rank" : 1
    }, {
      "quantity" : 1,
      "item_id" : 7,
      "max_rank" : 1,
      "item_name" : "item_name",
      "min_rank" : 1
    } ],
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "tags" : [ "tags", "tags" ]
  } ]
}}]
     - parameter activityOccurrenceId: (path) The id of the activity occurrence 
     - parameter activityOccurrenceResults: (body) The activity occurrence object (optional)
     - returns: RequestBuilder<ActivityOccurrenceResults> 
     */
    open class func setActivityOccurrenceResultsWithRequestBuilder(activityOccurrenceId: Int64, activityOccurrenceResults: ActivityOccurrenceResultsResource? = nil) -> RequestBuilder<ActivityOccurrenceResults> {
        var path = "/activity-occurrences/{activity_occurrence_id}/results"
        path = path.replacingOccurrences(of: "{activity_occurrence_id}", with: "\(activityOccurrenceId)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = activityOccurrenceResults?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ActivityOccurrenceResults>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Sets the settings of an activity occurrence
     - parameter activityOccurrenceId: (path) The id of the activity occurrence 
     - parameter settings: (body) The new settings (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setActivityOccurrenceSettings(activityOccurrenceId: Int64, settings: ActivityOccurrenceSettingsResource? = nil, completion: @escaping ((_ data: ActivityOccurrenceResource?, _ error: ErrorResponse?) -> Void)) {
        setActivityOccurrenceSettingsWithRequestBuilder(activityOccurrenceId: activityOccurrenceId, settings: settings).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Sets the settings of an activity occurrence
     - PUT /activity-occurrences/{activity_occurrence_id}/settings
     - <b>Permissions Needed:</b> ACTIVITIES_USER and host or ACTIVITIES_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "settings" : [ {
    "key_name" : "key_name",
    "value" : "value",
    "key" : "key",
    "value_name" : "value_name"
  }, {
    "key_name" : "key_name",
    "value" : "value",
    "key" : "key",
    "value_name" : "value_name"
  } ],
  "challenge_activity_id" : 1,
  "simulated" : false,
  "core_settings" : {
    "non_host_status_control" : false,
    "host_status_control" : false,
    "boot_in_play" : false,
    "leave_in_play" : false,
    "join_in_play" : false,
    "max_players" : 5,
    "results_trust" : "none",
    "custom_launch_address" : "custom_launch_address",
    "min_players" : 5
  },
  "bans" : [ 6, 6 ],
  "entitlement" : {
    "item_id" : 5,
    "price" : 5.63737665663332876420099637471139430999755859375,
    "name" : "name",
    "sku" : "sku",
    "currency_code" : "currency_code"
  },
  "users" : [ {
    "joined_date" : 1,
    "metric" : {
      "user_id" : 6,
      "value" : 7,
      "activity_occurence_id" : 1,
      "tags" : [ "tags", "tags" ]
    },
    "host" : false,
    "left_date" : 1,
    "id" : 7,
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "status" : "present"
  }, {
    "joined_date" : 1,
    "metric" : {
      "user_id" : 6,
      "value" : 7,
      "activity_occurence_id" : 1,
      "tags" : [ "tags", "tags" ]
    },
    "host" : false,
    "left_date" : 1,
    "id" : 7,
    "user" : {
      "avatar_url" : "avatar_url",
      "id" : 9,
      "display_name" : "display_name",
      "username" : "username"
    },
    "status" : "present"
  } ],
  "event_id" : 7,
  "activity_id" : 0,
  "host" : {
    "avatar_url" : "avatar_url",
    "id" : 9,
    "display_name" : "display_name",
    "username" : "username"
  },
  "created_date" : 2,
  "id" : 3,
  "updated_date" : 4,
  "reward_status" : "pending",
  "start_date" : 2,
  "status" : "SETUP"
}}]
     - parameter activityOccurrenceId: (path) The id of the activity occurrence 
     - parameter settings: (body) The new settings (optional)
     - returns: RequestBuilder<ActivityOccurrenceResource> 
     */
    open class func setActivityOccurrenceSettingsWithRequestBuilder(activityOccurrenceId: Int64, settings: ActivityOccurrenceSettingsResource? = nil) -> RequestBuilder<ActivityOccurrenceResource> {
        var path = "/activity-occurrences/{activity_occurrence_id}/settings"
        path = path.replacingOccurrences(of: "{activity_occurrence_id}", with: "\(activityOccurrenceId)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = settings?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ActivityOccurrenceResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set a user's status within an occurrence
     - parameter activityOccurrenceId: (path) The id of the activity occurrence 
     - parameter userId: (path) The id of the user 
     - parameter status: (body) The new status (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setUserStatus(activityOccurrenceId: Int64, userId: String, status: ActivityUserStatusWrapper? = nil, completion: @escaping ((_ data: ActivityUserResource?, _ error: ErrorResponse?) -> Void)) {
        setUserStatusWithRequestBuilder(activityOccurrenceId: activityOccurrenceId, userId: userId, status: status).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Set a user's status within an occurrence
     - PUT /activity-occurrences/{activity_occurrence_id}/users/{user_id}/status
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "joined_date" : 1,
  "metric" : {
    "user_id" : 6,
    "value" : 7,
    "activity_occurence_id" : 1,
    "tags" : [ "tags", "tags" ]
  },
  "host" : false,
  "left_date" : 1,
  "id" : 7,
  "user" : {
    "avatar_url" : "avatar_url",
    "id" : 9,
    "display_name" : "display_name",
    "username" : "username"
  },
  "status" : "present"
}}]
     - parameter activityOccurrenceId: (path) The id of the activity occurrence 
     - parameter userId: (path) The id of the user 
     - parameter status: (body) The new status (optional)
     - returns: RequestBuilder<ActivityUserResource> 
     */
    open class func setUserStatusWithRequestBuilder(activityOccurrenceId: Int64, userId: String, status: ActivityUserStatusWrapper? = nil) -> RequestBuilder<ActivityUserResource> {
        var path = "/activity-occurrences/{activity_occurrence_id}/users/{user_id}/status"
        path = path.replacingOccurrences(of: "{activity_occurrence_id}", with: "\(activityOccurrenceId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{user_id}", with: "\(userId)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = status?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ActivityUserResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update an activity
     - parameter id: (path) The id of the activity 
     - parameter activityResource: (body) The activity resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateActivity(id: Int64, activityResource: ActivityResource? = nil, completion: @escaping ((_ data: ActivityResource?, _ error: ErrorResponse?) -> Void)) {
        updateActivityWithRequestBuilder(id: id, activityResource: activityResource).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update an activity
     - PUT /activities/{id}
     - <b>Permissions Needed:</b> ACTIVITIES_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "entitlements" : [ {
    "item_id" : 5,
    "price" : 5.63737665663332876420099637471139430999755859375,
    "name" : "name",
    "sku" : "sku",
    "currency_code" : "currency_code"
  }, {
    "item_id" : 5,
    "price" : 5.63737665663332876420099637471139430999755859375,
    "name" : "name",
    "sku" : "sku",
    "currency_code" : "currency_code"
  } ],
  "template" : false,
  "reward_set" : {
    "short_description" : "short_description",
    "unique_key" : "unique_key",
    "currency_rewards" : [ {
      "currency_name" : "currency_name",
      "max_rank" : 9,
      "min_rank" : 3,
      "percent" : false,
      "value" : 2.027123023002322,
      "currency_code" : "currency_code"
    }, {
      "currency_name" : "currency_name",
      "max_rank" : 9,
      "min_rank" : 3,
      "percent" : false,
      "value" : 2.027123023002322,
      "currency_code" : "currency_code"
    } ],
    "name" : "name",
    "created_date" : 7,
    "id" : 4,
    "long_description" : "long_description",
    "max_placing" : 6,
    "updated_date" : 7,
    "item_rewards" : [ {
      "quantity" : 1,
      "item_id" : 7,
      "max_rank" : 1,
      "item_name" : "item_name",
      "min_rank" : 1
    }, {
      "quantity" : 1,
      "item_id" : 7,
      "max_rank" : 1,
      "item_name" : "item_name",
      "min_rank" : 1
    } ]
  },
  "settings" : [ {
    "advanced_option" : false,
    "name" : "name",
    "options" : [ {
      "name" : "name",
      "value" : "value"
    }, {
      "name" : "name",
      "value" : "value"
    } ],
    "description" : "description",
    "default_value" : "default_value",
    "type" : "type",
    "key" : "key"
  }, {
    "advanced_option" : false,
    "name" : "name",
    "options" : [ {
      "name" : "name",
      "value" : "value"
    }, {
      "name" : "name",
      "value" : "value"
    } ],
    "description" : "description",
    "default_value" : "default_value",
    "type" : "type",
    "key" : "key"
  } ],
  "short_description" : "short_description",
  "unique_key" : "unique_key",
  "core_settings" : {
    "host_status_control" : false,
    "boot_in_play" : false,
    "leave_in_play" : false,
    "join_in_play" : false,
    "max_players" : 0,
    "results_trust" : "none",
    "custom_launch_address_allowed" : false,
    "host_option" : "admin_only",
    "min_players" : 6
  },
  "launch" : "launch",
  "long_description" : "long_description",
  "type" : "type",
  "leaderboard_strategy" : "leaderboard_strategy",
  "name" : "name",
  "template_id" : "template_id",
  "additional_properties" : {
    "key" : {
      "type" : "type"
    }
  },
  "created_date" : 1,
  "id" : 2,
  "updated_date" : 1
}}]
     - parameter id: (path) The id of the activity 
     - parameter activityResource: (body) The activity resource object (optional)
     - returns: RequestBuilder<ActivityResource> 
     */
    open class func updateActivityWithRequestBuilder(id: Int64, activityResource: ActivityResource? = nil) -> RequestBuilder<ActivityResource> {
        var path = "/activities/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = activityResource?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ActivityResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update the status of an activity occurrence
     - parameter activityOccurrenceId: (path) The id of the activity occurrence 
     - parameter activityOccurrenceStatus: (body) The activity occurrence status object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateActivityOccurrenceStatus(activityOccurrenceId: Int64, activityOccurrenceStatus: ActivityOccurrenceStatusWrapper? = nil, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        updateActivityOccurrenceStatusWithRequestBuilder(activityOccurrenceId: activityOccurrenceId, activityOccurrenceStatus: activityOccurrenceStatus).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Update the status of an activity occurrence
     - PUT /activity-occurrences/{activity_occurrence_id}/status
     - If setting to 'FINISHED' reward will be run based on current metrics that have been recorded already. Alternatively, see results endpoint to finish and record all metrics at once. Can be called by non-host participants if non_host_status_control is true. <br><br><b>Permissions Needed:</b> ACTIVITIES_USER and host or ACTIVITIES_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - parameter activityOccurrenceId: (path) The id of the activity occurrence 
     - parameter activityOccurrenceStatus: (body) The activity occurrence status object (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func updateActivityOccurrenceStatusWithRequestBuilder(activityOccurrenceId: Int64, activityOccurrenceStatus: ActivityOccurrenceStatusWrapper? = nil) -> RequestBuilder<Void> {
        var path = "/activity-occurrences/{activity_occurrence_id}/status"
        path = path.replacingOccurrences(of: "{activity_occurrence_id}", with: "\(activityOccurrenceId)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = activityOccurrenceStatus?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update an activity template
     - parameter id: (path) The id of the template 
     - parameter activityTemplateResource: (body) The activity template resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateActivityTemplate(id: String, activityTemplateResource: TemplateResource? = nil, completion: @escaping ((_ data: TemplateResource?, _ error: ErrorResponse?) -> Void)) {
        updateActivityTemplateWithRequestBuilder(id: id, activityTemplateResource: activityTemplateResource).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update an activity template
     - PUT /activities/templates/{id}
     - <b>Permissions Needed:</b> TEMPLATE_ADMIN
     - OAuth:
       - type: oauth2
       - name: oauth2_client_credentials_grant     - OAuth:
       - type: oauth2
       - name: oauth2_password_grant
     - examples: [{contentType=application/json, example={
  "allow_additional" : false,
  "name" : "name",
  "created_date" : 0,
  "id" : "id",
  "updated_date" : 6,
  "properties" : [ {
    "friendly_name" : "friendly_name",
    "option_value_path" : "path.to.value",
    "option_label_path" : "path.to.label",
    "name" : "name",
    "description" : "description",
    "options_url" : "options_url",
    "type" : "type",
    "field_list" : {
      "property_definition_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ],
      "property_type" : "property_type",
      "property_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ]
    },
    "required" : false
  }, {
    "friendly_name" : "friendly_name",
    "option_value_path" : "path.to.value",
    "option_label_path" : "path.to.label",
    "name" : "name",
    "description" : "description",
    "options_url" : "options_url",
    "type" : "type",
    "field_list" : {
      "property_definition_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ],
      "property_type" : "property_type",
      "property_fields" : [ {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      }, {
        "inner_type" : "integer",
        "valid_values" : [ "valid_values", "valid_values" ],
        "name" : "name",
        "description" : "description",
        "type" : "integer",
        "inner_type_fields" : [ null, null ],
        "required" : false
      } ]
    },
    "required" : false
  } ]
}}]
     - parameter id: (path) The id of the template 
     - parameter activityTemplateResource: (body) The activity template resource object (optional)
     - returns: RequestBuilder<TemplateResource> 
     */
    open class func updateActivityTemplateWithRequestBuilder(id: String, activityTemplateResource: TemplateResource? = nil) -> RequestBuilder<TemplateResource> {
        var path = "/activities/templates/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = JSAPIAPI.basePath + path
        let parameters = activityTemplateResource?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TemplateResource>.Type = JSAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
