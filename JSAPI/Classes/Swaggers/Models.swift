// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> Any
}

public enum ErrorResponse : Error {
    case Error(Int, Data?, Error)
}

open class Response<T> {
    open let statusCode: Int
    open let header: [String: String]
    open let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: HTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = Int()
class Decoders {
    static fileprivate var decoders = Dictionary<String, ((AnyObject, AnyObject?) -> AnyObject)>()

    static func addDecoder<T>(clazz: T.Type, decoder: @escaping ((AnyObject, AnyObject?) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0, $1) as AnyObject }
    }

    static func decode<T>(clazz: T.Type, discriminator: String, source: AnyObject) -> T {
        let key = discriminator;
        if let decoder = decoders[key] {
            return decoder(source, nil) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decode<T>(clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0, instance: nil) }
    }

    static func decode<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value, instance: nil)
        }
        return dictionary
    }

    static func decode<T>(clazz: T.Type, source: AnyObject, instance: AnyObject?) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return (source as! NSNumber).int32Value as! T
        }
        if T.self is Int64.Type && source is NSNumber {
            return (source as! NSNumber).int64Value as! T
        }
        if T.self is UUID.Type && source is String {
            return UUID(uuidString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is Data.Type && source is String {
            return Data(base64Encoded: source as! String) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source, instance) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source, instance: nil)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    private static var __once: () = {
        let formatters = [
            "yyyy-MM-dd",
            "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss'Z'",
            "yyyy-MM-dd'T'HH:mm:ss.SSS",
            "yyyy-MM-dd HH:mm:ss"
        ].map { (format: String) -> DateFormatter in
            let formatter = DateFormatter()
            formatter.locale = Locale(identifier: "en_US_POSIX")
            formatter.dateFormat = format
            return formatter
        }
        // Decoder for Date
        Decoders.addDecoder(clazz: Date.self) { (source: AnyObject, instance: AnyObject?) -> Date in
           if let sourceString = source as? String {
                for formatter in formatters {
                    if let date = formatter.date(from: sourceString) {
                        return date
                    }
                }
            }
            if let sourceInt = source as? Int64 {
                // treat as a java date
                return Date(timeIntervalSince1970: Double(sourceInt / 1000) )
            }
            fatalError("formatter failed to parse \(source)")
        } 

        // Decoder for [AchievementDefinitionResource]
        Decoders.addDecoder(clazz: [AchievementDefinitionResource].self) { (source: AnyObject, instance: AnyObject?) -> [AchievementDefinitionResource] in
            return Decoders.decode(clazz: [AchievementDefinitionResource].self, source: source)
        }
        // Decoder for AchievementDefinitionResource
        Decoders.addDecoder(clazz: AchievementDefinitionResource.self) { (source: AnyObject, instance: AnyObject?) -> AchievementDefinitionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? AchievementDefinitionResource() : instance as! AchievementDefinitionResource
            
            result.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.hidden = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hidden"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.requiredProgress = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["required_progress"] as AnyObject?)
            result.ruleId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rule_id"] as AnyObject?)
            result.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            result.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            result.triggerEventName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trigger_event_name"] as AnyObject?)
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return result
        }


        // Decoder for [ActionResource]
        Decoders.addDecoder(clazz: [ActionResource].self) { (source: AnyObject, instance: AnyObject?) -> [ActionResource] in
            return Decoders.decode(clazz: [ActionResource].self, source: source)
        }
        // Decoder for ActionResource
        Decoders.addDecoder(clazz: ActionResource.self) { (source: AnyObject, instance: AnyObject?) -> ActionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ActionResource() : instance as! ActionResource
            
            if let category = sourceDictionary["category"] as? String { 
                result.category = ActionResource.Category(rawValue: (category))
            }
            
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            result.variables = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["variables"] as AnyObject?)
            return result
        }


        // Decoder for [ActionVariableResource]
        Decoders.addDecoder(clazz: [ActionVariableResource].self) { (source: AnyObject, instance: AnyObject?) -> [ActionVariableResource] in
            return Decoders.decode(clazz: [ActionVariableResource].self, source: source)
        }
        // Decoder for ActionVariableResource
        Decoders.addDecoder(clazz: ActionVariableResource.self) { (source: AnyObject, instance: AnyObject?) -> ActionVariableResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ActionVariableResource() : instance as! ActionVariableResource
            
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result._optional = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["optional"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return result
        }


        // Decoder for [ActivityEntitlementResource]
        Decoders.addDecoder(clazz: [ActivityEntitlementResource].self) { (source: AnyObject, instance: AnyObject?) -> [ActivityEntitlementResource] in
            return Decoders.decode(clazz: [ActivityEntitlementResource].self, source: source)
        }
        // Decoder for ActivityEntitlementResource
        Decoders.addDecoder(clazz: ActivityEntitlementResource.self) { (source: AnyObject, instance: AnyObject?) -> ActivityEntitlementResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ActivityEntitlementResource() : instance as! ActivityEntitlementResource
            
            result.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"] as AnyObject?)
            result.itemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["item_id"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.price = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price"] as AnyObject?)
            result.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"] as AnyObject?)
            return result
        }


        // Decoder for [ActivityOccurrenceCreationFailure]
        Decoders.addDecoder(clazz: [ActivityOccurrenceCreationFailure].self) { (source: AnyObject, instance: AnyObject?) -> [ActivityOccurrenceCreationFailure] in
            return Decoders.decode(clazz: [ActivityOccurrenceCreationFailure].self, source: source)
        }
        // Decoder for ActivityOccurrenceCreationFailure
        Decoders.addDecoder(clazz: ActivityOccurrenceCreationFailure.self) { (source: AnyObject, instance: AnyObject?) -> ActivityOccurrenceCreationFailure in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ActivityOccurrenceCreationFailure() : instance as! ActivityOccurrenceCreationFailure
            
            result.userResults = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["user_results"] as AnyObject?)
            return result
        }


        // Decoder for [ActivityOccurrenceJoinResult]
        Decoders.addDecoder(clazz: [ActivityOccurrenceJoinResult].self) { (source: AnyObject, instance: AnyObject?) -> [ActivityOccurrenceJoinResult] in
            return Decoders.decode(clazz: [ActivityOccurrenceJoinResult].self, source: source)
        }
        // Decoder for ActivityOccurrenceJoinResult
        Decoders.addDecoder(clazz: ActivityOccurrenceJoinResult.self) { (source: AnyObject, instance: AnyObject?) -> ActivityOccurrenceJoinResult in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ActivityOccurrenceJoinResult() : instance as! ActivityOccurrenceJoinResult
            
            result.entitlement = Decoders.decodeOptional(clazz: ActivityEntitlementResource.self, source: sourceDictionary["entitlement"] as AnyObject?)
            result.errorCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["error_code"] as AnyObject?)
            result.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"] as AnyObject?)
            result.userId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["user_id"] as AnyObject?)
            return result
        }


        // Decoder for [ActivityOccurrenceResource]
        Decoders.addDecoder(clazz: [ActivityOccurrenceResource].self) { (source: AnyObject, instance: AnyObject?) -> [ActivityOccurrenceResource] in
            return Decoders.decode(clazz: [ActivityOccurrenceResource].self, source: source)
        }
        // Decoder for ActivityOccurrenceResource
        Decoders.addDecoder(clazz: ActivityOccurrenceResource.self) { (source: AnyObject, instance: AnyObject?) -> ActivityOccurrenceResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ActivityOccurrenceResource() : instance as! ActivityOccurrenceResource
            
            result.activityId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["activity_id"] as AnyObject?)
            result.challengeActivityId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["challenge_activity_id"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.entitlement = Decoders.decodeOptional(clazz: ActivityEntitlementResource.self, source: sourceDictionary["entitlement"] as AnyObject?)
            result.eventId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["event_id"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            if let rewardStatus = sourceDictionary["reward_status"] as? String { 
                result.rewardStatus = ActivityOccurrenceResource.RewardStatus(rawValue: (rewardStatus))
            }
            
            result.settings = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["settings"] as AnyObject?)
            result.simulated = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["simulated"] as AnyObject?)
            result.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["start_date"] as AnyObject?)
            if let status = sourceDictionary["status"] as? String { 
                result.status = ActivityOccurrenceResource.Status(rawValue: (status))
            }
            
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            result.users = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["users"] as AnyObject?)
            return result
        }


        // Decoder for [ActivityOccurrenceResults]
        Decoders.addDecoder(clazz: [ActivityOccurrenceResults].self) { (source: AnyObject, instance: AnyObject?) -> [ActivityOccurrenceResults] in
            return Decoders.decode(clazz: [ActivityOccurrenceResults].self, source: source)
        }
        // Decoder for ActivityOccurrenceResults
        Decoders.addDecoder(clazz: ActivityOccurrenceResults.self) { (source: AnyObject, instance: AnyObject?) -> ActivityOccurrenceResults in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ActivityOccurrenceResults() : instance as! ActivityOccurrenceResults
            
            result.users = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["users"] as AnyObject?)
            return result
        }


        // Decoder for [ActivityOccurrenceResultsResource]
        Decoders.addDecoder(clazz: [ActivityOccurrenceResultsResource].self) { (source: AnyObject, instance: AnyObject?) -> [ActivityOccurrenceResultsResource] in
            return Decoders.decode(clazz: [ActivityOccurrenceResultsResource].self, source: source)
        }
        // Decoder for ActivityOccurrenceResultsResource
        Decoders.addDecoder(clazz: ActivityOccurrenceResultsResource.self) { (source: AnyObject, instance: AnyObject?) -> ActivityOccurrenceResultsResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ActivityOccurrenceResultsResource() : instance as! ActivityOccurrenceResultsResource
            
            result.users = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["users"] as AnyObject?)
            return result
        }


        // Decoder for [ActivityResource]
        Decoders.addDecoder(clazz: [ActivityResource].self) { (source: AnyObject, instance: AnyObject?) -> [ActivityResource] in
            return Decoders.decode(clazz: [ActivityResource].self, source: source)
        }
        // Decoder for ActivityResource
        Decoders.addDecoder(clazz: ActivityResource.self) { (source: AnyObject, instance: AnyObject?) -> ActivityResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ActivityResource() : instance as! ActivityResource
            
            result.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.entitlements = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entitlements"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            result.launch = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["launch"] as AnyObject?)
            result.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.rewardSet = Decoders.decodeOptional(clazz: RewardSetResource.self, source: sourceDictionary["reward_set"] as AnyObject?)
            result.settings = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["settings"] as AnyObject?)
            result.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"] as AnyObject?)
            result.template = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["template"] as AnyObject?)
            result.templateId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template_id"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.uniqueKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_key"] as AnyObject?)
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return result
        }


        // Decoder for [ActivityUserResource]
        Decoders.addDecoder(clazz: [ActivityUserResource].self) { (source: AnyObject, instance: AnyObject?) -> [ActivityUserResource] in
            return Decoders.decode(clazz: [ActivityUserResource].self, source: source)
        }
        // Decoder for ActivityUserResource
        Decoders.addDecoder(clazz: ActivityUserResource.self) { (source: AnyObject, instance: AnyObject?) -> ActivityUserResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ActivityUserResource() : instance as! ActivityUserResource
            
            result.host = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["host"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            result.joinedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["joined_date"] as AnyObject?)
            result.leftDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["left_date"] as AnyObject?)
            result.metric = Decoders.decodeOptional(clazz: MetricResource.self, source: sourceDictionary["metric"] as AnyObject?)
            if let status = sourceDictionary["status"] as? String { 
                result.status = ActivityUserResource.Status(rawValue: (status))
            }
            
            result.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"] as AnyObject?)
            return result
        }


        // Decoder for [AddressResource]
        Decoders.addDecoder(clazz: [AddressResource].self) { (source: AnyObject, instance: AnyObject?) -> [AddressResource] in
            return Decoders.decode(clazz: [AddressResource].self, source: source)
        }
        // Decoder for AddressResource
        Decoders.addDecoder(clazz: AddressResource.self) { (source: AnyObject, instance: AnyObject?) -> AddressResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? AddressResource() : instance as! AddressResource
            
            result.address1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address1"] as AnyObject?)
            result.address2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address2"] as AnyObject?)
            result.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"] as AnyObject?)
            result.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_code"] as AnyObject?)
            result.postalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["postal_code"] as AnyObject?)
            result.stateCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state_code"] as AnyObject?)
            return result
        }


        // Decoder for [AggregateCountResource]
        Decoders.addDecoder(clazz: [AggregateCountResource].self) { (source: AnyObject, instance: AnyObject?) -> [AggregateCountResource] in
            return Decoders.decode(clazz: [AggregateCountResource].self, source: source)
        }
        // Decoder for AggregateCountResource
        Decoders.addDecoder(clazz: AggregateCountResource.self) { (source: AnyObject, instance: AnyObject?) -> AggregateCountResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? AggregateCountResource() : instance as! AggregateCountResource
            
            result.count = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["count"] as AnyObject?)
            result.date = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["date"] as AnyObject?)
            return result
        }


        // Decoder for [AggregateInvoiceReportResource]
        Decoders.addDecoder(clazz: [AggregateInvoiceReportResource].self) { (source: AnyObject, instance: AnyObject?) -> [AggregateInvoiceReportResource] in
            return Decoders.decode(clazz: [AggregateInvoiceReportResource].self, source: source)
        }
        // Decoder for AggregateInvoiceReportResource
        Decoders.addDecoder(clazz: AggregateInvoiceReportResource.self) { (source: AnyObject, instance: AnyObject?) -> AggregateInvoiceReportResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? AggregateInvoiceReportResource() : instance as! AggregateInvoiceReportResource
            
            result.count = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["count"] as AnyObject?)
            result.date = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["date"] as AnyObject?)
            result.revenue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["revenue"] as AnyObject?)
            result.userCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["user_count"] as AnyObject?)
            return result
        }


        // Decoder for [AmazonS3Activity]
        Decoders.addDecoder(clazz: [AmazonS3Activity].self) { (source: AnyObject, instance: AnyObject?) -> [AmazonS3Activity] in
            return Decoders.decode(clazz: [AmazonS3Activity].self, source: source)
        }
        // Decoder for AmazonS3Activity
        Decoders.addDecoder(clazz: AmazonS3Activity.self) { (source: AnyObject, instance: AnyObject?) -> AmazonS3Activity in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? AmazonS3Activity() : instance as! AmazonS3Activity
            
            result.action = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["action"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.filename = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["filename"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            result.objectKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["object_key"] as AnyObject?)
            result.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?)
            result.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"] as AnyObject?)
            return result
        }


        // Decoder for [AnswerResource]
        Decoders.addDecoder(clazz: [AnswerResource].self) { (source: AnyObject, instance: AnyObject?) -> [AnswerResource] in
            return Decoders.decode(clazz: [AnswerResource].self, source: source)
        }
        // Decoder for AnswerResource
        Decoders.addDecoder(clazz: AnswerResource.self) { (source: AnyObject, instance: AnyObject?) -> AnswerResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? AnswerResource() : instance as! AnswerResource
            
            result.answer = Decoders.decodeOptional(clazz: Property.self, source: sourceDictionary["answer"] as AnyObject?)
            result.correct = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["correct"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            return result
        }


        // Decoder for [ApplyPaymentRequest]
        Decoders.addDecoder(clazz: [ApplyPaymentRequest].self) { (source: AnyObject, instance: AnyObject?) -> [ApplyPaymentRequest] in
            return Decoders.decode(clazz: [ApplyPaymentRequest].self, source: source)
        }
        // Decoder for ApplyPaymentRequest
        Decoders.addDecoder(clazz: ApplyPaymentRequest.self) { (source: AnyObject, instance: AnyObject?) -> ApplyPaymentRequest in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ApplyPaymentRequest() : instance as! ApplyPaymentRequest
            
            result.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"] as AnyObject?)
            result.receipt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["receipt"] as AnyObject?)
            result.transactionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["transaction_id"] as AnyObject?)
            return result
        }


        // Decoder for [ArticleResource]
        Decoders.addDecoder(clazz: [ArticleResource].self) { (source: AnyObject, instance: AnyObject?) -> [ArticleResource] in
            return Decoders.decode(clazz: [ArticleResource].self, source: source)
        }
        // Decoder for ArticleResource
        Decoders.addDecoder(clazz: ArticleResource.self) { (source: AnyObject, instance: AnyObject?) -> ArticleResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ArticleResource() : instance as! ArticleResource
            
            result.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"] as AnyObject?)
            result.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            result.body = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["body"] as AnyObject?)
            result.category = Decoders.decodeOptional(clazz: NestedCategory.self, source: sourceDictionary["category"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            result.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            result.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?)
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return result
        }


        // Decoder for [ArtistResource]
        Decoders.addDecoder(clazz: [ArtistResource].self) { (source: AnyObject, instance: AnyObject?) -> [ArtistResource] in
            return Decoders.decode(clazz: [ArtistResource].self, source: source)
        }
        // Decoder for ArtistResource
        Decoders.addDecoder(clazz: ArtistResource.self) { (source: AnyObject, instance: AnyObject?) -> ArtistResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ArtistResource() : instance as! ArtistResource
            
            result.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            result.born = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["born"] as AnyObject?)
            result.contributionCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["contribution_count"] as AnyObject?)
            result.contributions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["contributions"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.died = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["died"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            result.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.priority = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["priority"] as AnyObject?)
            result.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"] as AnyObject?)
            result.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return result
        }


        // Decoder for [AvailableSettingResource]
        Decoders.addDecoder(clazz: [AvailableSettingResource].self) { (source: AnyObject, instance: AnyObject?) -> [AvailableSettingResource] in
            return Decoders.decode(clazz: [AvailableSettingResource].self, source: source)
        }
        // Decoder for AvailableSettingResource
        Decoders.addDecoder(clazz: AvailableSettingResource.self) { (source: AnyObject, instance: AnyObject?) -> AvailableSettingResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? AvailableSettingResource() : instance as! AvailableSettingResource
            
            result.advancedOption = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["advanced_option"] as AnyObject?)
            result.defaultValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["default_value"] as AnyObject?)
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.options = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["options"] as AnyObject?)
            return result
        }


        // Decoder for [BareActivityResource]
        Decoders.addDecoder(clazz: [BareActivityResource].self) { (source: AnyObject, instance: AnyObject?) -> [BareActivityResource] in
            return Decoders.decode(clazz: [BareActivityResource].self, source: source)
        }
        // Decoder for BareActivityResource
        Decoders.addDecoder(clazz: BareActivityResource.self) { (source: AnyObject, instance: AnyObject?) -> BareActivityResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? BareActivityResource() : instance as! BareActivityResource
            
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            result.launch = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["launch"] as AnyObject?)
            result.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"] as AnyObject?)
            result.template = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["template"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.uniqueKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_key"] as AnyObject?)
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return result
        }


        // Decoder for [BareChallengeActivityResource]
        Decoders.addDecoder(clazz: [BareChallengeActivityResource].self) { (source: AnyObject, instance: AnyObject?) -> [BareChallengeActivityResource] in
            return Decoders.decode(clazz: [BareChallengeActivityResource].self, source: source)
        }
        // Decoder for BareChallengeActivityResource
        Decoders.addDecoder(clazz: BareChallengeActivityResource.self) { (source: AnyObject, instance: AnyObject?) -> BareChallengeActivityResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? BareChallengeActivityResource() : instance as! BareChallengeActivityResource
            
            result.activityId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["activity_id"] as AnyObject?)
            result.challengeId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["challenge_id"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            return result
        }


        // Decoder for [Batch]
        Decoders.addDecoder(clazz: [Batch].self) { (source: AnyObject, instance: AnyObject?) -> [Batch] in
            return Decoders.decode(clazz: [Batch].self, source: source)
        }
        // Decoder for Batch
        Decoders.addDecoder(clazz: Batch.self) { (source: AnyObject, instance: AnyObject?) -> Batch in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Batch() : instance as! Batch
            
            result.batch = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["batch"] as AnyObject?)
            result.timeout = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["timeout"] as AnyObject?)
            return result
        }


        // Decoder for [BatchRequest]
        Decoders.addDecoder(clazz: [BatchRequest].self) { (source: AnyObject, instance: AnyObject?) -> [BatchRequest] in
            return Decoders.decode(clazz: [BatchRequest].self, source: source)
        }
        // Decoder for BatchRequest
        Decoders.addDecoder(clazz: BatchRequest.self) { (source: AnyObject, instance: AnyObject?) -> BatchRequest in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? BatchRequest() : instance as! BatchRequest
            
            result.body = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["body"] as AnyObject?)
            result.contentType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["content_type"] as AnyObject?)
            result.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"] as AnyObject?)
            result.timeout = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["timeout"] as AnyObject?)
            result.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"] as AnyObject?)
            result.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"] as AnyObject?)
            return result
        }


        // Decoder for [BatchResult]
        Decoders.addDecoder(clazz: [BatchResult].self) { (source: AnyObject, instance: AnyObject?) -> [BatchResult] in
            return Decoders.decode(clazz: [BatchResult].self, source: source)
        }
        // Decoder for BatchResult
        Decoders.addDecoder(clazz: BatchResult.self) { (source: AnyObject, instance: AnyObject?) -> BatchResult in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? BatchResult() : instance as! BatchResult
            
            result.batchReturn = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["batch_return"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return result
        }


        // Decoder for [BatchReturn]
        Decoders.addDecoder(clazz: [BatchReturn].self) { (source: AnyObject, instance: AnyObject?) -> [BatchReturn] in
            return Decoders.decode(clazz: [BatchReturn].self, source: source)
        }
        // Decoder for BatchReturn
        Decoders.addDecoder(clazz: BatchReturn.self) { (source: AnyObject, instance: AnyObject?) -> BatchReturn in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? BatchReturn() : instance as! BatchReturn
            
            result.body = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["body"] as AnyObject?)
            result.code = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["code"] as AnyObject?)
            result.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"] as AnyObject?)
            return result
        }


        // Decoder for [Behavior]
        Decoders.addDecoder(clazz: [Behavior].self) { (source: AnyObject, instance: AnyObject?) -> [Behavior] in
            return Decoders.decode(clazz: [Behavior].self, source: source)
        }
        // Decoder for Behavior
        Decoders.addDecoder(clazz: Behavior.self) { (source: AnyObject, instance: AnyObject?) -> Behavior in
            let sourceDictionary = source as! [AnyHashable: Any]
            // Check discriminator to support inheritance
            if let discriminator = sourceDictionary["type_hint"] as? String, instance == nil && discriminator != "Behavior" {
                return Decoders.decode(clazz: Behavior.self, discriminator: discriminator, source: source)
            }
            let result = instance == nil ? Behavior() : instance as! Behavior
            
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"] as AnyObject?)
            return result
        }


        // Decoder for [BehaviorDefinitionResource]
        Decoders.addDecoder(clazz: [BehaviorDefinitionResource].self) { (source: AnyObject, instance: AnyObject?) -> [BehaviorDefinitionResource] in
            return Decoders.decode(clazz: [BehaviorDefinitionResource].self, source: source)
        }
        // Decoder for BehaviorDefinitionResource
        Decoders.addDecoder(clazz: BehaviorDefinitionResource.self) { (source: AnyObject, instance: AnyObject?) -> BehaviorDefinitionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? BehaviorDefinitionResource() : instance as! BehaviorDefinitionResource
            
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.prerequisiteBehaviors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["prerequisite_behaviors"] as AnyObject?)
            result.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"] as AnyObject?)
            result.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"] as AnyObject?)
            return result
        }


        // Decoder for [BillingReport]
        Decoders.addDecoder(clazz: [BillingReport].self) { (source: AnyObject, instance: AnyObject?) -> [BillingReport] in
            return Decoders.decode(clazz: [BillingReport].self, source: source)
        }
        // Decoder for BillingReport
        Decoders.addDecoder(clazz: BillingReport.self) { (source: AnyObject, instance: AnyObject?) -> BillingReport in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? BillingReport() : instance as! BillingReport
            
            result.created = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.lastKnownFailures = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["last_known_failures"] as AnyObject?)
            result.statistics = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["statistics"] as AnyObject?)
            return result
        }


        // Decoder for [BooleanResource]
        Decoders.addDecoder(clazz: [BooleanResource].self) { (source: AnyObject, instance: AnyObject?) -> [BooleanResource] in
            return Decoders.decode(clazz: [BooleanResource].self, source: source)
        }
        // Decoder for BooleanResource
        Decoders.addDecoder(clazz: BooleanResource.self) { (source: AnyObject, instance: AnyObject?) -> BooleanResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? BooleanResource() : instance as! BooleanResource
            
            result.value = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["value"] as AnyObject?)
            return result
        }


        // Decoder for [BreCategoryResource]
        Decoders.addDecoder(clazz: [BreCategoryResource].self) { (source: AnyObject, instance: AnyObject?) -> [BreCategoryResource] in
            return Decoders.decode(clazz: [BreCategoryResource].self, source: source)
        }
        // Decoder for BreCategoryResource
        Decoders.addDecoder(clazz: BreCategoryResource.self) { (source: AnyObject, instance: AnyObject?) -> BreCategoryResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? BreCategoryResource() : instance as! BreCategoryResource
            
            result.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            return result
        }


        // Decoder for [BreEvent]
        Decoders.addDecoder(clazz: [BreEvent].self) { (source: AnyObject, instance: AnyObject?) -> [BreEvent] in
            return Decoders.decode(clazz: [BreEvent].self, source: source)
        }
        // Decoder for BreEvent
        Decoders.addDecoder(clazz: BreEvent.self) { (source: AnyObject, instance: AnyObject?) -> BreEvent in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? BreEvent() : instance as! BreEvent
            
            result.eventName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["event_name"] as AnyObject?)
            result.params = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["params"] as AnyObject?)
            return result
        }


        // Decoder for [BreEventLog]
        Decoders.addDecoder(clazz: [BreEventLog].self) { (source: AnyObject, instance: AnyObject?) -> [BreEventLog] in
            return Decoders.decode(clazz: [BreEventLog].self, source: source)
        }
        // Decoder for BreEventLog
        Decoders.addDecoder(clazz: BreEventLog.self) { (source: AnyObject, instance: AnyObject?) -> BreEventLog in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? BreEventLog() : instance as! BreEventLog
            
            result.customer = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["customer"] as AnyObject?)
            result.eventId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["event_id"] as AnyObject?)
            result.eventName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["event_name"] as AnyObject?)
            result.eventStartDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["event_start_date"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.parameters = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["parameters"] as AnyObject?)
            result.rules = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["rules"] as AnyObject?)
            return result
        }


        // Decoder for [BreGlobalResource]
        Decoders.addDecoder(clazz: [BreGlobalResource].self) { (source: AnyObject, instance: AnyObject?) -> [BreGlobalResource] in
            return Decoders.decode(clazz: [BreGlobalResource].self, source: source)
        }
        // Decoder for BreGlobalResource
        Decoders.addDecoder(clazz: BreGlobalResource.self) { (source: AnyObject, instance: AnyObject?) -> BreGlobalResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? BreGlobalResource() : instance as! BreGlobalResource
            
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.scopes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["scopes"] as AnyObject?)
            result.systemGlobal = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["system_global"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return result
        }


        // Decoder for [BreGlobalScopeDefinition]
        Decoders.addDecoder(clazz: [BreGlobalScopeDefinition].self) { (source: AnyObject, instance: AnyObject?) -> [BreGlobalScopeDefinition] in
            return Decoders.decode(clazz: [BreGlobalScopeDefinition].self, source: source)
        }
        // Decoder for BreGlobalScopeDefinition
        Decoders.addDecoder(clazz: BreGlobalScopeDefinition.self) { (source: AnyObject, instance: AnyObject?) -> BreGlobalScopeDefinition in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? BreGlobalScopeDefinition() : instance as! BreGlobalScopeDefinition
            
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return result
        }


        // Decoder for [BreRule]
        Decoders.addDecoder(clazz: [BreRule].self) { (source: AnyObject, instance: AnyObject?) -> [BreRule] in
            return Decoders.decode(clazz: [BreRule].self, source: source)
        }
        // Decoder for BreRule
        Decoders.addDecoder(clazz: BreRule.self) { (source: AnyObject, instance: AnyObject?) -> BreRule in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? BreRule() : instance as! BreRule
            
            result.actions = Decoders.decodeOptional(clazz: ActionResource.self, source: sourceDictionary["actions"] as AnyObject?)
            result.condition = Decoders.decodeOptional(clazz: PredicateOperation.self, source: sourceDictionary["condition"] as AnyObject?)
            result.conditionText = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["condition_text"] as AnyObject?)
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"] as AnyObject?)
            result.endDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["end_date"] as AnyObject?)
            result.eventName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["event_name"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sort"] as AnyObject?)
            result.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["start_date"] as AnyObject?)
            result.systemRule = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["system_rule"] as AnyObject?)
            return result
        }


        // Decoder for [BreRuleLog]
        Decoders.addDecoder(clazz: [BreRuleLog].self) { (source: AnyObject, instance: AnyObject?) -> [BreRuleLog] in
            return Decoders.decode(clazz: [BreRuleLog].self, source: source)
        }
        // Decoder for BreRuleLog
        Decoders.addDecoder(clazz: BreRuleLog.self) { (source: AnyObject, instance: AnyObject?) -> BreRuleLog in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? BreRuleLog() : instance as! BreRuleLog
            
            result.ran = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ran"] as AnyObject?)
            result.reason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reason"] as AnyObject?)
            result.ruleEndDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["rule_end_date"] as AnyObject?)
            result.ruleId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rule_id"] as AnyObject?)
            result.ruleName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rule_name"] as AnyObject?)
            result.ruleStartDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["rule_start_date"] as AnyObject?)
            return result
        }


        // Decoder for [BreTriggerParameterDefinition]
        Decoders.addDecoder(clazz: [BreTriggerParameterDefinition].self) { (source: AnyObject, instance: AnyObject?) -> [BreTriggerParameterDefinition] in
            return Decoders.decode(clazz: [BreTriggerParameterDefinition].self, source: source)
        }
        // Decoder for BreTriggerParameterDefinition
        Decoders.addDecoder(clazz: BreTriggerParameterDefinition.self) { (source: AnyObject, instance: AnyObject?) -> BreTriggerParameterDefinition in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? BreTriggerParameterDefinition() : instance as! BreTriggerParameterDefinition
            
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result._optional = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["optional"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return result
        }


        // Decoder for [BreTriggerResource]
        Decoders.addDecoder(clazz: [BreTriggerResource].self) { (source: AnyObject, instance: AnyObject?) -> [BreTriggerResource] in
            return Decoders.decode(clazz: [BreTriggerResource].self, source: source)
        }
        // Decoder for BreTriggerResource
        Decoders.addDecoder(clazz: BreTriggerResource.self) { (source: AnyObject, instance: AnyObject?) -> BreTriggerResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? BreTriggerResource() : instance as! BreTriggerResource
            
            if let category = sourceDictionary["category"] as? String { 
                result.category = BreTriggerResource.Category(rawValue: (category))
            }
            
            result.eventName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["event_name"] as AnyObject?)
            result.parameters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["parameters"] as AnyObject?)
            result.systemTrigger = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["system_trigger"] as AnyObject?)
            result.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            result.triggerDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trigger_description"] as AnyObject?)
            result.triggerName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trigger_name"] as AnyObject?)
            return result
        }


        // Decoder for [BroadcastableEvent]
        Decoders.addDecoder(clazz: [BroadcastableEvent].self) { (source: AnyObject, instance: AnyObject?) -> [BroadcastableEvent] in
            return Decoders.decode(clazz: [BroadcastableEvent].self, source: source)
        }
        // Decoder for BroadcastableEvent
        Decoders.addDecoder(clazz: BroadcastableEvent.self) { (source: AnyObject, instance: AnyObject?) -> BroadcastableEvent in
            let sourceDictionary = source as! [AnyHashable: Any]
            // Check discriminator to support inheritance
            if let discriminator = sourceDictionary["type"] as? String, instance == nil && discriminator != "BroadcastableEvent" {
                return Decoders.decode(clazz: BroadcastableEvent.self, discriminator: discriminator, source: source)
            }
            let result = instance == nil ? BroadcastableEvent() : instance as! BroadcastableEvent
            
            result.client = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["client"] as AnyObject?)
            result.customer = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["customer"] as AnyObject?)
            result.doNotBroadcast = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["do_not_broadcast"] as AnyObject?)
            result.section = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["section"] as AnyObject?)
            result.source = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["source"] as AnyObject?)
            result.specifics = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["specifics"] as AnyObject?)
            result.synchronous = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["synchronous"] as AnyObject?)
            result.timestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["timestamp"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return result
        }


        // Decoder for [BundledSku]
        Decoders.addDecoder(clazz: [BundledSku].self) { (source: AnyObject, instance: AnyObject?) -> [BundledSku] in
            return Decoders.decode(clazz: [BundledSku].self, source: source)
        }
        // Decoder for BundledSku
        Decoders.addDecoder(clazz: BundledSku.self) { (source: AnyObject, instance: AnyObject?) -> BundledSku in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? BundledSku() : instance as! BundledSku
            
            result.priceOverride = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price_override"] as AnyObject?)
            result.quantity = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["quantity"] as AnyObject?)
            result.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"] as AnyObject?)
            return result
        }


        // Decoder for [CampaignResource]
        Decoders.addDecoder(clazz: [CampaignResource].self) { (source: AnyObject, instance: AnyObject?) -> [CampaignResource] in
            return Decoders.decode(clazz: [CampaignResource].self, source: source)
        }
        // Decoder for CampaignResource
        Decoders.addDecoder(clazz: CampaignResource.self) { (source: AnyObject, instance: AnyObject?) -> CampaignResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? CampaignResource() : instance as! CampaignResource
            
            result.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"] as AnyObject?)
            result.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            result.leaderboardStrategy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["leaderboard_strategy"] as AnyObject?)
            result.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.nextChallenge = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["next_challenge"] as AnyObject?)
            result.nextChallengeDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["next_challenge_date"] as AnyObject?)
            result.rewardSet = Decoders.decodeOptional(clazz: RewardSetResource.self, source: sourceDictionary["reward_set"] as AnyObject?)
            if let rewardStatus = sourceDictionary["reward_status"] as? String { 
                result.rewardStatus = CampaignResource.RewardStatus(rawValue: (rewardStatus))
            }
            
            result.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"] as AnyObject?)
            result.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return result
        }


        // Decoder for [Cart]
        Decoders.addDecoder(clazz: [Cart].self) { (source: AnyObject, instance: AnyObject?) -> [Cart] in
            return Decoders.decode(clazz: [Cart].self, source: source)
        }
        // Decoder for Cart
        Decoders.addDecoder(clazz: Cart.self) { (source: AnyObject, instance: AnyObject?) -> Cart in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Cart() : instance as! Cart
            
            result.availableShippingOptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["available_shipping_options"] as AnyObject?)
            result.countryTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["country_tax"] as AnyObject?)
            result.coupons = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["coupons"] as AnyObject?)
            result.created = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created"] as AnyObject?)
            result.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"] as AnyObject?)
            result.discountTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["discount_total"] as AnyObject?)
            result.errorCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["error_code"] as AnyObject?)
            result.errorMessage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error_message"] as AnyObject?)
            result.grandTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["grand_total"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.invoiceId = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["invoice_id"] as AnyObject?)
            result.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"] as AnyObject?)
            result.owner = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["owner"] as AnyObject?)
            result.selectedShippingOptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["selected_shipping_options"] as AnyObject?)
            result.shippable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["shippable"] as AnyObject?)
            result.shippingAddress = Decoders.decodeOptional(clazz: CartShippingAddressRequest.self, source: sourceDictionary["shipping_address"] as AnyObject?)
            result.shippingCost = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["shipping_cost"] as AnyObject?)
            result.stateTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["state_tax"] as AnyObject?)
            if let status = sourceDictionary["status"] as? String { 
                result.status = Cart.Status(rawValue: (status))
            }
            
            result.subtotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["subtotal"] as AnyObject?)
            result.updated = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated"] as AnyObject?)
            return result
        }


        // Decoder for [CartItemRequest]
        Decoders.addDecoder(clazz: [CartItemRequest].self) { (source: AnyObject, instance: AnyObject?) -> [CartItemRequest] in
            return Decoders.decode(clazz: [CartItemRequest].self, source: source)
        }
        // Decoder for CartItemRequest
        Decoders.addDecoder(clazz: CartItemRequest.self) { (source: AnyObject, instance: AnyObject?) -> CartItemRequest in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? CartItemRequest() : instance as! CartItemRequest
            
            result.affiliateKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["affiliate_key"] as AnyObject?)
            result.catalogSku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["catalog_sku"] as AnyObject?)
            result.priceOverride = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price_override"] as AnyObject?)
            result.quantity = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["quantity"] as AnyObject?)
            return result
        }


        // Decoder for [CartLineItem]
        Decoders.addDecoder(clazz: [CartLineItem].self) { (source: AnyObject, instance: AnyObject?) -> [CartLineItem] in
            return Decoders.decode(clazz: [CartLineItem].self, source: source)
        }
        // Decoder for CartLineItem
        Decoders.addDecoder(clazz: CartLineItem.self) { (source: AnyObject, instance: AnyObject?) -> CartLineItem in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? CartLineItem() : instance as! CartLineItem
            
            result.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"] as AnyObject?)
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.discount = Decoders.decodeOptional(clazz: Discount.self, source: sourceDictionary["discount"] as AnyObject?)
            result.lineTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["line_total"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.originalLineTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["original_line_total"] as AnyObject?)
            result.originalUnitPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["original_unit_price"] as AnyObject?)
            result.qty = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["qty"] as AnyObject?)
            result.saleName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sale_name"] as AnyObject?)
            result.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"] as AnyObject?)
            result.skuDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku_description"] as AnyObject?)
            result.storeItemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["store_item_id"] as AnyObject?)
            result.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            result.thumbUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["thumb_url"] as AnyObject?)
            result.uniqueKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_key"] as AnyObject?)
            result.unitPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["unit_price"] as AnyObject?)
            result.vendorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vendor_id"] as AnyObject?)
            result.vendorName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vendor_name"] as AnyObject?)
            return result
        }


        // Decoder for [CartShippableResponse]
        Decoders.addDecoder(clazz: [CartShippableResponse].self) { (source: AnyObject, instance: AnyObject?) -> [CartShippableResponse] in
            return Decoders.decode(clazz: [CartShippableResponse].self, source: source)
        }
        // Decoder for CartShippableResponse
        Decoders.addDecoder(clazz: CartShippableResponse.self) { (source: AnyObject, instance: AnyObject?) -> CartShippableResponse in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? CartShippableResponse() : instance as! CartShippableResponse
            
            result.cartId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["cart_id"] as AnyObject?)
            result.shippable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["shippable"] as AnyObject?)
            return result
        }


        // Decoder for [CartShippingAddressRequest]
        Decoders.addDecoder(clazz: [CartShippingAddressRequest].self) { (source: AnyObject, instance: AnyObject?) -> [CartShippingAddressRequest] in
            return Decoders.decode(clazz: [CartShippingAddressRequest].self, source: source)
        }
        // Decoder for CartShippingAddressRequest
        Decoders.addDecoder(clazz: CartShippingAddressRequest.self) { (source: AnyObject, instance: AnyObject?) -> CartShippingAddressRequest in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? CartShippingAddressRequest() : instance as! CartShippingAddressRequest
            
            result.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"] as AnyObject?)
            result.countryCodeIso3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_code_iso3"] as AnyObject?)
            result.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"] as AnyObject?)
            result.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["first_name"] as AnyObject?)
            result.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last_name"] as AnyObject?)
            result.namePrefix = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name_prefix"] as AnyObject?)
            result.orderNotes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["order_notes"] as AnyObject?)
            result.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone_number"] as AnyObject?)
            result.postalStateCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["postal_state_code"] as AnyObject?)
            result.shippingAddressLine1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipping_address_line1"] as AnyObject?)
            result.shippingAddressLine2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipping_address_line2"] as AnyObject?)
            result.zip = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zip"] as AnyObject?)
            return result
        }


        // Decoder for [CartShippingOption]
        Decoders.addDecoder(clazz: [CartShippingOption].self) { (source: AnyObject, instance: AnyObject?) -> [CartShippingOption] in
            return Decoders.decode(clazz: [CartShippingOption].self, source: source)
        }
        // Decoder for CartShippingOption
        Decoders.addDecoder(clazz: CartShippingOption.self) { (source: AnyObject, instance: AnyObject?) -> CartShippingOption in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? CartShippingOption() : instance as! CartShippingOption
            
            result.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"] as AnyObject?)
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.originalPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["original_price"] as AnyObject?)
            result.price = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price"] as AnyObject?)
            result.shippingItemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["shipping_item_id"] as AnyObject?)
            result.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"] as AnyObject?)
            result.taxable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["taxable"] as AnyObject?)
            result.vendorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vendor_id"] as AnyObject?)
            result.vendorName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vendor_name"] as AnyObject?)
            return result
        }


        // Decoder for [CartSummary]
        Decoders.addDecoder(clazz: [CartSummary].self) { (source: AnyObject, instance: AnyObject?) -> [CartSummary] in
            return Decoders.decode(clazz: [CartSummary].self, source: source)
        }
        // Decoder for CartSummary
        Decoders.addDecoder(clazz: CartSummary.self) { (source: AnyObject, instance: AnyObject?) -> CartSummary in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? CartSummary() : instance as! CartSummary
            
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"] as AnyObject?)
            result.grandTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["grand_total"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.invoiceId = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["invoice_id"] as AnyObject?)
            result.itemsInCart = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["items_in_cart"] as AnyObject?)
            if let status = sourceDictionary["status"] as? String { 
                result.status = CartSummary.Status(rawValue: (status))
            }
            
            result.subtotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["subtotal"] as AnyObject?)
            return result
        }


        // Decoder for [CatalogSale]
        Decoders.addDecoder(clazz: [CatalogSale].self) { (source: AnyObject, instance: AnyObject?) -> [CatalogSale] in
            return Decoders.decode(clazz: [CatalogSale].self, source: source)
        }
        // Decoder for CatalogSale
        Decoders.addDecoder(clazz: CatalogSale.self) { (source: AnyObject, instance: AnyObject?) -> CatalogSale in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? CatalogSale() : instance as! CatalogSale
            
            result.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"] as AnyObject?)
            if let discountType = sourceDictionary["discount_type"] as? String { 
                result.discountType = CatalogSale.DiscountType(rawValue: (discountType))
            }
            
            result.discountValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["discount_value"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            result.item = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["item"] as AnyObject?)
            result.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.saleEndDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["sale_end_date"] as AnyObject?)
            result.saleStartDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["sale_start_date"] as AnyObject?)
            result.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"] as AnyObject?)
            result.tag = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tag"] as AnyObject?)
            result.vendor = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vendor"] as AnyObject?)
            return result
        }


        // Decoder for [CategoryResource]
        Decoders.addDecoder(clazz: [CategoryResource].self) { (source: AnyObject, instance: AnyObject?) -> [CategoryResource] in
            return Decoders.decode(clazz: [CategoryResource].self, source: source)
        }
        // Decoder for CategoryResource
        Decoders.addDecoder(clazz: CategoryResource.self) { (source: AnyObject, instance: AnyObject?) -> CategoryResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? CategoryResource() : instance as! CategoryResource
            
            result.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"] as AnyObject?)
            result.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            return result
        }


        // Decoder for [ChallengeActivityResource]
        Decoders.addDecoder(clazz: [ChallengeActivityResource].self) { (source: AnyObject, instance: AnyObject?) -> [ChallengeActivityResource] in
            return Decoders.decode(clazz: [ChallengeActivityResource].self, source: source)
        }
        // Decoder for ChallengeActivityResource
        Decoders.addDecoder(clazz: ChallengeActivityResource.self) { (source: AnyObject, instance: AnyObject?) -> ChallengeActivityResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ChallengeActivityResource() : instance as! ChallengeActivityResource
            
            result.activityId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["activity_id"] as AnyObject?)
            result.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            result.challengeId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["challenge_id"] as AnyObject?)
            result.entitlement = Decoders.decodeOptional(clazz: ActivityEntitlementResource.self, source: sourceDictionary["entitlement"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            result.rewardSet = Decoders.decodeOptional(clazz: RewardSetResource.self, source: sourceDictionary["reward_set"] as AnyObject?)
            result.settings = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["settings"] as AnyObject?)
            result.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            return result
        }


        // Decoder for [ChallengeEventParticipantResource]
        Decoders.addDecoder(clazz: [ChallengeEventParticipantResource].self) { (source: AnyObject, instance: AnyObject?) -> [ChallengeEventParticipantResource] in
            return Decoders.decode(clazz: [ChallengeEventParticipantResource].self, source: source)
        }
        // Decoder for ChallengeEventParticipantResource
        Decoders.addDecoder(clazz: ChallengeEventParticipantResource.self) { (source: AnyObject, instance: AnyObject?) -> ChallengeEventParticipantResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ChallengeEventParticipantResource() : instance as! ChallengeEventParticipantResource
            
            result.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"] as AnyObject?)
            result.fullname = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullname"] as AnyObject?)
            result.score = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["score"] as AnyObject?)
            result.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"] as AnyObject?)
            result.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"] as AnyObject?)
            return result
        }


        // Decoder for [ChallengeEventResource]
        Decoders.addDecoder(clazz: [ChallengeEventResource].self) { (source: AnyObject, instance: AnyObject?) -> [ChallengeEventResource] in
            return Decoders.decode(clazz: [ChallengeEventResource].self, source: source)
        }
        // Decoder for ChallengeEventResource
        Decoders.addDecoder(clazz: ChallengeEventResource.self) { (source: AnyObject, instance: AnyObject?) -> ChallengeEventResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ChallengeEventResource() : instance as! ChallengeEventResource
            
            result.challengeId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["challenge_id"] as AnyObject?)
            result.endDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["end_date"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            if let rewardStatus = sourceDictionary["reward_status"] as? String { 
                result.rewardStatus = ChallengeEventResource.RewardStatus(rawValue: (rewardStatus))
            }
            
            result.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["start_date"] as AnyObject?)
            return result
        }


        // Decoder for [ChallengeResource]
        Decoders.addDecoder(clazz: [ChallengeResource].self) { (source: AnyObject, instance: AnyObject?) -> [ChallengeResource] in
            return Decoders.decode(clazz: [ChallengeResource].self, source: source)
        }
        // Decoder for ChallengeResource
        Decoders.addDecoder(clazz: ChallengeResource.self) { (source: AnyObject, instance: AnyObject?) -> ChallengeResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ChallengeResource() : instance as! ChallengeResource
            
            result.activities = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["activities"] as AnyObject?)
            result.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            result.campaignId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["campaign_id"] as AnyObject?)
            result.copyOf = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["copy_of"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.endDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["end_date"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            result.leaderboardStrategy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["leaderboard_strategy"] as AnyObject?)
            result.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.nextEventDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["next_event_date"] as AnyObject?)
            result.rewardLagMinutes = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["reward_lag_minutes"] as AnyObject?)
            result.rewardSet = Decoders.decodeOptional(clazz: RewardSetResource.self, source: sourceDictionary["reward_set"] as AnyObject?)
            result.schedule = Decoders.decodeOptional(clazz: Schedule.self, source: sourceDictionary["schedule"] as AnyObject?)
            result.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"] as AnyObject?)
            result.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["start_date"] as AnyObject?)
            result.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return result
        }


        // Decoder for [ClientResource]
        Decoders.addDecoder(clazz: [ClientResource].self) { (source: AnyObject, instance: AnyObject?) -> [ClientResource] in
            return Decoders.decode(clazz: [ClientResource].self, source: source)
        }
        // Decoder for ClientResource
        Decoders.addDecoder(clazz: ClientResource.self) { (source: AnyObject, instance: AnyObject?) -> ClientResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ClientResource() : instance as! ClientResource
            
            result.accessTokenValiditySeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["access_token_validity_seconds"] as AnyObject?)
            result.clientKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["client_key"] as AnyObject?)
            result.grantTypes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["grant_types"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            result.isPublic = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_public"] as AnyObject?)
            result.locked = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["locked"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.redirectUris = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["redirect_uris"] as AnyObject?)
            result.refreshTokenValiditySeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["refresh_token_validity_seconds"] as AnyObject?)
            result.secret = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["secret"] as AnyObject?)
            return result
        }


        // Decoder for [CollectionCountry]
        Decoders.addDecoder(clazz: [CollectionCountry].self) { (source: AnyObject, instance: AnyObject?) -> [CollectionCountry] in
            return Decoders.decode(clazz: [CollectionCountry].self, source: source)
        }
        // Decoder for CollectionCountry
        Decoders.addDecoder(clazz: CollectionCountry.self) { (source: AnyObject, instance: AnyObject?) -> CollectionCountry in
            if let source = source as? Any {
                return source
            }
            fatalError("Source \(source) is not convertible to typealias CollectionCountry: Maybe swagger file is insufficient")
        }


        // Decoder for [Collectionstring]
        Decoders.addDecoder(clazz: [Collectionstring].self) { (source: AnyObject, instance: AnyObject?) -> [Collectionstring] in
            return Decoders.decode(clazz: [Collectionstring].self, source: source)
        }
        // Decoder for Collectionstring
        Decoders.addDecoder(clazz: Collectionstring.self) { (source: AnyObject, instance: AnyObject?) -> Collectionstring in
            if let source = source as? Any {
                return source
            }
            fatalError("Source \(source) is not convertible to typealias Collectionstring: Maybe swagger file is insufficient")
        }


        // Decoder for [CommentResource]
        Decoders.addDecoder(clazz: [CommentResource].self) { (source: AnyObject, instance: AnyObject?) -> [CommentResource] in
            return Decoders.decode(clazz: [CommentResource].self, source: source)
        }
        // Decoder for CommentResource
        Decoders.addDecoder(clazz: CommentResource.self) { (source: AnyObject, instance: AnyObject?) -> CommentResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? CommentResource() : instance as! CommentResource
            
            result.content = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["content"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context"] as AnyObject?)
            result.contextId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["context_id"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            result.summary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["summary"] as AnyObject?)
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            result.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"] as AnyObject?)
            return result
        }


        // Decoder for [CommentSearch]
        Decoders.addDecoder(clazz: [CommentSearch].self) { (source: AnyObject, instance: AnyObject?) -> [CommentSearch] in
            return Decoders.decode(clazz: [CommentSearch].self, source: source)
        }
        // Decoder for CommentSearch
        Decoders.addDecoder(clazz: CommentSearch.self) { (source: AnyObject, instance: AnyObject?) -> CommentSearch in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? CommentSearch() : instance as! CommentSearch
            
            result.content = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["content"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context"] as AnyObject?)
            result.contextId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["context_id"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            result.ownerId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["owner_id"] as AnyObject?)
            result.ownerUsername = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["owner_username"] as AnyObject?)
            return result
        }


        // Decoder for [Config]
        Decoders.addDecoder(clazz: [Config].self) { (source: AnyObject, instance: AnyObject?) -> [Config] in
            return Decoders.decode(clazz: [Config].self, source: source)
        }
        // Decoder for Config
        Decoders.addDecoder(clazz: Config.self) { (source: AnyObject, instance: AnyObject?) -> Config in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Config() : instance as! Config
            
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.publicRead = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["public_read"] as AnyObject?)
            result.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"] as AnyObject?)
            return result
        }


        // Decoder for [ConfigLookupResource]
        Decoders.addDecoder(clazz: [ConfigLookupResource].self) { (source: AnyObject, instance: AnyObject?) -> [ConfigLookupResource] in
            return Decoders.decode(clazz: [ConfigLookupResource].self, source: source)
        }
        // Decoder for ConfigLookupResource
        Decoders.addDecoder(clazz: ConfigLookupResource.self) { (source: AnyObject, instance: AnyObject?) -> ConfigLookupResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ConfigLookupResource() : instance as! ConfigLookupResource
            
            result.lookupKey = Decoders.decodeOptional(clazz: ExpressionResource.self, source: sourceDictionary["lookup_key"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.valueType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value_type"] as AnyObject?)
            return result
        }


        // Decoder for [ConstantResource]
        Decoders.addDecoder(clazz: [ConstantResource].self) { (source: AnyObject, instance: AnyObject?) -> [ConstantResource] in
            return Decoders.decode(clazz: [ConstantResource].self, source: source)
        }
        // Decoder for ConstantResource
        Decoders.addDecoder(clazz: ConstantResource.self) { (source: AnyObject, instance: AnyObject?) -> ConstantResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ConstantResource() : instance as! ConstantResource
            
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.value = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["value"] as AnyObject?)
            result.valueType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value_type"] as AnyObject?)
            return result
        }


        // Decoder for [ContributionResource]
        Decoders.addDecoder(clazz: [ContributionResource].self) { (source: AnyObject, instance: AnyObject?) -> [ContributionResource] in
            return Decoders.decode(clazz: [ContributionResource].self, source: source)
        }
        // Decoder for ContributionResource
        Decoders.addDecoder(clazz: ContributionResource.self) { (source: AnyObject, instance: AnyObject?) -> ContributionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ContributionResource() : instance as! ContributionResource
            
            result.artist = Decoders.decodeOptional(clazz: SimpleReferenceResourcelong.self, source: sourceDictionary["artist"] as AnyObject?)
            result.media = Decoders.decodeOptional(clazz: SimpleReferenceResourcelong.self, source: sourceDictionary["media"] as AnyObject?)
            result.role = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["role"] as AnyObject?)
            return result
        }


        // Decoder for [Country]
        Decoders.addDecoder(clazz: [Country].self) { (source: AnyObject, instance: AnyObject?) -> [Country] in
            return Decoders.decode(clazz: [Country].self, source: source)
        }
        // Decoder for Country
        Decoders.addDecoder(clazz: Country.self) { (source: AnyObject, instance: AnyObject?) -> Country in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Country() : instance as! Country
            
            result.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            result.iso2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iso2"] as AnyObject?)
            result.iso3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iso3"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return result
        }


        // Decoder for [CountryResource]
        Decoders.addDecoder(clazz: [CountryResource].self) { (source: AnyObject, instance: AnyObject?) -> [CountryResource] in
            return Decoders.decode(clazz: [CountryResource].self, source: source)
        }
        // Decoder for CountryResource
        Decoders.addDecoder(clazz: CountryResource.self) { (source: AnyObject, instance: AnyObject?) -> CountryResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? CountryResource() : instance as! CountryResource
            
            result.iso2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iso2"] as AnyObject?)
            result.iso3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iso3"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return result
        }


        // Decoder for [CountryTaxResource]
        Decoders.addDecoder(clazz: [CountryTaxResource].self) { (source: AnyObject, instance: AnyObject?) -> [CountryTaxResource] in
            return Decoders.decode(clazz: [CountryTaxResource].self, source: source)
        }
        // Decoder for CountryTaxResource
        Decoders.addDecoder(clazz: CountryTaxResource.self) { (source: AnyObject, instance: AnyObject?) -> CountryTaxResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? CountryTaxResource() : instance as! CountryTaxResource
            
            result.countryIso3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_iso3"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.rate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rate"] as AnyObject?)
            result.taxShipping = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["tax_shipping"] as AnyObject?)
            return result
        }


        // Decoder for [CouponDefinition]
        Decoders.addDecoder(clazz: [CouponDefinition].self) { (source: AnyObject, instance: AnyObject?) -> [CouponDefinition] in
            return Decoders.decode(clazz: [CouponDefinition].self, source: source)
        }
        // Decoder for CouponDefinition
        Decoders.addDecoder(clazz: CouponDefinition.self) { (source: AnyObject, instance: AnyObject?) -> CouponDefinition in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? CouponDefinition() : instance as! CouponDefinition
            
            result.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            if let discountType = sourceDictionary["discount_type"] as? String { 
                result.discountType = CouponDefinition.DiscountType(rawValue: (discountType))
            }
            
            result.exclusive = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["exclusive"] as AnyObject?)
            result.maxDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["max_discount"] as AnyObject?)
            result.maxQuantity = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_quantity"] as AnyObject?)
            result.minCartTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["min_cart_total"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.selfExclusive = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["self_exclusive"] as AnyObject?)
            result.targetItemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["target_item_id"] as AnyObject?)
            if let type = sourceDictionary["type"] as? String { 
                result.type = CouponDefinition.ModelType(rawValue: (type))
            }
            
            result.uniqueKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_key"] as AnyObject?)
            result.validForTags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["valid_for_tags"] as AnyObject?)
            result.value = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"] as AnyObject?)
            result.vendorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vendor_id"] as AnyObject?)
            return result
        }


        // Decoder for [CreateBillingAgreementRequest]
        Decoders.addDecoder(clazz: [CreateBillingAgreementRequest].self) { (source: AnyObject, instance: AnyObject?) -> [CreateBillingAgreementRequest] in
            return Decoders.decode(clazz: [CreateBillingAgreementRequest].self, source: source)
        }
        // Decoder for CreateBillingAgreementRequest
        Decoders.addDecoder(clazz: CreateBillingAgreementRequest.self) { (source: AnyObject, instance: AnyObject?) -> CreateBillingAgreementRequest in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? CreateBillingAgreementRequest() : instance as! CreateBillingAgreementRequest
            
            result.cancelUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cancel_url"] as AnyObject?)
            result.returnUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["return_url"] as AnyObject?)
            result.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"] as AnyObject?)
            return result
        }


        // Decoder for [CreatePayPalPaymentRequest]
        Decoders.addDecoder(clazz: [CreatePayPalPaymentRequest].self) { (source: AnyObject, instance: AnyObject?) -> [CreatePayPalPaymentRequest] in
            return Decoders.decode(clazz: [CreatePayPalPaymentRequest].self, source: source)
        }
        // Decoder for CreatePayPalPaymentRequest
        Decoders.addDecoder(clazz: CreatePayPalPaymentRequest.self) { (source: AnyObject, instance: AnyObject?) -> CreatePayPalPaymentRequest in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? CreatePayPalPaymentRequest() : instance as! CreatePayPalPaymentRequest
            
            result.cancelUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cancel_url"] as AnyObject?)
            result.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"] as AnyObject?)
            result.returnUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["return_url"] as AnyObject?)
            return result
        }


        // Decoder for [CurrencyResource]
        Decoders.addDecoder(clazz: [CurrencyResource].self) { (source: AnyObject, instance: AnyObject?) -> [CurrencyResource] in
            return Decoders.decode(clazz: [CurrencyResource].self, source: source)
        }
        // Decoder for CurrencyResource
        Decoders.addDecoder(clazz: CurrencyResource.self) { (source: AnyObject, instance: AnyObject?) -> CurrencyResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? CurrencyResource() : instance as! CurrencyResource
            
            result.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"] as AnyObject?)
            result.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.factor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["factor"] as AnyObject?)
            result.icon = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["icon"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            if let type = sourceDictionary["type"] as? String { 
                result.type = CurrencyResource.ModelType(rawValue: (type))
            }
            
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return result
        }


        // Decoder for [CustomerConfig]
        Decoders.addDecoder(clazz: [CustomerConfig].self) { (source: AnyObject, instance: AnyObject?) -> [CustomerConfig] in
            return Decoders.decode(clazz: [CustomerConfig].self, source: source)
        }
        // Decoder for CustomerConfig
        Decoders.addDecoder(clazz: CustomerConfig.self) { (source: AnyObject, instance: AnyObject?) -> CustomerConfig in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? CustomerConfig() : instance as! CustomerConfig
            
            result.aliases = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["aliases"] as AnyObject?)
            result.database = Decoders.decodeOptional(clazz: DatabaseConfig.self, source: sourceDictionary["database"] as AnyObject?)
            result.io = Decoders.decodeOptional(clazz: IOConfig.self, source: sourceDictionary["io"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.s3Config = Decoders.decodeOptional(clazz: S3Config.self, source: sourceDictionary["s3_config"] as AnyObject?)
            return result
        }


        // Decoder for [DatabaseConfig]
        Decoders.addDecoder(clazz: [DatabaseConfig].self) { (source: AnyObject, instance: AnyObject?) -> [DatabaseConfig] in
            return Decoders.decode(clazz: [DatabaseConfig].self, source: source)
        }
        // Decoder for DatabaseConfig
        Decoders.addDecoder(clazz: DatabaseConfig.self) { (source: AnyObject, instance: AnyObject?) -> DatabaseConfig in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? DatabaseConfig() : instance as! DatabaseConfig
            
            result.mongo = Decoders.decodeOptional(clazz: MongoDatabaseConfig.self, source: sourceDictionary["mongo"] as AnyObject?)
            result.sql = Decoders.decodeOptional(clazz: SqlDatabaseConfig.self, source: sourceDictionary["sql"] as AnyObject?)
            return result
        }


        // Decoder for [DateOperationResource]
        Decoders.addDecoder(clazz: [DateOperationResource].self) { (source: AnyObject, instance: AnyObject?) -> [DateOperationResource] in
            return Decoders.decode(clazz: [DateOperationResource].self, source: source)
        }
        // Decoder for DateOperationResource
        Decoders.addDecoder(clazz: DateOperationResource.self) { (source: AnyObject, instance: AnyObject?) -> DateOperationResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? DateOperationResource() : instance as! DateOperationResource
            
            result.args = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["args"] as AnyObject?)
            result.op = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["op"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return result
        }


        // Decoder for [DeltaResource]
        Decoders.addDecoder(clazz: [DeltaResource].self) { (source: AnyObject, instance: AnyObject?) -> [DeltaResource] in
            return Decoders.decode(clazz: [DeltaResource].self, source: source)
        }
        // Decoder for DeltaResource
        Decoders.addDecoder(clazz: DeltaResource.self) { (source: AnyObject, instance: AnyObject?) -> DeltaResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? DeltaResource() : instance as! DeltaResource
            
            result.categoryId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category_id"] as AnyObject?)
            result.mediaType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["media_type"] as AnyObject?)
            result.questionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["question_id"] as AnyObject?)
            if let state = sourceDictionary["state"] as? String { 
                result.state = DeltaResource.State(rawValue: (state))
            }
            
            result.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return result
        }


        // Decoder for [DeviceResource]
        Decoders.addDecoder(clazz: [DeviceResource].self) { (source: AnyObject, instance: AnyObject?) -> [DeviceResource] in
            return Decoders.decode(clazz: [DeviceResource].self, source: source)
        }
        // Decoder for DeviceResource
        Decoders.addDecoder(clazz: DeviceResource.self) { (source: AnyObject, instance: AnyObject?) -> DeviceResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? DeviceResource() : instance as! DeviceResource
            
            result.authorization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["authorization"] as AnyObject?)
            if let condition = sourceDictionary["condition"] as? String { 
                result.condition = DeviceResource.Condition(rawValue: (condition))
            }
            
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.data = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["data"] as AnyObject?)
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.deviceType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["device_type"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            result.location = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["location"] as AnyObject?)
            result.macAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mac_address"] as AnyObject?)
            result.make = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["make"] as AnyObject?)
            result.model = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["model"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.os = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["os"] as AnyObject?)
            result.serial = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["serial"] as AnyObject?)
            if let status = sourceDictionary["status"] as? String { 
                result.status = DeviceResource.Status(rawValue: (status))
            }
            
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            result.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"] as AnyObject?)
            result.users = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["users"] as AnyObject?)
            return result
        }


        // Decoder for [Discount]
        Decoders.addDecoder(clazz: [Discount].self) { (source: AnyObject, instance: AnyObject?) -> [Discount] in
            return Decoders.decode(clazz: [Discount].self, source: source)
        }
        // Decoder for Discount
        Decoders.addDecoder(clazz: Discount.self) { (source: AnyObject, instance: AnyObject?) -> Discount in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Discount() : instance as! Discount
            
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"] as AnyObject?)
            result.uniqueKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_key"] as AnyObject?)
            result.value = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"] as AnyObject?)
            return result
        }


        // Decoder for [DispositionCount]
        Decoders.addDecoder(clazz: [DispositionCount].self) { (source: AnyObject, instance: AnyObject?) -> [DispositionCount] in
            return Decoders.decode(clazz: [DispositionCount].self, source: source)
        }
        // Decoder for DispositionCount
        Decoders.addDecoder(clazz: DispositionCount.self) { (source: AnyObject, instance: AnyObject?) -> DispositionCount in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? DispositionCount() : instance as! DispositionCount
            
            result.count = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["count"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return result
        }


        // Decoder for [DispositionResource]
        Decoders.addDecoder(clazz: [DispositionResource].self) { (source: AnyObject, instance: AnyObject?) -> [DispositionResource] in
            return Decoders.decode(clazz: [DispositionResource].self, source: source)
        }
        // Decoder for DispositionResource
        Decoders.addDecoder(clazz: DispositionResource.self) { (source: AnyObject, instance: AnyObject?) -> DispositionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? DispositionResource() : instance as! DispositionResource
            
            result.context = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context"] as AnyObject?)
            result.contextId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context_id"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"] as AnyObject?)
            return result
        }


        // Decoder for [DoubleOperationResource]
        Decoders.addDecoder(clazz: [DoubleOperationResource].self) { (source: AnyObject, instance: AnyObject?) -> [DoubleOperationResource] in
            return Decoders.decode(clazz: [DoubleOperationResource].self, source: source)
        }
        // Decoder for DoubleOperationResource
        Decoders.addDecoder(clazz: DoubleOperationResource.self) { (source: AnyObject, instance: AnyObject?) -> DoubleOperationResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? DoubleOperationResource() : instance as! DoubleOperationResource
            
            result.args = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["args"] as AnyObject?)
            result.op = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["op"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return result
        }


        // Decoder for [EntitlementGrantRequest]
        Decoders.addDecoder(clazz: [EntitlementGrantRequest].self) { (source: AnyObject, instance: AnyObject?) -> [EntitlementGrantRequest] in
            return Decoders.decode(clazz: [EntitlementGrantRequest].self, source: source)
        }
        // Decoder for EntitlementGrantRequest
        Decoders.addDecoder(clazz: EntitlementGrantRequest.self) { (source: AnyObject, instance: AnyObject?) -> EntitlementGrantRequest in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? EntitlementGrantRequest() : instance as! EntitlementGrantRequest
            
            result.entitlementId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["entitlement_id"] as AnyObject?)
            return result
        }


        // Decoder for [ErrorResource]
        Decoders.addDecoder(clazz: [ErrorResource].self) { (source: AnyObject, instance: AnyObject?) -> [ErrorResource] in
            return Decoders.decode(clazz: [ErrorResource].self, source: source)
        }
        // Decoder for ErrorResource
        Decoders.addDecoder(clazz: ErrorResource.self) { (source: AnyObject, instance: AnyObject?) -> ErrorResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ErrorResource() : instance as! ErrorResource
            
            result.details = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["details"] as AnyObject?)
            result.field = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["field"] as AnyObject?)
            result.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"] as AnyObject?)
            return result
        }


        // Decoder for [EventContextResource]
        Decoders.addDecoder(clazz: [EventContextResource].self) { (source: AnyObject, instance: AnyObject?) -> [EventContextResource] in
            return Decoders.decode(clazz: [EventContextResource].self, source: source)
        }
        // Decoder for EventContextResource
        Decoders.addDecoder(clazz: EventContextResource.self) { (source: AnyObject, instance: AnyObject?) -> EventContextResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? EventContextResource() : instance as! EventContextResource
            
            result.eventName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["event_name"] as AnyObject?)
            result.parameters = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["parameters"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return result
        }


        // Decoder for [ExpressionResource]
        Decoders.addDecoder(clazz: [ExpressionResource].self) { (source: AnyObject, instance: AnyObject?) -> [ExpressionResource] in
            return Decoders.decode(clazz: [ExpressionResource].self, source: source)
        }
        // Decoder for ExpressionResource
        Decoders.addDecoder(clazz: ExpressionResource.self) { (source: AnyObject, instance: AnyObject?) -> ExpressionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            // Check discriminator to support inheritance
            if let discriminator = sourceDictionary["type"] as? String, instance == nil && discriminator != "ExpressionResource" {
                return Decoders.decode(clazz: ExpressionResource.self, discriminator: discriminator, source: source)
            }
            let result = instance == nil ? ExpressionResource() : instance as! ExpressionResource
            
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return result
        }


        // Decoder for [Expressionobject]
        Decoders.addDecoder(clazz: [Expressionobject].self) { (source: AnyObject, instance: AnyObject?) -> [Expressionobject] in
            return Decoders.decode(clazz: [Expressionobject].self, source: source)
        }
        // Decoder for Expressionobject
        Decoders.addDecoder(clazz: Expressionobject.self) { (source: AnyObject, instance: AnyObject?) -> Expressionobject in
            if let source = source as? Any {
                return source
            }
            fatalError("Source \(source) is not convertible to typealias Expressionobject: Maybe swagger file is insufficient")
        }


        // Decoder for [FacebookToken]
        Decoders.addDecoder(clazz: [FacebookToken].self) { (source: AnyObject, instance: AnyObject?) -> [FacebookToken] in
            return Decoders.decode(clazz: [FacebookToken].self, source: source)
        }
        // Decoder for FacebookToken
        Decoders.addDecoder(clazz: FacebookToken.self) { (source: AnyObject, instance: AnyObject?) -> FacebookToken in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? FacebookToken() : instance as! FacebookToken
            
            result.accessToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["access_token"] as AnyObject?)
            return result
        }


        // Decoder for [FinalizeBillingAgreementRequest]
        Decoders.addDecoder(clazz: [FinalizeBillingAgreementRequest].self) { (source: AnyObject, instance: AnyObject?) -> [FinalizeBillingAgreementRequest] in
            return Decoders.decode(clazz: [FinalizeBillingAgreementRequest].self, source: source)
        }
        // Decoder for FinalizeBillingAgreementRequest
        Decoders.addDecoder(clazz: FinalizeBillingAgreementRequest.self) { (source: AnyObject, instance: AnyObject?) -> FinalizeBillingAgreementRequest in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? FinalizeBillingAgreementRequest() : instance as! FinalizeBillingAgreementRequest
            
            result.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"] as AnyObject?)
            result.newDefault = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["new_default"] as AnyObject?)
            result.payerId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["payer_id"] as AnyObject?)
            result.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"] as AnyObject?)
            result.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"] as AnyObject?)
            return result
        }


        // Decoder for [FinalizePayPalPaymentRequest]
        Decoders.addDecoder(clazz: [FinalizePayPalPaymentRequest].self) { (source: AnyObject, instance: AnyObject?) -> [FinalizePayPalPaymentRequest] in
            return Decoders.decode(clazz: [FinalizePayPalPaymentRequest].self, source: source)
        }
        // Decoder for FinalizePayPalPaymentRequest
        Decoders.addDecoder(clazz: FinalizePayPalPaymentRequest.self) { (source: AnyObject, instance: AnyObject?) -> FinalizePayPalPaymentRequest in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? FinalizePayPalPaymentRequest() : instance as! FinalizePayPalPaymentRequest
            
            result.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"] as AnyObject?)
            result.payerId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["payer_id"] as AnyObject?)
            result.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"] as AnyObject?)
            return result
        }


        // Decoder for [FlagReportResource]
        Decoders.addDecoder(clazz: [FlagReportResource].self) { (source: AnyObject, instance: AnyObject?) -> [FlagReportResource] in
            return Decoders.decode(clazz: [FlagReportResource].self, source: source)
        }
        // Decoder for FlagReportResource
        Decoders.addDecoder(clazz: FlagReportResource.self) { (source: AnyObject, instance: AnyObject?) -> FlagReportResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? FlagReportResource() : instance as! FlagReportResource
            
            result.context = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context"] as AnyObject?)
            result.contextId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context_id"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            result.reason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reason"] as AnyObject?)
            if let resolution = sourceDictionary["resolution"] as? String { 
                result.resolution = FlagReportResource.Resolution(rawValue: (resolution))
            }
            
            result.resolved = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["resolved"] as AnyObject?)
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return result
        }


        // Decoder for [FlagResource]
        Decoders.addDecoder(clazz: [FlagResource].self) { (source: AnyObject, instance: AnyObject?) -> [FlagResource] in
            return Decoders.decode(clazz: [FlagResource].self, source: source)
        }
        // Decoder for FlagResource
        Decoders.addDecoder(clazz: FlagResource.self) { (source: AnyObject, instance: AnyObject?) -> FlagResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? FlagResource() : instance as! FlagResource
            
            result.context = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context"] as AnyObject?)
            result.contextId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context_id"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            result.reason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reason"] as AnyObject?)
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            result.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"] as AnyObject?)
            return result
        }


        // Decoder for [ForwardLog]
        Decoders.addDecoder(clazz: [ForwardLog].self) { (source: AnyObject, instance: AnyObject?) -> [ForwardLog] in
            return Decoders.decode(clazz: [ForwardLog].self, source: source)
        }
        // Decoder for ForwardLog
        Decoders.addDecoder(clazz: ForwardLog.self) { (source: AnyObject, instance: AnyObject?) -> ForwardLog in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ForwardLog() : instance as! ForwardLog
            
            result.endDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["end_date"] as AnyObject?)
            result.errorMsg = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error_msg"] as AnyObject?)
            result.httpStatusCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["http_status_code"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.payload = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["payload"] as AnyObject?)
            result.response = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["response"] as AnyObject?)
            result.retryCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["retry_count"] as AnyObject?)
            result.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["start_date"] as AnyObject?)
            result.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?)
            return result
        }


        // Decoder for [FulfillmentType]
        Decoders.addDecoder(clazz: [FulfillmentType].self) { (source: AnyObject, instance: AnyObject?) -> [FulfillmentType] in
            return Decoders.decode(clazz: [FulfillmentType].self, source: source)
        }
        // Decoder for FulfillmentType
        Decoders.addDecoder(clazz: FulfillmentType.self) { (source: AnyObject, instance: AnyObject?) -> FulfillmentType in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? FulfillmentType() : instance as! FulfillmentType
            
            result.core = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["core"] as AnyObject?)
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return result
        }


        // Decoder for [GlobalCheckAndIncrementResource]
        Decoders.addDecoder(clazz: [GlobalCheckAndIncrementResource].self) { (source: AnyObject, instance: AnyObject?) -> [GlobalCheckAndIncrementResource] in
            return Decoders.decode(clazz: [GlobalCheckAndIncrementResource].self, source: source)
        }
        // Decoder for GlobalCheckAndIncrementResource
        Decoders.addDecoder(clazz: GlobalCheckAndIncrementResource.self) { (source: AnyObject, instance: AnyObject?) -> GlobalCheckAndIncrementResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? GlobalCheckAndIncrementResource() : instance as! GlobalCheckAndIncrementResource
            
            result.checkValueResource = Decoders.decodeOptional(clazz: ExpressionResource.self, source: sourceDictionary["check_value_resource"] as AnyObject?)
            result.globalResource = Decoders.decodeOptional(clazz: ExpressionResource.self, source: sourceDictionary["global_resource"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return result
        }


        // Decoder for [GlobalResource]
        Decoders.addDecoder(clazz: [GlobalResource].self) { (source: AnyObject, instance: AnyObject?) -> [GlobalResource] in
            return Decoders.decode(clazz: [GlobalResource].self, source: source)
        }
        // Decoder for GlobalResource
        Decoders.addDecoder(clazz: GlobalResource.self) { (source: AnyObject, instance: AnyObject?) -> GlobalResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? GlobalResource() : instance as! GlobalResource
            
            result.globalDefId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["global_def_id"] as AnyObject?)
            result.scopes = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["scopes"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return result
        }


        // Decoder for [GooglePaymentRequest]
        Decoders.addDecoder(clazz: [GooglePaymentRequest].self) { (source: AnyObject, instance: AnyObject?) -> [GooglePaymentRequest] in
            return Decoders.decode(clazz: [GooglePaymentRequest].self, source: source)
        }
        // Decoder for GooglePaymentRequest
        Decoders.addDecoder(clazz: GooglePaymentRequest.self) { (source: AnyObject, instance: AnyObject?) -> GooglePaymentRequest in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? GooglePaymentRequest() : instance as! GooglePaymentRequest
            
            result.jsonPayload = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["json_payload"] as AnyObject?)
            result.signature = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["signature"] as AnyObject?)
            return result
        }


        // Decoder for [GoogleToken]
        Decoders.addDecoder(clazz: [GoogleToken].self) { (source: AnyObject, instance: AnyObject?) -> [GoogleToken] in
            return Decoders.decode(clazz: [GoogleToken].self, source: source)
        }
        // Decoder for GoogleToken
        Decoders.addDecoder(clazz: GoogleToken.self) { (source: AnyObject, instance: AnyObject?) -> GoogleToken in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? GoogleToken() : instance as! GoogleToken
            
            result.authorizationCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["authorization_code"] as AnyObject?)
            return result
        }


        // Decoder for [GrantTypeResource]
        Decoders.addDecoder(clazz: [GrantTypeResource].self) { (source: AnyObject, instance: AnyObject?) -> [GrantTypeResource] in
            return Decoders.decode(clazz: [GrantTypeResource].self, source: source)
        }
        // Decoder for GrantTypeResource
        Decoders.addDecoder(clazz: GrantTypeResource.self) { (source: AnyObject, instance: AnyObject?) -> GrantTypeResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? GrantTypeResource() : instance as! GrantTypeResource
            
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return result
        }


        // Decoder for [GroupMemberResource]
        Decoders.addDecoder(clazz: [GroupMemberResource].self) { (source: AnyObject, instance: AnyObject?) -> [GroupMemberResource] in
            return Decoders.decode(clazz: [GroupMemberResource].self, source: source)
        }
        // Decoder for GroupMemberResource
        Decoders.addDecoder(clazz: GroupMemberResource.self) { (source: AnyObject, instance: AnyObject?) -> GroupMemberResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? GroupMemberResource() : instance as! GroupMemberResource
            
            result.avatarUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["avatar_url"] as AnyObject?)
            result.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["display_name"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            if let status = sourceDictionary["status"] as? String { 
                result.status = GroupMemberResource.Status(rawValue: (status))
            }
            
            result.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"] as AnyObject?)
            return result
        }


        // Decoder for [GroupResource]
        Decoders.addDecoder(clazz: [GroupResource].self) { (source: AnyObject, instance: AnyObject?) -> [GroupResource] in
            return Decoders.decode(clazz: [GroupResource].self, source: source)
        }
        // Decoder for GroupResource
        Decoders.addDecoder(clazz: GroupResource.self) { (source: AnyObject, instance: AnyObject?) -> GroupResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? GroupResource() : instance as! GroupResource
            
            result.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.memberCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["member_count"] as AnyObject?)
            result.messageOfTheDay = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message_of_the_day"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.parent = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["parent"] as AnyObject?)
            if let status = sourceDictionary["status"] as? String { 
                result.status = GroupResource.Status(rawValue: (status))
            }
            
            result.subMemberCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sub_member_count"] as AnyObject?)
            result.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            result.uniqueName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_name"] as AnyObject?)
            return result
        }


        // Decoder for [IOConfig]
        Decoders.addDecoder(clazz: [IOConfig].self) { (source: AnyObject, instance: AnyObject?) -> [IOConfig] in
            return Decoders.decode(clazz: [IOConfig].self, source: source)
        }
        // Decoder for IOConfig
        Decoders.addDecoder(clazz: IOConfig.self) { (source: AnyObject, instance: AnyObject?) -> IOConfig in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? IOConfig() : instance as! IOConfig
            
            result.customer = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["customer"] as AnyObject?)
            result.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"] as AnyObject?)
            result.environment = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["environment"] as AnyObject?)
            result.product = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["product"] as AnyObject?)
            return result
        }


        // Decoder for [ImportJobOutputResource]
        Decoders.addDecoder(clazz: [ImportJobOutputResource].self) { (source: AnyObject, instance: AnyObject?) -> [ImportJobOutputResource] in
            return Decoders.decode(clazz: [ImportJobOutputResource].self, source: source)
        }
        // Decoder for ImportJobOutputResource
        Decoders.addDecoder(clazz: ImportJobOutputResource.self) { (source: AnyObject, instance: AnyObject?) -> ImportJobOutputResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ImportJobOutputResource() : instance as! ImportJobOutputResource
            
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.lineNumber = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["line_number"] as AnyObject?)
            return result
        }


        // Decoder for [ImportJobResource]
        Decoders.addDecoder(clazz: [ImportJobResource].self) { (source: AnyObject, instance: AnyObject?) -> [ImportJobResource] in
            return Decoders.decode(clazz: [ImportJobResource].self, source: source)
        }
        // Decoder for ImportJobResource
        Decoders.addDecoder(clazz: ImportJobResource.self) { (source: AnyObject, instance: AnyObject?) -> ImportJobResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ImportJobResource() : instance as! ImportJobResource
            
            result.categoryId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category_id"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.output = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["output"] as AnyObject?)
            result.recordCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["record_count"] as AnyObject?)
            if let status = sourceDictionary["status"] as? String { 
                result.status = ImportJobResource.Status(rawValue: (status))
            }
            
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            result.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?)
            result.vendor = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vendor"] as AnyObject?)
            return result
        }


        // Decoder for [IntegerOperationResource]
        Decoders.addDecoder(clazz: [IntegerOperationResource].self) { (source: AnyObject, instance: AnyObject?) -> [IntegerOperationResource] in
            return Decoders.decode(clazz: [IntegerOperationResource].self, source: source)
        }
        // Decoder for IntegerOperationResource
        Decoders.addDecoder(clazz: IntegerOperationResource.self) { (source: AnyObject, instance: AnyObject?) -> IntegerOperationResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? IntegerOperationResource() : instance as! IntegerOperationResource
            
            result.args = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["args"] as AnyObject?)
            result.op = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["op"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return result
        }


        // Decoder for [InventorySubscriptionResource]
        Decoders.addDecoder(clazz: [InventorySubscriptionResource].self) { (source: AnyObject, instance: AnyObject?) -> [InventorySubscriptionResource] in
            return Decoders.decode(clazz: [InventorySubscriptionResource].self, source: source)
        }
        // Decoder for InventorySubscriptionResource
        Decoders.addDecoder(clazz: InventorySubscriptionResource.self) { (source: AnyObject, instance: AnyObject?) -> InventorySubscriptionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? InventorySubscriptionResource() : instance as! InventorySubscriptionResource
            
            result.billDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["bill_date"] as AnyObject?)
            result.credit = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["credit"] as AnyObject?)
            result.creditLog = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["credit_log"] as AnyObject?)
            result.graceEnd = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["grace_end"] as AnyObject?)
            result.inventoryId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["inventory_id"] as AnyObject?)
            if let inventoryStatus = sourceDictionary["inventory_status"] as? String { 
                result.inventoryStatus = InventorySubscriptionResource.InventoryStatus(rawValue: (inventoryStatus))
            }
            
            result.itemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["item_id"] as AnyObject?)
            result.paymentMethod = Decoders.decodeOptional(clazz: PaymentMethodResource.self, source: sourceDictionary["payment_method"] as AnyObject?)
            result.priceOverride = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price_override"] as AnyObject?)
            result.priceOverrideReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["price_override_reason"] as AnyObject?)
            result.recurringPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["recurring_price"] as AnyObject?)
            result.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"] as AnyObject?)
            result.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["start_date"] as AnyObject?)
            result.subscriptionStatus = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["subscription_status"] as AnyObject?)
            result.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"] as AnyObject?)
            return result
        }


        // Decoder for [InvoiceCreateRequest]
        Decoders.addDecoder(clazz: [InvoiceCreateRequest].self) { (source: AnyObject, instance: AnyObject?) -> [InvoiceCreateRequest] in
            return Decoders.decode(clazz: [InvoiceCreateRequest].self, source: source)
        }
        // Decoder for InvoiceCreateRequest
        Decoders.addDecoder(clazz: InvoiceCreateRequest.self) { (source: AnyObject, instance: AnyObject?) -> InvoiceCreateRequest in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? InvoiceCreateRequest() : instance as! InvoiceCreateRequest
            
            result.cartGuid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cart_guid"] as AnyObject?)
            return result
        }


        // Decoder for [InvoiceItemResource]
        Decoders.addDecoder(clazz: [InvoiceItemResource].self) { (source: AnyObject, instance: AnyObject?) -> [InvoiceItemResource] in
            return Decoders.decode(clazz: [InvoiceItemResource].self, source: source)
        }
        // Decoder for InvoiceItemResource
        Decoders.addDecoder(clazz: InvoiceItemResource.self) { (source: AnyObject, instance: AnyObject?) -> InvoiceItemResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? InvoiceItemResource() : instance as! InvoiceItemResource
            
            result.bundleSku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_sku"] as AnyObject?)
            result.currentFulfillmentStatus = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["current_fulfillment_status"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            result.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"] as AnyObject?)
            result.itemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["item_id"] as AnyObject?)
            result.itemName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["item_name"] as AnyObject?)
            result.originalTotalPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["original_total_price"] as AnyObject?)
            result.originalUnitPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["original_unit_price"] as AnyObject?)
            result.qty = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["qty"] as AnyObject?)
            result.saleName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sale_name"] as AnyObject?)
            result.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"] as AnyObject?)
            result.skuDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku_description"] as AnyObject?)
            result.systemPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["system_price"] as AnyObject?)
            result.totalPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["total_price"] as AnyObject?)
            result.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"] as AnyObject?)
            result.unitPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["unit_price"] as AnyObject?)
            return result
        }


        // Decoder for [InvoiceLogEntry]
        Decoders.addDecoder(clazz: [InvoiceLogEntry].self) { (source: AnyObject, instance: AnyObject?) -> [InvoiceLogEntry] in
            return Decoders.decode(clazz: [InvoiceLogEntry].self, source: source)
        }
        // Decoder for InvoiceLogEntry
        Decoders.addDecoder(clazz: InvoiceLogEntry.self) { (source: AnyObject, instance: AnyObject?) -> InvoiceLogEntry in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? InvoiceLogEntry() : instance as! InvoiceLogEntry
            
            result.date = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["date"] as AnyObject?)
            result.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"] as AnyObject?)
            result.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return result
        }


        // Decoder for [InvoicePaymentStatusRequest]
        Decoders.addDecoder(clazz: [InvoicePaymentStatusRequest].self) { (source: AnyObject, instance: AnyObject?) -> [InvoicePaymentStatusRequest] in
            return Decoders.decode(clazz: [InvoicePaymentStatusRequest].self, source: source)
        }
        // Decoder for InvoicePaymentStatusRequest
        Decoders.addDecoder(clazz: InvoicePaymentStatusRequest.self) { (source: AnyObject, instance: AnyObject?) -> InvoicePaymentStatusRequest in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? InvoicePaymentStatusRequest() : instance as! InvoicePaymentStatusRequest
            
            result.paymentMethodId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["payment_method_id"] as AnyObject?)
            result.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"] as AnyObject?)
            return result
        }


        // Decoder for [InvoiceResource]
        Decoders.addDecoder(clazz: [InvoiceResource].self) { (source: AnyObject, instance: AnyObject?) -> [InvoiceResource] in
            return Decoders.decode(clazz: [InvoiceResource].self, source: source)
        }
        // Decoder for InvoiceResource
        Decoders.addDecoder(clazz: InvoiceResource.self) { (source: AnyObject, instance: AnyObject?) -> InvoiceResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? InvoiceResource() : instance as! InvoiceResource
            
            result.billingAddress1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billing_address1"] as AnyObject?)
            result.billingAddress2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billing_address2"] as AnyObject?)
            result.billingCityName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billing_city_name"] as AnyObject?)
            result.billingCountryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billing_country_name"] as AnyObject?)
            result.billingFullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billing_full_name"] as AnyObject?)
            result.billingPostalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billing_postal_code"] as AnyObject?)
            result.billingStateName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billing_state_name"] as AnyObject?)
            result.cartId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cart_id"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.currency = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency"] as AnyObject?)
            result.currentFulfillmentStatus = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["current_fulfillment_status"] as AnyObject?)
            result.currentPaymentStatus = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["current_payment_status"] as AnyObject?)
            result.discount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["discount"] as AnyObject?)
            result.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"] as AnyObject?)
            result.externalRef = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["external_ref"] as AnyObject?)
            result.fedTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["fed_tax"] as AnyObject?)
            result.grandTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["grand_total"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            result.invoiceNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["invoice_number"] as AnyObject?)
            result.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"] as AnyObject?)
            result.namePrefix = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name_prefix"] as AnyObject?)
            result.orderNotes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["order_notes"] as AnyObject?)
            result.parentInvoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["parent_invoice_id"] as AnyObject?)
            result.paymentMethodId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["payment_method_id"] as AnyObject?)
            result.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"] as AnyObject?)
            result.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone_number"] as AnyObject?)
            result.shipping = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["shipping"] as AnyObject?)
            result.shippingAddress1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipping_address1"] as AnyObject?)
            result.shippingAddress2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipping_address2"] as AnyObject?)
            result.shippingCityName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipping_city_name"] as AnyObject?)
            result.shippingCountryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipping_country_name"] as AnyObject?)
            result.shippingFullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipping_full_name"] as AnyObject?)
            result.shippingPostalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipping_postal_code"] as AnyObject?)
            result.shippingStateName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipping_state_name"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sort"] as AnyObject?)
            result.stateTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["state_tax"] as AnyObject?)
            result.subtotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["subtotal"] as AnyObject?)
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            result.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"] as AnyObject?)
            result.vendorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vendor_id"] as AnyObject?)
            result.vendorName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vendor_name"] as AnyObject?)
            return result
        }


        // Decoder for [Item]
        Decoders.addDecoder(clazz: [Item].self) { (source: AnyObject, instance: AnyObject?) -> [Item] in
            return Decoders.decode(clazz: [Item].self, source: source)
        }
        // Decoder for Item
        Decoders.addDecoder(clazz: Item.self) { (source: AnyObject, instance: AnyObject?) -> Item in
            let sourceDictionary = source as! [AnyHashable: Any]
            // Check discriminator to support inheritance
            if let discriminator = sourceDictionary["type_hint"] as? String, instance == nil && discriminator != "Item" {
                return Decoders.decode(clazz: Item.self, discriminator: discriminator, source: source)
            }
            let result = instance == nil ? Item() : instance as! Item
            
            result.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            result.behaviors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["behaviors"] as AnyObject?)
            result.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            result.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sort"] as AnyObject?)
            result.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            result.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            result.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"] as AnyObject?)
            result.uniqueKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_key"] as AnyObject?)
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return result
        }


        // Decoder for [ItemBehaviorDefinitionResource]
        Decoders.addDecoder(clazz: [ItemBehaviorDefinitionResource].self) { (source: AnyObject, instance: AnyObject?) -> [ItemBehaviorDefinitionResource] in
            return Decoders.decode(clazz: [ItemBehaviorDefinitionResource].self, source: source)
        }
        // Decoder for ItemBehaviorDefinitionResource
        Decoders.addDecoder(clazz: ItemBehaviorDefinitionResource.self) { (source: AnyObject, instance: AnyObject?) -> ItemBehaviorDefinitionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ItemBehaviorDefinitionResource() : instance as! ItemBehaviorDefinitionResource
            
            result.behavior = Decoders.decodeOptional(clazz: Behavior.self, source: sourceDictionary["behavior"] as AnyObject?)
            result.modifiable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["modifiable"] as AnyObject?)
            result._required = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["required"] as AnyObject?)
            return result
        }


        // Decoder for [ItemTemplateResource]
        Decoders.addDecoder(clazz: [ItemTemplateResource].self) { (source: AnyObject, instance: AnyObject?) -> [ItemTemplateResource] in
            return Decoders.decode(clazz: [ItemTemplateResource].self, source: source)
        }
        // Decoder for ItemTemplateResource
        Decoders.addDecoder(clazz: ItemTemplateResource.self) { (source: AnyObject, instance: AnyObject?) -> ItemTemplateResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ItemTemplateResource() : instance as! ItemTemplateResource
            
            result.behaviors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["behaviors"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"] as AnyObject?)
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return result
        }


        // Decoder for [KeyValuePairstringstring]
        Decoders.addDecoder(clazz: [KeyValuePairstringstring].self) { (source: AnyObject, instance: AnyObject?) -> [KeyValuePairstringstring] in
            return Decoders.decode(clazz: [KeyValuePairstringstring].self, source: source)
        }
        // Decoder for KeyValuePairstringstring
        Decoders.addDecoder(clazz: KeyValuePairstringstring.self) { (source: AnyObject, instance: AnyObject?) -> KeyValuePairstringstring in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? KeyValuePairstringstring() : instance as! KeyValuePairstringstring
            
            result.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"] as AnyObject?)
            result.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"] as AnyObject?)
            return result
        }


        // Decoder for [LeaderboardEntryResource]
        Decoders.addDecoder(clazz: [LeaderboardEntryResource].self) { (source: AnyObject, instance: AnyObject?) -> [LeaderboardEntryResource] in
            return Decoders.decode(clazz: [LeaderboardEntryResource].self, source: source)
        }
        // Decoder for LeaderboardEntryResource
        Decoders.addDecoder(clazz: LeaderboardEntryResource.self) { (source: AnyObject, instance: AnyObject?) -> LeaderboardEntryResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? LeaderboardEntryResource() : instance as! LeaderboardEntryResource
            
            result.rank = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["rank"] as AnyObject?)
            result.score = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["score"] as AnyObject?)
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            result.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"] as AnyObject?)
            return result
        }


        // Decoder for [LeaderboardResource]
        Decoders.addDecoder(clazz: [LeaderboardResource].self) { (source: AnyObject, instance: AnyObject?) -> [LeaderboardResource] in
            return Decoders.decode(clazz: [LeaderboardResource].self, source: source)
        }
        // Decoder for LeaderboardResource
        Decoders.addDecoder(clazz: LeaderboardResource.self) { (source: AnyObject, instance: AnyObject?) -> LeaderboardResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? LeaderboardResource() : instance as! LeaderboardResource
            
            result.entries = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entries"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            result.strategy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["strategy"] as AnyObject?)
            return result
        }


        // Decoder for [LevelingResource]
        Decoders.addDecoder(clazz: [LevelingResource].self) { (source: AnyObject, instance: AnyObject?) -> [LevelingResource] in
            return Decoders.decode(clazz: [LevelingResource].self, source: source)
        }
        // Decoder for LevelingResource
        Decoders.addDecoder(clazz: LevelingResource.self) { (source: AnyObject, instance: AnyObject?) -> LevelingResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? LevelingResource() : instance as! LevelingResource
            
            result.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.tiers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tiers"] as AnyObject?)
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return result
        }


        // Decoder for [LimitedGettableGroup]
        Decoders.addDecoder(clazz: [LimitedGettableGroup].self) { (source: AnyObject, instance: AnyObject?) -> [LimitedGettableGroup] in
            return Decoders.decode(clazz: [LimitedGettableGroup].self, source: source)
        }
        // Decoder for LimitedGettableGroup
        Decoders.addDecoder(clazz: LimitedGettableGroup.self) { (source: AnyObject, instance: AnyObject?) -> LimitedGettableGroup in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? LimitedGettableGroup() : instance as! LimitedGettableGroup
            
            result.activeOnly = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active_only"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.ownedLimit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["owned_limit"] as AnyObject?)
            return result
        }


        // Decoder for [Localizer]
        Decoders.addDecoder(clazz: [Localizer].self) { (source: AnyObject, instance: AnyObject?) -> [Localizer] in
            return Decoders.decode(clazz: [Localizer].self, source: source)
        }
        // Decoder for Localizer
        Decoders.addDecoder(clazz: Localizer.self) { (source: AnyObject, instance: AnyObject?) -> Localizer in
            if let source = source as? Any {
                return source
            }
            fatalError("Source \(source) is not convertible to typealias Localizer: Maybe swagger file is insufficient")
        }


        // Decoder for [LocationLogResource]
        Decoders.addDecoder(clazz: [LocationLogResource].self) { (source: AnyObject, instance: AnyObject?) -> [LocationLogResource] in
            return Decoders.decode(clazz: [LocationLogResource].self, source: source)
        }
        // Decoder for LocationLogResource
        Decoders.addDecoder(clazz: LocationLogResource.self) { (source: AnyObject, instance: AnyObject?) -> LocationLogResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? LocationLogResource() : instance as! LocationLogResource
            
            result.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"] as AnyObject?)
            result.ip = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ip"] as AnyObject?)
            result.time = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["time"] as AnyObject?)
            return result
        }


        // Decoder for [LookupResource]
        Decoders.addDecoder(clazz: [LookupResource].self) { (source: AnyObject, instance: AnyObject?) -> [LookupResource] in
            return Decoders.decode(clazz: [LookupResource].self, source: source)
        }
        // Decoder for LookupResource
        Decoders.addDecoder(clazz: LookupResource.self) { (source: AnyObject, instance: AnyObject?) -> LookupResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? LookupResource() : instance as! LookupResource
            
            result.lookupKey = Decoders.decodeOptional(clazz: ExpressionResource.self, source: sourceDictionary["lookup_key"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.valueType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value_type"] as AnyObject?)
            return result
        }


        // Decoder for [LookupTypeResource]
        Decoders.addDecoder(clazz: [LookupTypeResource].self) { (source: AnyObject, instance: AnyObject?) -> [LookupTypeResource] in
            return Decoders.decode(clazz: [LookupTypeResource].self, source: source)
        }
        // Decoder for LookupTypeResource
        Decoders.addDecoder(clazz: LookupTypeResource.self) { (source: AnyObject, instance: AnyObject?) -> LookupTypeResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? LookupTypeResource() : instance as! LookupTypeResource
            
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.keyType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key_type"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.valueType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value_type"] as AnyObject?)
            return result
        }


        // Decoder for [Maintenance]
        Decoders.addDecoder(clazz: [Maintenance].self) { (source: AnyObject, instance: AnyObject?) -> [Maintenance] in
            return Decoders.decode(clazz: [Maintenance].self, source: source)
        }
        // Decoder for Maintenance
        Decoders.addDecoder(clazz: Maintenance.self) { (source: AnyObject, instance: AnyObject?) -> Maintenance in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Maintenance() : instance as! Maintenance
            
            result.accessLocked = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["access_locked"] as AnyObject?)
            result.details = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["details"] as AnyObject?)
            result.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"] as AnyObject?)
            return result
        }


        // Decoder for [MapResource]
        Decoders.addDecoder(clazz: [MapResource].self) { (source: AnyObject, instance: AnyObject?) -> [MapResource] in
            return Decoders.decode(clazz: [MapResource].self, source: source)
        }
        // Decoder for MapResource
        Decoders.addDecoder(clazz: MapResource.self) { (source: AnyObject, instance: AnyObject?) -> MapResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? MapResource() : instance as! MapResource
            
            result.map = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["map"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return result
        }


        // Decoder for [Mapstringobject]
        Decoders.addDecoder(clazz: [Mapstringobject].self) { (source: AnyObject, instance: AnyObject?) -> [Mapstringobject] in
            return Decoders.decode(clazz: [Mapstringobject].self, source: source)
        }
        // Decoder for Mapstringobject
        Decoders.addDecoder(clazz: Mapstringobject.self) { (source: AnyObject, instance: AnyObject?) -> Mapstringobject in
            if let source = source as? Any {
                return source
            }
            fatalError("Source \(source) is not convertible to typealias Mapstringobject: Maybe swagger file is insufficient")
        }


        // Decoder for [MetricResource]
        Decoders.addDecoder(clazz: [MetricResource].self) { (source: AnyObject, instance: AnyObject?) -> [MetricResource] in
            return Decoders.decode(clazz: [MetricResource].self, source: source)
        }
        // Decoder for MetricResource
        Decoders.addDecoder(clazz: MetricResource.self) { (source: AnyObject, instance: AnyObject?) -> MetricResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? MetricResource() : instance as! MetricResource
            
            result.activityOccurenceId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["activity_occurence_id"] as AnyObject?)
            result.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            result.value = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["value"] as AnyObject?)
            return result
        }


        // Decoder for [MongoDatabaseConfig]
        Decoders.addDecoder(clazz: [MongoDatabaseConfig].self) { (source: AnyObject, instance: AnyObject?) -> [MongoDatabaseConfig] in
            return Decoders.decode(clazz: [MongoDatabaseConfig].self, source: source)
        }
        // Decoder for MongoDatabaseConfig
        Decoders.addDecoder(clazz: MongoDatabaseConfig.self) { (source: AnyObject, instance: AnyObject?) -> MongoDatabaseConfig in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? MongoDatabaseConfig() : instance as! MongoDatabaseConfig
            
            result.dbName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["db_name"] as AnyObject?)
            result.options = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["options"] as AnyObject?)
            result.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"] as AnyObject?)
            result.servers = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["servers"] as AnyObject?)
            result.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"] as AnyObject?)
            return result
        }


        // Decoder for [NestedCategory]
        Decoders.addDecoder(clazz: [NestedCategory].self) { (source: AnyObject, instance: AnyObject?) -> [NestedCategory] in
            return Decoders.decode(clazz: [NestedCategory].self, source: source)
        }
        // Decoder for NestedCategory
        Decoders.addDecoder(clazz: NestedCategory.self) { (source: AnyObject, instance: AnyObject?) -> NestedCategory in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? NestedCategory() : instance as! NestedCategory
            
            result.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return result
        }


        // Decoder for [NewPasswordRequest]
        Decoders.addDecoder(clazz: [NewPasswordRequest].self) { (source: AnyObject, instance: AnyObject?) -> [NewPasswordRequest] in
            return Decoders.decode(clazz: [NewPasswordRequest].self, source: source)
        }
        // Decoder for NewPasswordRequest
        Decoders.addDecoder(clazz: NewPasswordRequest.self) { (source: AnyObject, instance: AnyObject?) -> NewPasswordRequest in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? NewPasswordRequest() : instance as! NewPasswordRequest
            
            result.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"] as AnyObject?)
            result.secret = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["secret"] as AnyObject?)
            return result
        }


        // Decoder for [OAuth2Resource]
        Decoders.addDecoder(clazz: [OAuth2Resource].self) { (source: AnyObject, instance: AnyObject?) -> [OAuth2Resource] in
            return Decoders.decode(clazz: [OAuth2Resource].self, source: source)
        }
        // Decoder for OAuth2Resource
        Decoders.addDecoder(clazz: OAuth2Resource.self) { (source: AnyObject, instance: AnyObject?) -> OAuth2Resource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? OAuth2Resource() : instance as! OAuth2Resource
            
            result.accessToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["access_token"] as AnyObject?)
            result.expiresIn = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["expires_in"] as AnyObject?)
            result.scope = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["scope"] as AnyObject?)
            result.tokenType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token_type"] as AnyObject?)
            return result
        }


        // Decoder for [OauthAccessTokenResource]
        Decoders.addDecoder(clazz: [OauthAccessTokenResource].self) { (source: AnyObject, instance: AnyObject?) -> [OauthAccessTokenResource] in
            return Decoders.decode(clazz: [OauthAccessTokenResource].self, source: source)
        }
        // Decoder for OauthAccessTokenResource
        Decoders.addDecoder(clazz: OauthAccessTokenResource.self) { (source: AnyObject, instance: AnyObject?) -> OauthAccessTokenResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? OauthAccessTokenResource() : instance as! OauthAccessTokenResource
            
            result.clientId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["client_id"] as AnyObject?)
            result.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"] as AnyObject?)
            result.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"] as AnyObject?)
            return result
        }


        // Decoder for [Operator]
        Decoders.addDecoder(clazz: [Operator].self) { (source: AnyObject, instance: AnyObject?) -> [Operator] in
            return Decoders.decode(clazz: [Operator].self, source: source)
        }
        // Decoder for Operator
        Decoders.addDecoder(clazz: Operator.self) { (source: AnyObject, instance: AnyObject?) -> Operator in
            if let source = source as? Any {
                return source
            }
            fatalError("Source \(source) is not convertible to typealias Operator: Maybe swagger file is insufficient")
        }


        // Decoder for [OptimalPaymentRequest]
        Decoders.addDecoder(clazz: [OptimalPaymentRequest].self) { (source: AnyObject, instance: AnyObject?) -> [OptimalPaymentRequest] in
            return Decoders.decode(clazz: [OptimalPaymentRequest].self, source: source)
        }
        // Decoder for OptimalPaymentRequest
        Decoders.addDecoder(clazz: OptimalPaymentRequest.self) { (source: AnyObject, instance: AnyObject?) -> OptimalPaymentRequest in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? OptimalPaymentRequest() : instance as! OptimalPaymentRequest
            
            result.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"] as AnyObject?)
            result.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["first_name"] as AnyObject?)
            result.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"] as AnyObject?)
            result.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last_name"] as AnyObject?)
            result.onDecline = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["on_decline"] as AnyObject?)
            result.onError = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["on_error"] as AnyObject?)
            result.onSuccess = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["on_success"] as AnyObject?)
            return result
        }


        // Decoder for [Order]
        Decoders.addDecoder(clazz: [Order].self) { (source: AnyObject, instance: AnyObject?) -> [Order] in
            return Decoders.decode(clazz: [Order].self, source: source)
        }
        // Decoder for Order
        Decoders.addDecoder(clazz: Order.self) { (source: AnyObject, instance: AnyObject?) -> Order in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Order() : instance as! Order
            
            result.ascending = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ascending"] as AnyObject?)
            if let direction = sourceDictionary["direction"] as? String { 
                result.direction = Order.Direction(rawValue: (direction))
            }
            
            result.ignoreCase = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ignore_case"] as AnyObject?)
            if let nullHandling = sourceDictionary["null_handling"] as? String { 
                result.nullHandling = Order.NullHandling(rawValue: (nullHandling))
            }
            
            result.property = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["property"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceAchievementDefinitionResource]
        Decoders.addDecoder(clazz: [PageResourceAchievementDefinitionResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceAchievementDefinitionResource] in
            return Decoders.decode(clazz: [PageResourceAchievementDefinitionResource].self, source: source)
        }
        // Decoder for PageResourceAchievementDefinitionResource
        Decoders.addDecoder(clazz: PageResourceAchievementDefinitionResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceAchievementDefinitionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceAchievementDefinitionResource() : instance as! PageResourceAchievementDefinitionResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceAggregateCountResource]
        Decoders.addDecoder(clazz: [PageResourceAggregateCountResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceAggregateCountResource] in
            return Decoders.decode(clazz: [PageResourceAggregateCountResource].self, source: source)
        }
        // Decoder for PageResourceAggregateCountResource
        Decoders.addDecoder(clazz: PageResourceAggregateCountResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceAggregateCountResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceAggregateCountResource() : instance as! PageResourceAggregateCountResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceAggregateInvoiceReportResource]
        Decoders.addDecoder(clazz: [PageResourceAggregateInvoiceReportResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceAggregateInvoiceReportResource] in
            return Decoders.decode(clazz: [PageResourceAggregateInvoiceReportResource].self, source: source)
        }
        // Decoder for PageResourceAggregateInvoiceReportResource
        Decoders.addDecoder(clazz: PageResourceAggregateInvoiceReportResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceAggregateInvoiceReportResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceAggregateInvoiceReportResource() : instance as! PageResourceAggregateInvoiceReportResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceArticleResource]
        Decoders.addDecoder(clazz: [PageResourceArticleResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceArticleResource] in
            return Decoders.decode(clazz: [PageResourceArticleResource].self, source: source)
        }
        // Decoder for PageResourceArticleResource
        Decoders.addDecoder(clazz: PageResourceArticleResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceArticleResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceArticleResource() : instance as! PageResourceArticleResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceArtistResource]
        Decoders.addDecoder(clazz: [PageResourceArtistResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceArtistResource] in
            return Decoders.decode(clazz: [PageResourceArtistResource].self, source: source)
        }
        // Decoder for PageResourceArtistResource
        Decoders.addDecoder(clazz: PageResourceArtistResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceArtistResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceArtistResource() : instance as! PageResourceArtistResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceBareActivityResource]
        Decoders.addDecoder(clazz: [PageResourceBareActivityResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceBareActivityResource] in
            return Decoders.decode(clazz: [PageResourceBareActivityResource].self, source: source)
        }
        // Decoder for PageResourceBareActivityResource
        Decoders.addDecoder(clazz: PageResourceBareActivityResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceBareActivityResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceBareActivityResource() : instance as! PageResourceBareActivityResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceBareChallengeActivityResource]
        Decoders.addDecoder(clazz: [PageResourceBareChallengeActivityResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceBareChallengeActivityResource] in
            return Decoders.decode(clazz: [PageResourceBareChallengeActivityResource].self, source: source)
        }
        // Decoder for PageResourceBareChallengeActivityResource
        Decoders.addDecoder(clazz: PageResourceBareChallengeActivityResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceBareChallengeActivityResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceBareChallengeActivityResource() : instance as! PageResourceBareChallengeActivityResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceBillingReport]
        Decoders.addDecoder(clazz: [PageResourceBillingReport].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceBillingReport] in
            return Decoders.decode(clazz: [PageResourceBillingReport].self, source: source)
        }
        // Decoder for PageResourceBillingReport
        Decoders.addDecoder(clazz: PageResourceBillingReport.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceBillingReport in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceBillingReport() : instance as! PageResourceBillingReport
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceBreCategoryResource]
        Decoders.addDecoder(clazz: [PageResourceBreCategoryResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceBreCategoryResource] in
            return Decoders.decode(clazz: [PageResourceBreCategoryResource].self, source: source)
        }
        // Decoder for PageResourceBreCategoryResource
        Decoders.addDecoder(clazz: PageResourceBreCategoryResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceBreCategoryResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceBreCategoryResource() : instance as! PageResourceBreCategoryResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceBreEventLog]
        Decoders.addDecoder(clazz: [PageResourceBreEventLog].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceBreEventLog] in
            return Decoders.decode(clazz: [PageResourceBreEventLog].self, source: source)
        }
        // Decoder for PageResourceBreEventLog
        Decoders.addDecoder(clazz: PageResourceBreEventLog.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceBreEventLog in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceBreEventLog() : instance as! PageResourceBreEventLog
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceBreGlobalResource]
        Decoders.addDecoder(clazz: [PageResourceBreGlobalResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceBreGlobalResource] in
            return Decoders.decode(clazz: [PageResourceBreGlobalResource].self, source: source)
        }
        // Decoder for PageResourceBreGlobalResource
        Decoders.addDecoder(clazz: PageResourceBreGlobalResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceBreGlobalResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceBreGlobalResource() : instance as! PageResourceBreGlobalResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceBreRule]
        Decoders.addDecoder(clazz: [PageResourceBreRule].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceBreRule] in
            return Decoders.decode(clazz: [PageResourceBreRule].self, source: source)
        }
        // Decoder for PageResourceBreRule
        Decoders.addDecoder(clazz: PageResourceBreRule.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceBreRule in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceBreRule() : instance as! PageResourceBreRule
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceBreTriggerResource]
        Decoders.addDecoder(clazz: [PageResourceBreTriggerResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceBreTriggerResource] in
            return Decoders.decode(clazz: [PageResourceBreTriggerResource].self, source: source)
        }
        // Decoder for PageResourceBreTriggerResource
        Decoders.addDecoder(clazz: PageResourceBreTriggerResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceBreTriggerResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceBreTriggerResource() : instance as! PageResourceBreTriggerResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceCampaignResource]
        Decoders.addDecoder(clazz: [PageResourceCampaignResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceCampaignResource] in
            return Decoders.decode(clazz: [PageResourceCampaignResource].self, source: source)
        }
        // Decoder for PageResourceCampaignResource
        Decoders.addDecoder(clazz: PageResourceCampaignResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceCampaignResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceCampaignResource() : instance as! PageResourceCampaignResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceCartSummary]
        Decoders.addDecoder(clazz: [PageResourceCartSummary].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceCartSummary] in
            return Decoders.decode(clazz: [PageResourceCartSummary].self, source: source)
        }
        // Decoder for PageResourceCartSummary
        Decoders.addDecoder(clazz: PageResourceCartSummary.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceCartSummary in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceCartSummary() : instance as! PageResourceCartSummary
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceCatalogSale]
        Decoders.addDecoder(clazz: [PageResourceCatalogSale].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceCatalogSale] in
            return Decoders.decode(clazz: [PageResourceCatalogSale].self, source: source)
        }
        // Decoder for PageResourceCatalogSale
        Decoders.addDecoder(clazz: PageResourceCatalogSale.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceCatalogSale in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceCatalogSale() : instance as! PageResourceCatalogSale
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceCategoryResource]
        Decoders.addDecoder(clazz: [PageResourceCategoryResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceCategoryResource] in
            return Decoders.decode(clazz: [PageResourceCategoryResource].self, source: source)
        }
        // Decoder for PageResourceCategoryResource
        Decoders.addDecoder(clazz: PageResourceCategoryResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceCategoryResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceCategoryResource() : instance as! PageResourceCategoryResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceChallengeEventParticipantResource]
        Decoders.addDecoder(clazz: [PageResourceChallengeEventParticipantResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceChallengeEventParticipantResource] in
            return Decoders.decode(clazz: [PageResourceChallengeEventParticipantResource].self, source: source)
        }
        // Decoder for PageResourceChallengeEventParticipantResource
        Decoders.addDecoder(clazz: PageResourceChallengeEventParticipantResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceChallengeEventParticipantResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceChallengeEventParticipantResource() : instance as! PageResourceChallengeEventParticipantResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceChallengeEventResource]
        Decoders.addDecoder(clazz: [PageResourceChallengeEventResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceChallengeEventResource] in
            return Decoders.decode(clazz: [PageResourceChallengeEventResource].self, source: source)
        }
        // Decoder for PageResourceChallengeEventResource
        Decoders.addDecoder(clazz: PageResourceChallengeEventResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceChallengeEventResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceChallengeEventResource() : instance as! PageResourceChallengeEventResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceChallengeResource]
        Decoders.addDecoder(clazz: [PageResourceChallengeResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceChallengeResource] in
            return Decoders.decode(clazz: [PageResourceChallengeResource].self, source: source)
        }
        // Decoder for PageResourceChallengeResource
        Decoders.addDecoder(clazz: PageResourceChallengeResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceChallengeResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceChallengeResource() : instance as! PageResourceChallengeResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceClientResource]
        Decoders.addDecoder(clazz: [PageResourceClientResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceClientResource] in
            return Decoders.decode(clazz: [PageResourceClientResource].self, source: source)
        }
        // Decoder for PageResourceClientResource
        Decoders.addDecoder(clazz: PageResourceClientResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceClientResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceClientResource() : instance as! PageResourceClientResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceCommentResource]
        Decoders.addDecoder(clazz: [PageResourceCommentResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceCommentResource] in
            return Decoders.decode(clazz: [PageResourceCommentResource].self, source: source)
        }
        // Decoder for PageResourceCommentResource
        Decoders.addDecoder(clazz: PageResourceCommentResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceCommentResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceCommentResource() : instance as! PageResourceCommentResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceConfig]
        Decoders.addDecoder(clazz: [PageResourceConfig].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceConfig] in
            return Decoders.decode(clazz: [PageResourceConfig].self, source: source)
        }
        // Decoder for PageResourceConfig
        Decoders.addDecoder(clazz: PageResourceConfig.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceConfig in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceConfig() : instance as! PageResourceConfig
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceCountryTaxResource]
        Decoders.addDecoder(clazz: [PageResourceCountryTaxResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceCountryTaxResource] in
            return Decoders.decode(clazz: [PageResourceCountryTaxResource].self, source: source)
        }
        // Decoder for PageResourceCountryTaxResource
        Decoders.addDecoder(clazz: PageResourceCountryTaxResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceCountryTaxResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceCountryTaxResource() : instance as! PageResourceCountryTaxResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceCurrencyResource]
        Decoders.addDecoder(clazz: [PageResourceCurrencyResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceCurrencyResource] in
            return Decoders.decode(clazz: [PageResourceCurrencyResource].self, source: source)
        }
        // Decoder for PageResourceCurrencyResource
        Decoders.addDecoder(clazz: PageResourceCurrencyResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceCurrencyResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceCurrencyResource() : instance as! PageResourceCurrencyResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceDeviceResource]
        Decoders.addDecoder(clazz: [PageResourceDeviceResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceDeviceResource] in
            return Decoders.decode(clazz: [PageResourceDeviceResource].self, source: source)
        }
        // Decoder for PageResourceDeviceResource
        Decoders.addDecoder(clazz: PageResourceDeviceResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceDeviceResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceDeviceResource() : instance as! PageResourceDeviceResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceDispositionResource]
        Decoders.addDecoder(clazz: [PageResourceDispositionResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceDispositionResource] in
            return Decoders.decode(clazz: [PageResourceDispositionResource].self, source: source)
        }
        // Decoder for PageResourceDispositionResource
        Decoders.addDecoder(clazz: PageResourceDispositionResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceDispositionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceDispositionResource() : instance as! PageResourceDispositionResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceEntitlementItem]
        Decoders.addDecoder(clazz: [PageResourceEntitlementItem].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceEntitlementItem] in
            return Decoders.decode(clazz: [PageResourceEntitlementItem].self, source: source)
        }
        // Decoder for PageResourceEntitlementItem
        Decoders.addDecoder(clazz: PageResourceEntitlementItem.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceEntitlementItem in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceEntitlementItem() : instance as! PageResourceEntitlementItem
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceFlagReportResource]
        Decoders.addDecoder(clazz: [PageResourceFlagReportResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceFlagReportResource] in
            return Decoders.decode(clazz: [PageResourceFlagReportResource].self, source: source)
        }
        // Decoder for PageResourceFlagReportResource
        Decoders.addDecoder(clazz: PageResourceFlagReportResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceFlagReportResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceFlagReportResource() : instance as! PageResourceFlagReportResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceForwardLog]
        Decoders.addDecoder(clazz: [PageResourceForwardLog].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceForwardLog] in
            return Decoders.decode(clazz: [PageResourceForwardLog].self, source: source)
        }
        // Decoder for PageResourceForwardLog
        Decoders.addDecoder(clazz: PageResourceForwardLog.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceForwardLog in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceForwardLog() : instance as! PageResourceForwardLog
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceFulfillmentType]
        Decoders.addDecoder(clazz: [PageResourceFulfillmentType].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceFulfillmentType] in
            return Decoders.decode(clazz: [PageResourceFulfillmentType].self, source: source)
        }
        // Decoder for PageResourceFulfillmentType
        Decoders.addDecoder(clazz: PageResourceFulfillmentType.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceFulfillmentType in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceFulfillmentType() : instance as! PageResourceFulfillmentType
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceGroupMemberResource]
        Decoders.addDecoder(clazz: [PageResourceGroupMemberResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceGroupMemberResource] in
            return Decoders.decode(clazz: [PageResourceGroupMemberResource].self, source: source)
        }
        // Decoder for PageResourceGroupMemberResource
        Decoders.addDecoder(clazz: PageResourceGroupMemberResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceGroupMemberResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceGroupMemberResource() : instance as! PageResourceGroupMemberResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceGroupResource]
        Decoders.addDecoder(clazz: [PageResourceGroupResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceGroupResource] in
            return Decoders.decode(clazz: [PageResourceGroupResource].self, source: source)
        }
        // Decoder for PageResourceGroupResource
        Decoders.addDecoder(clazz: PageResourceGroupResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceGroupResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceGroupResource() : instance as! PageResourceGroupResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceImportJobResource]
        Decoders.addDecoder(clazz: [PageResourceImportJobResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceImportJobResource] in
            return Decoders.decode(clazz: [PageResourceImportJobResource].self, source: source)
        }
        // Decoder for PageResourceImportJobResource
        Decoders.addDecoder(clazz: PageResourceImportJobResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceImportJobResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceImportJobResource() : instance as! PageResourceImportJobResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceInvoiceLogEntry]
        Decoders.addDecoder(clazz: [PageResourceInvoiceLogEntry].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceInvoiceLogEntry] in
            return Decoders.decode(clazz: [PageResourceInvoiceLogEntry].self, source: source)
        }
        // Decoder for PageResourceInvoiceLogEntry
        Decoders.addDecoder(clazz: PageResourceInvoiceLogEntry.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceInvoiceLogEntry in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceInvoiceLogEntry() : instance as! PageResourceInvoiceLogEntry
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceInvoiceResource]
        Decoders.addDecoder(clazz: [PageResourceInvoiceResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceInvoiceResource] in
            return Decoders.decode(clazz: [PageResourceInvoiceResource].self, source: source)
        }
        // Decoder for PageResourceInvoiceResource
        Decoders.addDecoder(clazz: PageResourceInvoiceResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceInvoiceResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceInvoiceResource() : instance as! PageResourceInvoiceResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceItemTemplateResource]
        Decoders.addDecoder(clazz: [PageResourceItemTemplateResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceItemTemplateResource] in
            return Decoders.decode(clazz: [PageResourceItemTemplateResource].self, source: source)
        }
        // Decoder for PageResourceItemTemplateResource
        Decoders.addDecoder(clazz: PageResourceItemTemplateResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceItemTemplateResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceItemTemplateResource() : instance as! PageResourceItemTemplateResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceLevelingResource]
        Decoders.addDecoder(clazz: [PageResourceLevelingResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceLevelingResource] in
            return Decoders.decode(clazz: [PageResourceLevelingResource].self, source: source)
        }
        // Decoder for PageResourceLevelingResource
        Decoders.addDecoder(clazz: PageResourceLevelingResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceLevelingResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceLevelingResource() : instance as! PageResourceLevelingResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceLocationLogResource]
        Decoders.addDecoder(clazz: [PageResourceLocationLogResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceLocationLogResource] in
            return Decoders.decode(clazz: [PageResourceLocationLogResource].self, source: source)
        }
        // Decoder for PageResourceLocationLogResource
        Decoders.addDecoder(clazz: PageResourceLocationLogResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceLocationLogResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceLocationLogResource() : instance as! PageResourceLocationLogResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceMapstringobject]
        Decoders.addDecoder(clazz: [PageResourceMapstringobject].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceMapstringobject] in
            return Decoders.decode(clazz: [PageResourceMapstringobject].self, source: source)
        }
        // Decoder for PageResourceMapstringobject
        Decoders.addDecoder(clazz: PageResourceMapstringobject.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceMapstringobject in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceMapstringobject() : instance as! PageResourceMapstringobject
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceOauthAccessTokenResource]
        Decoders.addDecoder(clazz: [PageResourceOauthAccessTokenResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceOauthAccessTokenResource] in
            return Decoders.decode(clazz: [PageResourceOauthAccessTokenResource].self, source: source)
        }
        // Decoder for PageResourceOauthAccessTokenResource
        Decoders.addDecoder(clazz: PageResourceOauthAccessTokenResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceOauthAccessTokenResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceOauthAccessTokenResource() : instance as! PageResourceOauthAccessTokenResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourcePermissionResource]
        Decoders.addDecoder(clazz: [PageResourcePermissionResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourcePermissionResource] in
            return Decoders.decode(clazz: [PageResourcePermissionResource].self, source: source)
        }
        // Decoder for PageResourcePermissionResource
        Decoders.addDecoder(clazz: PageResourcePermissionResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourcePermissionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourcePermissionResource() : instance as! PageResourcePermissionResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourcePollResource]
        Decoders.addDecoder(clazz: [PageResourcePollResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourcePollResource] in
            return Decoders.decode(clazz: [PageResourcePollResource].self, source: source)
        }
        // Decoder for PageResourcePollResource
        Decoders.addDecoder(clazz: PageResourcePollResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourcePollResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourcePollResource() : instance as! PageResourcePollResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceQuestionResource]
        Decoders.addDecoder(clazz: [PageResourceQuestionResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceQuestionResource] in
            return Decoders.decode(clazz: [PageResourceQuestionResource].self, source: source)
        }
        // Decoder for PageResourceQuestionResource
        Decoders.addDecoder(clazz: PageResourceQuestionResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceQuestionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceQuestionResource() : instance as! PageResourceQuestionResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceQuestionTemplateResource]
        Decoders.addDecoder(clazz: [PageResourceQuestionTemplateResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceQuestionTemplateResource] in
            return Decoders.decode(clazz: [PageResourceQuestionTemplateResource].self, source: source)
        }
        // Decoder for PageResourceQuestionTemplateResource
        Decoders.addDecoder(clazz: PageResourceQuestionTemplateResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceQuestionTemplateResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceQuestionTemplateResource() : instance as! PageResourceQuestionTemplateResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceRevenueCountryReportResource]
        Decoders.addDecoder(clazz: [PageResourceRevenueCountryReportResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceRevenueCountryReportResource] in
            return Decoders.decode(clazz: [PageResourceRevenueCountryReportResource].self, source: source)
        }
        // Decoder for PageResourceRevenueCountryReportResource
        Decoders.addDecoder(clazz: PageResourceRevenueCountryReportResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceRevenueCountryReportResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceRevenueCountryReportResource() : instance as! PageResourceRevenueCountryReportResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceRevenueProductReportResource]
        Decoders.addDecoder(clazz: [PageResourceRevenueProductReportResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceRevenueProductReportResource] in
            return Decoders.decode(clazz: [PageResourceRevenueProductReportResource].self, source: source)
        }
        // Decoder for PageResourceRevenueProductReportResource
        Decoders.addDecoder(clazz: PageResourceRevenueProductReportResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceRevenueProductReportResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceRevenueProductReportResource() : instance as! PageResourceRevenueProductReportResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceRewardSetResource]
        Decoders.addDecoder(clazz: [PageResourceRewardSetResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceRewardSetResource] in
            return Decoders.decode(clazz: [PageResourceRewardSetResource].self, source: source)
        }
        // Decoder for PageResourceRewardSetResource
        Decoders.addDecoder(clazz: PageResourceRewardSetResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceRewardSetResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceRewardSetResource() : instance as! PageResourceRewardSetResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceRoleResource]
        Decoders.addDecoder(clazz: [PageResourceRoleResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceRoleResource] in
            return Decoders.decode(clazz: [PageResourceRoleResource].self, source: source)
        }
        // Decoder for PageResourceRoleResource
        Decoders.addDecoder(clazz: PageResourceRoleResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceRoleResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceRoleResource() : instance as! PageResourceRoleResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceSavedAddressResource]
        Decoders.addDecoder(clazz: [PageResourceSavedAddressResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceSavedAddressResource] in
            return Decoders.decode(clazz: [PageResourceSavedAddressResource].self, source: source)
        }
        // Decoder for PageResourceSavedAddressResource
        Decoders.addDecoder(clazz: PageResourceSavedAddressResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceSavedAddressResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceSavedAddressResource() : instance as! PageResourceSavedAddressResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceSimpleReferenceResourceobject]
        Decoders.addDecoder(clazz: [PageResourceSimpleReferenceResourceobject].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceSimpleReferenceResourceobject] in
            return Decoders.decode(clazz: [PageResourceSimpleReferenceResourceobject].self, source: source)
        }
        // Decoder for PageResourceSimpleReferenceResourceobject
        Decoders.addDecoder(clazz: PageResourceSimpleReferenceResourceobject.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceSimpleReferenceResourceobject in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceSimpleReferenceResourceobject() : instance as! PageResourceSimpleReferenceResourceobject
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceSimpleUserResource]
        Decoders.addDecoder(clazz: [PageResourceSimpleUserResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceSimpleUserResource] in
            return Decoders.decode(clazz: [PageResourceSimpleUserResource].self, source: source)
        }
        // Decoder for PageResourceSimpleUserResource
        Decoders.addDecoder(clazz: PageResourceSimpleUserResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceSimpleUserResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceSimpleUserResource() : instance as! PageResourceSimpleUserResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceSimpleWallet]
        Decoders.addDecoder(clazz: [PageResourceSimpleWallet].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceSimpleWallet] in
            return Decoders.decode(clazz: [PageResourceSimpleWallet].self, source: source)
        }
        // Decoder for PageResourceSimpleWallet
        Decoders.addDecoder(clazz: PageResourceSimpleWallet.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceSimpleWallet in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceSimpleWallet() : instance as! PageResourceSimpleWallet
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceStateTaxResource]
        Decoders.addDecoder(clazz: [PageResourceStateTaxResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceStateTaxResource] in
            return Decoders.decode(clazz: [PageResourceStateTaxResource].self, source: source)
        }
        // Decoder for PageResourceStateTaxResource
        Decoders.addDecoder(clazz: PageResourceStateTaxResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceStateTaxResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceStateTaxResource() : instance as! PageResourceStateTaxResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceStoreItem]
        Decoders.addDecoder(clazz: [PageResourceStoreItem].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceStoreItem] in
            return Decoders.decode(clazz: [PageResourceStoreItem].self, source: source)
        }
        // Decoder for PageResourceStoreItem
        Decoders.addDecoder(clazz: PageResourceStoreItem.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceStoreItem in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceStoreItem() : instance as! PageResourceStoreItem
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceStoreItemTemplateResource]
        Decoders.addDecoder(clazz: [PageResourceStoreItemTemplateResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceStoreItemTemplateResource] in
            return Decoders.decode(clazz: [PageResourceStoreItemTemplateResource].self, source: source)
        }
        // Decoder for PageResourceStoreItemTemplateResource
        Decoders.addDecoder(clazz: PageResourceStoreItemTemplateResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceStoreItemTemplateResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceStoreItemTemplateResource() : instance as! PageResourceStoreItemTemplateResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceSubscriptionResource]
        Decoders.addDecoder(clazz: [PageResourceSubscriptionResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceSubscriptionResource] in
            return Decoders.decode(clazz: [PageResourceSubscriptionResource].self, source: source)
        }
        // Decoder for PageResourceSubscriptionResource
        Decoders.addDecoder(clazz: PageResourceSubscriptionResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceSubscriptionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceSubscriptionResource() : instance as! PageResourceSubscriptionResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceSubscriptionTemplateResource]
        Decoders.addDecoder(clazz: [PageResourceSubscriptionTemplateResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceSubscriptionTemplateResource] in
            return Decoders.decode(clazz: [PageResourceSubscriptionTemplateResource].self, source: source)
        }
        // Decoder for PageResourceSubscriptionTemplateResource
        Decoders.addDecoder(clazz: PageResourceSubscriptionTemplateResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceSubscriptionTemplateResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceSubscriptionTemplateResource() : instance as! PageResourceSubscriptionTemplateResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceTemplateResource]
        Decoders.addDecoder(clazz: [PageResourceTemplateResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceTemplateResource] in
            return Decoders.decode(clazz: [PageResourceTemplateResource].self, source: source)
        }
        // Decoder for PageResourceTemplateResource
        Decoders.addDecoder(clazz: PageResourceTemplateResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceTemplateResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceTemplateResource() : instance as! PageResourceTemplateResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceTransactionResource]
        Decoders.addDecoder(clazz: [PageResourceTransactionResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceTransactionResource] in
            return Decoders.decode(clazz: [PageResourceTransactionResource].self, source: source)
        }
        // Decoder for PageResourceTransactionResource
        Decoders.addDecoder(clazz: PageResourceTransactionResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceTransactionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceTransactionResource() : instance as! PageResourceTransactionResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceUsageInfo]
        Decoders.addDecoder(clazz: [PageResourceUsageInfo].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceUsageInfo] in
            return Decoders.decode(clazz: [PageResourceUsageInfo].self, source: source)
        }
        // Decoder for PageResourceUsageInfo
        Decoders.addDecoder(clazz: PageResourceUsageInfo.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceUsageInfo in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceUsageInfo() : instance as! PageResourceUsageInfo
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceUserAchievementGroupResource]
        Decoders.addDecoder(clazz: [PageResourceUserAchievementGroupResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceUserAchievementGroupResource] in
            return Decoders.decode(clazz: [PageResourceUserAchievementGroupResource].self, source: source)
        }
        // Decoder for PageResourceUserAchievementGroupResource
        Decoders.addDecoder(clazz: PageResourceUserAchievementGroupResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceUserAchievementGroupResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceUserAchievementGroupResource() : instance as! PageResourceUserAchievementGroupResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceUserActionLog]
        Decoders.addDecoder(clazz: [PageResourceUserActionLog].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceUserActionLog] in
            return Decoders.decode(clazz: [PageResourceUserActionLog].self, source: source)
        }
        // Decoder for PageResourceUserActionLog
        Decoders.addDecoder(clazz: PageResourceUserActionLog.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceUserActionLog in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceUserActionLog() : instance as! PageResourceUserActionLog
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceUserBaseResource]
        Decoders.addDecoder(clazz: [PageResourceUserBaseResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceUserBaseResource] in
            return Decoders.decode(clazz: [PageResourceUserBaseResource].self, source: source)
        }
        // Decoder for PageResourceUserBaseResource
        Decoders.addDecoder(clazz: PageResourceUserBaseResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceUserBaseResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceUserBaseResource() : instance as! PageResourceUserBaseResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceUserInventoryResource]
        Decoders.addDecoder(clazz: [PageResourceUserInventoryResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceUserInventoryResource] in
            return Decoders.decode(clazz: [PageResourceUserInventoryResource].self, source: source)
        }
        // Decoder for PageResourceUserInventoryResource
        Decoders.addDecoder(clazz: PageResourceUserInventoryResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceUserInventoryResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceUserInventoryResource() : instance as! PageResourceUserInventoryResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceUserItemLogResource]
        Decoders.addDecoder(clazz: [PageResourceUserItemLogResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceUserItemLogResource] in
            return Decoders.decode(clazz: [PageResourceUserItemLogResource].self, source: source)
        }
        // Decoder for PageResourceUserItemLogResource
        Decoders.addDecoder(clazz: PageResourceUserItemLogResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceUserItemLogResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceUserItemLogResource() : instance as! PageResourceUserItemLogResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceUserLevelingResource]
        Decoders.addDecoder(clazz: [PageResourceUserLevelingResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceUserLevelingResource] in
            return Decoders.decode(clazz: [PageResourceUserLevelingResource].self, source: source)
        }
        // Decoder for PageResourceUserLevelingResource
        Decoders.addDecoder(clazz: PageResourceUserLevelingResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceUserLevelingResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceUserLevelingResource() : instance as! PageResourceUserLevelingResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceUserRelationshipResource]
        Decoders.addDecoder(clazz: [PageResourceUserRelationshipResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceUserRelationshipResource] in
            return Decoders.decode(clazz: [PageResourceUserRelationshipResource].self, source: source)
        }
        // Decoder for PageResourceUserRelationshipResource
        Decoders.addDecoder(clazz: PageResourceUserRelationshipResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceUserRelationshipResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceUserRelationshipResource() : instance as! PageResourceUserRelationshipResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceVendorResource]
        Decoders.addDecoder(clazz: [PageResourceVendorResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceVendorResource] in
            return Decoders.decode(clazz: [PageResourceVendorResource].self, source: source)
        }
        // Decoder for PageResourceVendorResource
        Decoders.addDecoder(clazz: PageResourceVendorResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceVendorResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceVendorResource() : instance as! PageResourceVendorResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceVideoRelationshipResource]
        Decoders.addDecoder(clazz: [PageResourceVideoRelationshipResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceVideoRelationshipResource] in
            return Decoders.decode(clazz: [PageResourceVideoRelationshipResource].self, source: source)
        }
        // Decoder for PageResourceVideoRelationshipResource
        Decoders.addDecoder(clazz: PageResourceVideoRelationshipResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceVideoRelationshipResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceVideoRelationshipResource() : instance as! PageResourceVideoRelationshipResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceVideoResource]
        Decoders.addDecoder(clazz: [PageResourceVideoResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceVideoResource] in
            return Decoders.decode(clazz: [PageResourceVideoResource].self, source: source)
        }
        // Decoder for PageResourceVideoResource
        Decoders.addDecoder(clazz: PageResourceVideoResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceVideoResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceVideoResource() : instance as! PageResourceVideoResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceWalletTotalResponse]
        Decoders.addDecoder(clazz: [PageResourceWalletTotalResponse].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceWalletTotalResponse] in
            return Decoders.decode(clazz: [PageResourceWalletTotalResponse].self, source: source)
        }
        // Decoder for PageResourceWalletTotalResponse
        Decoders.addDecoder(clazz: PageResourceWalletTotalResponse.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceWalletTotalResponse in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceWalletTotalResponse() : instance as! PageResourceWalletTotalResponse
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourceWalletTransactionResource]
        Decoders.addDecoder(clazz: [PageResourceWalletTransactionResource].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourceWalletTransactionResource] in
            return Decoders.decode(clazz: [PageResourceWalletTransactionResource].self, source: source)
        }
        // Decoder for PageResourceWalletTransactionResource
        Decoders.addDecoder(clazz: PageResourceWalletTransactionResource.self) { (source: AnyObject, instance: AnyObject?) -> PageResourceWalletTransactionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourceWalletTransactionResource() : instance as! PageResourceWalletTransactionResource
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [PageResourcestring]
        Decoders.addDecoder(clazz: [PageResourcestring].self) { (source: AnyObject, instance: AnyObject?) -> [PageResourcestring] in
            return Decoders.decode(clazz: [PageResourcestring].self, source: source)
        }
        // Decoder for PageResourcestring
        Decoders.addDecoder(clazz: PageResourcestring.self) { (source: AnyObject, instance: AnyObject?) -> PageResourcestring in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PageResourcestring() : instance as! PageResourcestring
            
            result.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            result.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            result.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            result.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            result.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return result
        }


        // Decoder for [ParameterResource]
        Decoders.addDecoder(clazz: [ParameterResource].self) { (source: AnyObject, instance: AnyObject?) -> [ParameterResource] in
            return Decoders.decode(clazz: [ParameterResource].self, source: source)
        }
        // Decoder for ParameterResource
        Decoders.addDecoder(clazz: ParameterResource.self) { (source: AnyObject, instance: AnyObject?) -> ParameterResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ParameterResource() : instance as! ParameterResource
            
            result.of = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["of"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.value = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["value"] as AnyObject?)
            return result
        }


        // Decoder for [PasswordResetRequest]
        Decoders.addDecoder(clazz: [PasswordResetRequest].self) { (source: AnyObject, instance: AnyObject?) -> [PasswordResetRequest] in
            return Decoders.decode(clazz: [PasswordResetRequest].self, source: source)
        }
        // Decoder for PasswordResetRequest
        Decoders.addDecoder(clazz: PasswordResetRequest.self) { (source: AnyObject, instance: AnyObject?) -> PasswordResetRequest in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PasswordResetRequest() : instance as! PasswordResetRequest
            
            result.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"] as AnyObject?)
            result.mobileNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mobile_number"] as AnyObject?)
            result.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"] as AnyObject?)
            return result
        }


        // Decoder for [PayBySavedMethodRequest]
        Decoders.addDecoder(clazz: [PayBySavedMethodRequest].self) { (source: AnyObject, instance: AnyObject?) -> [PayBySavedMethodRequest] in
            return Decoders.decode(clazz: [PayBySavedMethodRequest].self, source: source)
        }
        // Decoder for PayBySavedMethodRequest
        Decoders.addDecoder(clazz: PayBySavedMethodRequest.self) { (source: AnyObject, instance: AnyObject?) -> PayBySavedMethodRequest in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PayBySavedMethodRequest() : instance as! PayBySavedMethodRequest
            
            result.paymentMethod = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["payment_method"] as AnyObject?)
            return result
        }


        // Decoder for [PaymentAuthorizationResource]
        Decoders.addDecoder(clazz: [PaymentAuthorizationResource].self) { (source: AnyObject, instance: AnyObject?) -> [PaymentAuthorizationResource] in
            return Decoders.decode(clazz: [PaymentAuthorizationResource].self, source: source)
        }
        // Decoder for PaymentAuthorizationResource
        Decoders.addDecoder(clazz: PaymentAuthorizationResource.self) { (source: AnyObject, instance: AnyObject?) -> PaymentAuthorizationResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PaymentAuthorizationResource() : instance as! PaymentAuthorizationResource
            
            result.captured = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["captured"] as AnyObject?)
            result.created = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created"] as AnyObject?)
            result.details = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["details"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            result.invoice = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice"] as AnyObject?)
            result.paymentType = Decoders.decodeOptional(clazz: SimpleReferenceResourceint.self, source: sourceDictionary["payment_type"] as AnyObject?)
            return result
        }


        // Decoder for [PaymentMethodResource]
        Decoders.addDecoder(clazz: [PaymentMethodResource].self) { (source: AnyObject, instance: AnyObject?) -> [PaymentMethodResource] in
            return Decoders.decode(clazz: [PaymentMethodResource].self, source: source)
        }
        // Decoder for PaymentMethodResource
        Decoders.addDecoder(clazz: PaymentMethodResource.self) { (source: AnyObject, instance: AnyObject?) -> PaymentMethodResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PaymentMethodResource() : instance as! PaymentMethodResource
            
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result._default = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["default"] as AnyObject?)
            result.disabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["disabled"] as AnyObject?)
            result.expirationDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["expiration_date"] as AnyObject?)
            result.expirationMonth = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["expiration_month"] as AnyObject?)
            result.expirationYear = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["expiration_year"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            result.last4 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last4"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.paymentMethodType = Decoders.decodeOptional(clazz: PaymentMethodTypeResource.self, source: sourceDictionary["payment_method_type"] as AnyObject?)
            if let paymentType = sourceDictionary["payment_type"] as? String { 
                result.paymentType = PaymentMethodResource.PaymentType(rawValue: (paymentType))
            }
            
            result.sort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sort"] as AnyObject?)
            result.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"] as AnyObject?)
            result.uniqueKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_key"] as AnyObject?)
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            result.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"] as AnyObject?)
            result.verified = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["verified"] as AnyObject?)
            return result
        }


        // Decoder for [PaymentMethodTypeResource]
        Decoders.addDecoder(clazz: [PaymentMethodTypeResource].self) { (source: AnyObject, instance: AnyObject?) -> [PaymentMethodTypeResource] in
            return Decoders.decode(clazz: [PaymentMethodTypeResource].self, source: source)
        }
        // Decoder for PaymentMethodTypeResource
        Decoders.addDecoder(clazz: PaymentMethodTypeResource.self) { (source: AnyObject, instance: AnyObject?) -> PaymentMethodTypeResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PaymentMethodTypeResource() : instance as! PaymentMethodTypeResource
            
            result.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return result
        }


        // Decoder for [PermissionResource]
        Decoders.addDecoder(clazz: [PermissionResource].self) { (source: AnyObject, instance: AnyObject?) -> [PermissionResource] in
            return Decoders.decode(clazz: [PermissionResource].self, source: source)
        }
        // Decoder for PermissionResource
        Decoders.addDecoder(clazz: PermissionResource.self) { (source: AnyObject, instance: AnyObject?) -> PermissionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PermissionResource() : instance as! PermissionResource
            
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.locked = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["locked"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.parent = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["parent"] as AnyObject?)
            result.permission = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["permission"] as AnyObject?)
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return result
        }


        // Decoder for [PollAnswerResource]
        Decoders.addDecoder(clazz: [PollAnswerResource].self) { (source: AnyObject, instance: AnyObject?) -> [PollAnswerResource] in
            return Decoders.decode(clazz: [PollAnswerResource].self, source: source)
        }
        // Decoder for PollAnswerResource
        Decoders.addDecoder(clazz: PollAnswerResource.self) { (source: AnyObject, instance: AnyObject?) -> PollAnswerResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PollAnswerResource() : instance as! PollAnswerResource
            
            result.count = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["count"] as AnyObject?)
            result.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"] as AnyObject?)
            result.text = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["text"] as AnyObject?)
            return result
        }


        // Decoder for [PollResource]
        Decoders.addDecoder(clazz: [PollResource].self) { (source: AnyObject, instance: AnyObject?) -> [PollResource] in
            return Decoders.decode(clazz: [PollResource].self, source: source)
        }
        // Decoder for PollResource
        Decoders.addDecoder(clazz: PollResource.self) { (source: AnyObject, instance: AnyObject?) -> PollResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PollResource() : instance as! PollResource
            
            result.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"] as AnyObject?)
            result.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            result.answers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["answers"] as AnyObject?)
            result.category = Decoders.decodeOptional(clazz: NestedCategory.self, source: sourceDictionary["category"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            result.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            result.text = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["text"] as AnyObject?)
            if let type = sourceDictionary["type"] as? String { 
                result.type = PollResource.ModelType(rawValue: (type))
            }
            
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return result
        }


        // Decoder for [PollResponseResource]
        Decoders.addDecoder(clazz: [PollResponseResource].self) { (source: AnyObject, instance: AnyObject?) -> [PollResponseResource] in
            return Decoders.decode(clazz: [PollResponseResource].self, source: source)
        }
        // Decoder for PollResponseResource
        Decoders.addDecoder(clazz: PollResponseResource.self) { (source: AnyObject, instance: AnyObject?) -> PollResponseResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PollResponseResource() : instance as! PollResponseResource
            
            result.answer = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["answer"] as AnyObject?)
            result.answeredDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["answered_date"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.pollId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["poll_id"] as AnyObject?)
            result.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"] as AnyObject?)
            return result
        }


        // Decoder for [PredicateOperation]
        Decoders.addDecoder(clazz: [PredicateOperation].self) { (source: AnyObject, instance: AnyObject?) -> [PredicateOperation] in
            return Decoders.decode(clazz: [PredicateOperation].self, source: source)
        }
        // Decoder for PredicateOperation
        Decoders.addDecoder(clazz: PredicateOperation.self) { (source: AnyObject, instance: AnyObject?) -> PredicateOperation in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PredicateOperation() : instance as! PredicateOperation
            
            result.args = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["args"] as AnyObject?)
            result._operator = Decoders.decodeOptional(clazz: Operator.self, source: sourceDictionary["operator"] as AnyObject?)
            return result
        }


        // Decoder for [PredicateResource]
        Decoders.addDecoder(clazz: [PredicateResource].self) { (source: AnyObject, instance: AnyObject?) -> [PredicateResource] in
            return Decoders.decode(clazz: [PredicateResource].self, source: source)
        }
        // Decoder for PredicateResource
        Decoders.addDecoder(clazz: PredicateResource.self) { (source: AnyObject, instance: AnyObject?) -> PredicateResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PredicateResource() : instance as! PredicateResource
            
            result.args = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["args"] as AnyObject?)
            result.op = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["op"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return result
        }


        // Decoder for [Property]
        Decoders.addDecoder(clazz: [Property].self) { (source: AnyObject, instance: AnyObject?) -> [Property] in
            return Decoders.decode(clazz: [Property].self, source: source)
        }
        // Decoder for Property
        Decoders.addDecoder(clazz: Property.self) { (source: AnyObject, instance: AnyObject?) -> Property in
            let sourceDictionary = source as! [AnyHashable: Any]
            // Check discriminator to support inheritance
            if let discriminator = sourceDictionary["type"] as? String, instance == nil && discriminator != "Property" {
                return Decoders.decode(clazz: Property.self, discriminator: discriminator, source: source)
            }
            let result = instance == nil ? Property() : instance as! Property
            
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return result
        }


        // Decoder for [PropertyDefinitionResource]
        Decoders.addDecoder(clazz: [PropertyDefinitionResource].self) { (source: AnyObject, instance: AnyObject?) -> [PropertyDefinitionResource] in
            return Decoders.decode(clazz: [PropertyDefinitionResource].self, source: source)
        }
        // Decoder for PropertyDefinitionResource
        Decoders.addDecoder(clazz: PropertyDefinitionResource.self) { (source: AnyObject, instance: AnyObject?) -> PropertyDefinitionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            // Check discriminator to support inheritance
            if let discriminator = sourceDictionary["type"] as? String, instance == nil && discriminator != "PropertyDefinitionResource" {
                return Decoders.decode(clazz: PropertyDefinitionResource.self, discriminator: discriminator, source: source)
            }
            let result = instance == nil ? PropertyDefinitionResource() : instance as! PropertyDefinitionResource
            
            result.fieldList = Decoders.decodeOptional(clazz: PropertyFieldListResource.self, source: sourceDictionary["field_list"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result._required = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["required"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return result
        }


        // Decoder for [PropertyFieldListResource]
        Decoders.addDecoder(clazz: [PropertyFieldListResource].self) { (source: AnyObject, instance: AnyObject?) -> [PropertyFieldListResource] in
            return Decoders.decode(clazz: [PropertyFieldListResource].self, source: source)
        }
        // Decoder for PropertyFieldListResource
        Decoders.addDecoder(clazz: PropertyFieldListResource.self) { (source: AnyObject, instance: AnyObject?) -> PropertyFieldListResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PropertyFieldListResource() : instance as! PropertyFieldListResource
            
            result.propertyDefinitionFields = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["property_definition_fields"] as AnyObject?)
            result.propertyFields = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["property_fields"] as AnyObject?)
            result.propertyType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["property_type"] as AnyObject?)
            return result
        }


        // Decoder for [PropertyFieldResource]
        Decoders.addDecoder(clazz: [PropertyFieldResource].self) { (source: AnyObject, instance: AnyObject?) -> [PropertyFieldResource] in
            return Decoders.decode(clazz: [PropertyFieldResource].self, source: source)
        }
        // Decoder for PropertyFieldResource
        Decoders.addDecoder(clazz: PropertyFieldResource.self) { (source: AnyObject, instance: AnyObject?) -> PropertyFieldResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PropertyFieldResource() : instance as! PropertyFieldResource
            
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            if let innerType = sourceDictionary["inner_type"] as? String { 
                result.innerType = PropertyFieldResource.InnerType(rawValue: (innerType))
            }
            
            result.innerTypeFields = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["inner_type_fields"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result._required = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["required"] as AnyObject?)
            if let type = sourceDictionary["type"] as? String { 
                result.type = PropertyFieldResource.ModelType(rawValue: (type))
            }
            
            result.validValues = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["valid_values"] as AnyObject?)
            return result
        }


        // Decoder for [QuestionResource]
        Decoders.addDecoder(clazz: [QuestionResource].self) { (source: AnyObject, instance: AnyObject?) -> [QuestionResource] in
            return Decoders.decode(clazz: [QuestionResource].self, source: source)
        }
        // Decoder for QuestionResource
        Decoders.addDecoder(clazz: QuestionResource.self) { (source: AnyObject, instance: AnyObject?) -> QuestionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? QuestionResource() : instance as! QuestionResource
            
            result.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            result.answers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["answers"] as AnyObject?)
            result.category = Decoders.decodeOptional(clazz: NestedCategory.self, source: sourceDictionary["category"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.difficulty = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["difficulty"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.importId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["import_id"] as AnyObject?)
            result.publishedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["published_date"] as AnyObject?)
            result.question = Decoders.decodeOptional(clazz: Property.self, source: sourceDictionary["question"] as AnyObject?)
            result.source1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["source1"] as AnyObject?)
            result.source2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["source2"] as AnyObject?)
            result.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            result.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            result.vendor = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vendor"] as AnyObject?)
            return result
        }


        // Decoder for [QuestionTemplateResource]
        Decoders.addDecoder(clazz: [QuestionTemplateResource].self) { (source: AnyObject, instance: AnyObject?) -> [QuestionTemplateResource] in
            return Decoders.decode(clazz: [QuestionTemplateResource].self, source: source)
        }
        // Decoder for QuestionTemplateResource
        Decoders.addDecoder(clazz: QuestionTemplateResource.self) { (source: AnyObject, instance: AnyObject?) -> QuestionTemplateResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? QuestionTemplateResource() : instance as! QuestionTemplateResource
            
            result.answerProperty = Decoders.decodeOptional(clazz: PropertyDefinitionResource.self, source: sourceDictionary["answer_property"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"] as AnyObject?)
            result.questionProperty = Decoders.decodeOptional(clazz: PropertyDefinitionResource.self, source: sourceDictionary["question_property"] as AnyObject?)
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return result
        }


        // Decoder for [RawEmailResource]
        Decoders.addDecoder(clazz: [RawEmailResource].self) { (source: AnyObject, instance: AnyObject?) -> [RawEmailResource] in
            return Decoders.decode(clazz: [RawEmailResource].self, source: source)
        }
        // Decoder for RawEmailResource
        Decoders.addDecoder(clazz: RawEmailResource.self) { (source: AnyObject, instance: AnyObject?) -> RawEmailResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? RawEmailResource() : instance as! RawEmailResource
            
            result.body = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["body"] as AnyObject?)
            result.from = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["from"] as AnyObject?)
            result.html = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["html"] as AnyObject?)
            result.recipients = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["recipients"] as AnyObject?)
            result.subject = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subject"] as AnyObject?)
            return result
        }


        // Decoder for [RawSMSResource]
        Decoders.addDecoder(clazz: [RawSMSResource].self) { (source: AnyObject, instance: AnyObject?) -> [RawSMSResource] in
            return Decoders.decode(clazz: [RawSMSResource].self, source: source)
        }
        // Decoder for RawSMSResource
        Decoders.addDecoder(clazz: RawSMSResource.self) { (source: AnyObject, instance: AnyObject?) -> RawSMSResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? RawSMSResource() : instance as! RawSMSResource
            
            result.from = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["from"] as AnyObject?)
            result.recipients = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["recipients"] as AnyObject?)
            result.text = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["text"] as AnyObject?)
            return result
        }


        // Decoder for [ReactivateSubscriptionRequest]
        Decoders.addDecoder(clazz: [ReactivateSubscriptionRequest].self) { (source: AnyObject, instance: AnyObject?) -> [ReactivateSubscriptionRequest] in
            return Decoders.decode(clazz: [ReactivateSubscriptionRequest].self, source: source)
        }
        // Decoder for ReactivateSubscriptionRequest
        Decoders.addDecoder(clazz: ReactivateSubscriptionRequest.self) { (source: AnyObject, instance: AnyObject?) -> ReactivateSubscriptionRequest in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ReactivateSubscriptionRequest() : instance as! ReactivateSubscriptionRequest
            
            result.inventoryId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["inventory_id"] as AnyObject?)
            result.reactivationFee = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["reactivation_fee"] as AnyObject?)
            return result
        }


        // Decoder for [RefundRequest]
        Decoders.addDecoder(clazz: [RefundRequest].self) { (source: AnyObject, instance: AnyObject?) -> [RefundRequest] in
            return Decoders.decode(clazz: [RefundRequest].self, source: source)
        }
        // Decoder for RefundRequest
        Decoders.addDecoder(clazz: RefundRequest.self) { (source: AnyObject, instance: AnyObject?) -> RefundRequest in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? RefundRequest() : instance as! RefundRequest
            
            result.amount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["amount"] as AnyObject?)
            result.bundleSku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_sku"] as AnyObject?)
            result.notes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["notes"] as AnyObject?)
            result.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"] as AnyObject?)
            return result
        }


        // Decoder for [RefundResource]
        Decoders.addDecoder(clazz: [RefundResource].self) { (source: AnyObject, instance: AnyObject?) -> [RefundResource] in
            return Decoders.decode(clazz: [RefundResource].self, source: source)
        }
        // Decoder for RefundResource
        Decoders.addDecoder(clazz: RefundResource.self) { (source: AnyObject, instance: AnyObject?) -> RefundResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? RefundResource() : instance as! RefundResource
            
            result.amount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["amount"] as AnyObject?)
            result.refundTransactionId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["refund_transaction_id"] as AnyObject?)
            result.transactionId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["transaction_id"] as AnyObject?)
            return result
        }


        // Decoder for [Result]
        Decoders.addDecoder(clazz: [Result].self) { (source: AnyObject, instance: AnyObject?) -> [Result] in
            return Decoders.decode(clazz: [Result].self, source: source)
        }
        // Decoder for Result
        Decoders.addDecoder(clazz: Result.self) { (source: AnyObject, instance: AnyObject?) -> Result in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Result() : instance as! Result
            
            result.code = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["code"] as AnyObject?)
            result.requestId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["request_id"] as AnyObject?)
            result.result = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["result"] as AnyObject?)
            return result
        }


        // Decoder for [RevenueCountryReportResource]
        Decoders.addDecoder(clazz: [RevenueCountryReportResource].self) { (source: AnyObject, instance: AnyObject?) -> [RevenueCountryReportResource] in
            return Decoders.decode(clazz: [RevenueCountryReportResource].self, source: source)
        }
        // Decoder for RevenueCountryReportResource
        Decoders.addDecoder(clazz: RevenueCountryReportResource.self) { (source: AnyObject, instance: AnyObject?) -> RevenueCountryReportResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? RevenueCountryReportResource() : instance as! RevenueCountryReportResource
            
            result.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"] as AnyObject?)
            result.revenue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["revenue"] as AnyObject?)
            result.volume = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["volume"] as AnyObject?)
            return result
        }


        // Decoder for [RevenueProductReportResource]
        Decoders.addDecoder(clazz: [RevenueProductReportResource].self) { (source: AnyObject, instance: AnyObject?) -> [RevenueProductReportResource] in
            return Decoders.decode(clazz: [RevenueProductReportResource].self, source: source)
        }
        // Decoder for RevenueProductReportResource
        Decoders.addDecoder(clazz: RevenueProductReportResource.self) { (source: AnyObject, instance: AnyObject?) -> RevenueProductReportResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? RevenueProductReportResource() : instance as! RevenueProductReportResource
            
            result.itemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["item_id"] as AnyObject?)
            result.itemName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["item_name"] as AnyObject?)
            result.revenue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["revenue"] as AnyObject?)
            result.volume = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["volume"] as AnyObject?)
            return result
        }


        // Decoder for [RevenueReportResource]
        Decoders.addDecoder(clazz: [RevenueReportResource].self) { (source: AnyObject, instance: AnyObject?) -> [RevenueReportResource] in
            return Decoders.decode(clazz: [RevenueReportResource].self, source: source)
        }
        // Decoder for RevenueReportResource
        Decoders.addDecoder(clazz: RevenueReportResource.self) { (source: AnyObject, instance: AnyObject?) -> RevenueReportResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? RevenueReportResource() : instance as! RevenueReportResource
            
            result.customerCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["customer_count"] as AnyObject?)
            result.saleCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["sale_count"] as AnyObject?)
            result.salesAverage = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["sales_average"] as AnyObject?)
            result.salesTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["sales_total"] as AnyObject?)
            return result
        }


        // Decoder for [RewardCurrencyResource]
        Decoders.addDecoder(clazz: [RewardCurrencyResource].self) { (source: AnyObject, instance: AnyObject?) -> [RewardCurrencyResource] in
            return Decoders.decode(clazz: [RewardCurrencyResource].self, source: source)
        }
        // Decoder for RewardCurrencyResource
        Decoders.addDecoder(clazz: RewardCurrencyResource.self) { (source: AnyObject, instance: AnyObject?) -> RewardCurrencyResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? RewardCurrencyResource() : instance as! RewardCurrencyResource
            
            result.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"] as AnyObject?)
            result.currencyName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_name"] as AnyObject?)
            result.maxRank = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_rank"] as AnyObject?)
            result.minRank = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min_rank"] as AnyObject?)
            result.percent = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["percent"] as AnyObject?)
            result.value = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"] as AnyObject?)
            return result
        }


        // Decoder for [RewardItemResource]
        Decoders.addDecoder(clazz: [RewardItemResource].self) { (source: AnyObject, instance: AnyObject?) -> [RewardItemResource] in
            return Decoders.decode(clazz: [RewardItemResource].self, source: source)
        }
        // Decoder for RewardItemResource
        Decoders.addDecoder(clazz: RewardItemResource.self) { (source: AnyObject, instance: AnyObject?) -> RewardItemResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? RewardItemResource() : instance as! RewardItemResource
            
            result.itemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["item_id"] as AnyObject?)
            result.itemName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["item_name"] as AnyObject?)
            result.maxRank = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_rank"] as AnyObject?)
            result.minRank = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min_rank"] as AnyObject?)
            result.quantity = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["quantity"] as AnyObject?)
            return result
        }


        // Decoder for [RewardSetResource]
        Decoders.addDecoder(clazz: [RewardSetResource].self) { (source: AnyObject, instance: AnyObject?) -> [RewardSetResource] in
            return Decoders.decode(clazz: [RewardSetResource].self, source: source)
        }
        // Decoder for RewardSetResource
        Decoders.addDecoder(clazz: RewardSetResource.self) { (source: AnyObject, instance: AnyObject?) -> RewardSetResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? RewardSetResource() : instance as! RewardSetResource
            
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.currencyRewards = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["currency_rewards"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            result.itemRewards = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["item_rewards"] as AnyObject?)
            result.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"] as AnyObject?)
            result.maxPlacing = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_placing"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"] as AnyObject?)
            result.uniqueKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_key"] as AnyObject?)
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return result
        }


        // Decoder for [RoleResource]
        Decoders.addDecoder(clazz: [RoleResource].self) { (source: AnyObject, instance: AnyObject?) -> [RoleResource] in
            return Decoders.decode(clazz: [RoleResource].self, source: source)
        }
        // Decoder for RoleResource
        Decoders.addDecoder(clazz: RoleResource.self) { (source: AnyObject, instance: AnyObject?) -> RoleResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? RoleResource() : instance as! RoleResource
            
            result.clientCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["client_count"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.locked = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["locked"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.role = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["role"] as AnyObject?)
            result.rolePermission = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["role_permission"] as AnyObject?)
            result.userCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_count"] as AnyObject?)
            return result
        }


        // Decoder for [S3Config]
        Decoders.addDecoder(clazz: [S3Config].self) { (source: AnyObject, instance: AnyObject?) -> [S3Config] in
            return Decoders.decode(clazz: [S3Config].self, source: source)
        }
        // Decoder for S3Config
        Decoders.addDecoder(clazz: S3Config.self) { (source: AnyObject, instance: AnyObject?) -> S3Config in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? S3Config() : instance as! S3Config
            
            result.bucketName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bucket_name"] as AnyObject?)
            result.cdnUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cdn_url"] as AnyObject?)
            result.region = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["region"] as AnyObject?)
            result.uploadPrefix = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["upload_prefix"] as AnyObject?)
            return result
        }


        // Decoder for [SampleCountriesResponse]
        Decoders.addDecoder(clazz: [SampleCountriesResponse].self) { (source: AnyObject, instance: AnyObject?) -> [SampleCountriesResponse] in
            return Decoders.decode(clazz: [SampleCountriesResponse].self, source: source)
        }
        // Decoder for SampleCountriesResponse
        Decoders.addDecoder(clazz: SampleCountriesResponse.self) { (source: AnyObject, instance: AnyObject?) -> SampleCountriesResponse in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? SampleCountriesResponse() : instance as! SampleCountriesResponse
            
            result.vendorId1 = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["vendor_id1"] as AnyObject?)
            result.vendorId2 = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["vendor_id2"] as AnyObject?)
            return result
        }


        // Decoder for [SavedAddressResource]
        Decoders.addDecoder(clazz: [SavedAddressResource].self) { (source: AnyObject, instance: AnyObject?) -> [SavedAddressResource] in
            return Decoders.decode(clazz: [SavedAddressResource].self, source: source)
        }
        // Decoder for SavedAddressResource
        Decoders.addDecoder(clazz: SavedAddressResource.self) { (source: AnyObject, instance: AnyObject?) -> SavedAddressResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? SavedAddressResource() : instance as! SavedAddressResource
            
            result.address1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address1"] as AnyObject?)
            result.address2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address2"] as AnyObject?)
            result.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"] as AnyObject?)
            result.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_code"] as AnyObject?)
            result._default = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["default"] as AnyObject?)
            result.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["first_name"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            result.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last_name"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.phone1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone1"] as AnyObject?)
            result.phone2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone2"] as AnyObject?)
            result.postalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["postal_code"] as AnyObject?)
            result.stateCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state_code"] as AnyObject?)
            return result
        }


        // Decoder for [Schedule]
        Decoders.addDecoder(clazz: [Schedule].self) { (source: AnyObject, instance: AnyObject?) -> [Schedule] in
            return Decoders.decode(clazz: [Schedule].self, source: source)
        }
        // Decoder for Schedule
        Decoders.addDecoder(clazz: Schedule.self) { (source: AnyObject, instance: AnyObject?) -> Schedule in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Schedule() : instance as! Schedule
            
            result.duration = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["duration"] as AnyObject?)
            if let durationUnit = sourceDictionary["duration_unit"] as? String { 
                result.durationUnit = Schedule.DurationUnit(rawValue: (durationUnit))
            }
            
            if let repeat = sourceDictionary["repeat"] as? String { 
                result.repeat = Schedule.Repeat(rawValue: (repeat))
            }
            
            return result
        }


        // Decoder for [SearchReferenceMapping]
        Decoders.addDecoder(clazz: [SearchReferenceMapping].self) { (source: AnyObject, instance: AnyObject?) -> [SearchReferenceMapping] in
            return Decoders.decode(clazz: [SearchReferenceMapping].self, source: source)
        }
        // Decoder for SearchReferenceMapping
        Decoders.addDecoder(clazz: SearchReferenceMapping.self) { (source: AnyObject, instance: AnyObject?) -> SearchReferenceMapping in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? SearchReferenceMapping() : instance as! SearchReferenceMapping
            
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.refIdField = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ref_id_field"] as AnyObject?)
            result.refType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ref_type"] as AnyObject?)
            result.sourceFieldToDestinationField = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["source_field_to_destination_field"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return result
        }


        // Decoder for [SelectedSettingResource]
        Decoders.addDecoder(clazz: [SelectedSettingResource].self) { (source: AnyObject, instance: AnyObject?) -> [SelectedSettingResource] in
            return Decoders.decode(clazz: [SelectedSettingResource].self, source: source)
        }
        // Decoder for SelectedSettingResource
        Decoders.addDecoder(clazz: SelectedSettingResource.self) { (source: AnyObject, instance: AnyObject?) -> SelectedSettingResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? SelectedSettingResource() : instance as! SelectedSettingResource
            
            result.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"] as AnyObject?)
            result.keyName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key_name"] as AnyObject?)
            result.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"] as AnyObject?)
            result.valueName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value_name"] as AnyObject?)
            return result
        }


        // Decoder for [SettingOption]
        Decoders.addDecoder(clazz: [SettingOption].self) { (source: AnyObject, instance: AnyObject?) -> [SettingOption] in
            return Decoders.decode(clazz: [SettingOption].self, source: source)
        }
        // Decoder for SettingOption
        Decoders.addDecoder(clazz: SettingOption.self) { (source: AnyObject, instance: AnyObject?) -> SettingOption in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? SettingOption() : instance as! SettingOption
            
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"] as AnyObject?)
            return result
        }


        // Decoder for [SimpleReferenceResourceint]
        Decoders.addDecoder(clazz: [SimpleReferenceResourceint].self) { (source: AnyObject, instance: AnyObject?) -> [SimpleReferenceResourceint] in
            return Decoders.decode(clazz: [SimpleReferenceResourceint].self, source: source)
        }
        // Decoder for SimpleReferenceResourceint
        Decoders.addDecoder(clazz: SimpleReferenceResourceint.self) { (source: AnyObject, instance: AnyObject?) -> SimpleReferenceResourceint in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? SimpleReferenceResourceint() : instance as! SimpleReferenceResourceint
            
            result.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return result
        }


        // Decoder for [SimpleReferenceResourcelong]
        Decoders.addDecoder(clazz: [SimpleReferenceResourcelong].self) { (source: AnyObject, instance: AnyObject?) -> [SimpleReferenceResourcelong] in
            return Decoders.decode(clazz: [SimpleReferenceResourcelong].self, source: source)
        }
        // Decoder for SimpleReferenceResourcelong
        Decoders.addDecoder(clazz: SimpleReferenceResourcelong.self) { (source: AnyObject, instance: AnyObject?) -> SimpleReferenceResourcelong in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? SimpleReferenceResourcelong() : instance as! SimpleReferenceResourcelong
            
            result.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return result
        }


        // Decoder for [SimpleReferenceResourceobject]
        Decoders.addDecoder(clazz: [SimpleReferenceResourceobject].self) { (source: AnyObject, instance: AnyObject?) -> [SimpleReferenceResourceobject] in
            return Decoders.decode(clazz: [SimpleReferenceResourceobject].self, source: source)
        }
        // Decoder for SimpleReferenceResourceobject
        Decoders.addDecoder(clazz: SimpleReferenceResourceobject.self) { (source: AnyObject, instance: AnyObject?) -> SimpleReferenceResourceobject in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? SimpleReferenceResourceobject() : instance as! SimpleReferenceResourceobject
            
            result.id = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["id"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return result
        }


        // Decoder for [SimpleReferenceResourcestring]
        Decoders.addDecoder(clazz: [SimpleReferenceResourcestring].self) { (source: AnyObject, instance: AnyObject?) -> [SimpleReferenceResourcestring] in
            return Decoders.decode(clazz: [SimpleReferenceResourcestring].self, source: source)
        }
        // Decoder for SimpleReferenceResourcestring
        Decoders.addDecoder(clazz: SimpleReferenceResourcestring.self) { (source: AnyObject, instance: AnyObject?) -> SimpleReferenceResourcestring in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? SimpleReferenceResourcestring() : instance as! SimpleReferenceResourcestring
            
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return result
        }


        // Decoder for [SimpleUserResource]
        Decoders.addDecoder(clazz: [SimpleUserResource].self) { (source: AnyObject, instance: AnyObject?) -> [SimpleUserResource] in
            return Decoders.decode(clazz: [SimpleUserResource].self, source: source)
        }
        // Decoder for SimpleUserResource
        Decoders.addDecoder(clazz: SimpleUserResource.self) { (source: AnyObject, instance: AnyObject?) -> SimpleUserResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? SimpleUserResource() : instance as! SimpleUserResource
            
            result.avatarUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["avatar_url"] as AnyObject?)
            result.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["display_name"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            result.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"] as AnyObject?)
            return result
        }


        // Decoder for [SimpleWallet]
        Decoders.addDecoder(clazz: [SimpleWallet].self) { (source: AnyObject, instance: AnyObject?) -> [SimpleWallet] in
            return Decoders.decode(clazz: [SimpleWallet].self, source: source)
        }
        // Decoder for SimpleWallet
        Decoders.addDecoder(clazz: SimpleWallet.self) { (source: AnyObject, instance: AnyObject?) -> SimpleWallet in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? SimpleWallet() : instance as! SimpleWallet
            
            result.balance = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["balance"] as AnyObject?)
            result.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            result.currencyName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_name"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            result.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"] as AnyObject?)
            return result
        }


        // Decoder for [Sku]
        Decoders.addDecoder(clazz: [Sku].self) { (source: AnyObject, instance: AnyObject?) -> [Sku] in
            return Decoders.decode(clazz: [Sku].self, source: source)
        }
        // Decoder for Sku
        Decoders.addDecoder(clazz: Sku.self) { (source: AnyObject, instance: AnyObject?) -> Sku in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Sku() : instance as! Sku
            
            result.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            result.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"] as AnyObject?)
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.inventory = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["inventory"] as AnyObject?)
            result.minInventoryThreshold = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min_inventory_threshold"] as AnyObject?)
            result.originalPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["original_price"] as AnyObject?)
            result.price = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price"] as AnyObject?)
            result.published = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["published"] as AnyObject?)
            result.saleId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sale_id"] as AnyObject?)
            result.saleName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sale_name"] as AnyObject?)
            result.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"] as AnyObject?)
            result.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["start_date"] as AnyObject?)
            result.stopDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["stop_date"] as AnyObject?)
            return result
        }


        // Decoder for [SkuRequest]
        Decoders.addDecoder(clazz: [SkuRequest].self) { (source: AnyObject, instance: AnyObject?) -> [SkuRequest] in
            return Decoders.decode(clazz: [SkuRequest].self, source: source)
        }
        // Decoder for SkuRequest
        Decoders.addDecoder(clazz: SkuRequest.self) { (source: AnyObject, instance: AnyObject?) -> SkuRequest in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? SkuRequest() : instance as! SkuRequest
            
            result.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"] as AnyObject?)
            return result
        }


        // Decoder for [SqlDatabaseConfig]
        Decoders.addDecoder(clazz: [SqlDatabaseConfig].self) { (source: AnyObject, instance: AnyObject?) -> [SqlDatabaseConfig] in
            return Decoders.decode(clazz: [SqlDatabaseConfig].self, source: source)
        }
        // Decoder for SqlDatabaseConfig
        Decoders.addDecoder(clazz: SqlDatabaseConfig.self) { (source: AnyObject, instance: AnyObject?) -> SqlDatabaseConfig in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? SqlDatabaseConfig() : instance as! SqlDatabaseConfig
            
            result.connectionPoolSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["connection_pool_size"] as AnyObject?)
            result.dbName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["db_name"] as AnyObject?)
            result.hostname = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["hostname"] as AnyObject?)
            result.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"] as AnyObject?)
            result.port = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["port"] as AnyObject?)
            result.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"] as AnyObject?)
            return result
        }


        // Decoder for [StateResource]
        Decoders.addDecoder(clazz: [StateResource].self) { (source: AnyObject, instance: AnyObject?) -> [StateResource] in
            return Decoders.decode(clazz: [StateResource].self, source: source)
        }
        // Decoder for StateResource
        Decoders.addDecoder(clazz: StateResource.self) { (source: AnyObject, instance: AnyObject?) -> StateResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? StateResource() : instance as! StateResource
            
            result.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            result.countryCodeIso3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_code_iso3"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return result
        }


        // Decoder for [StateTaxResource]
        Decoders.addDecoder(clazz: [StateTaxResource].self) { (source: AnyObject, instance: AnyObject?) -> [StateTaxResource] in
            return Decoders.decode(clazz: [StateTaxResource].self, source: source)
        }
        // Decoder for StateTaxResource
        Decoders.addDecoder(clazz: StateTaxResource.self) { (source: AnyObject, instance: AnyObject?) -> StateTaxResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? StateTaxResource() : instance as! StateTaxResource
            
            result.countryIso3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_iso3"] as AnyObject?)
            result.federallyExempt = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["federally_exempt"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.rate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rate"] as AnyObject?)
            result.stateCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state_code"] as AnyObject?)
            result.taxShipping = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["tax_shipping"] as AnyObject?)
            return result
        }


        // Decoder for [StoreItemTemplateResource]
        Decoders.addDecoder(clazz: [StoreItemTemplateResource].self) { (source: AnyObject, instance: AnyObject?) -> [StoreItemTemplateResource] in
            return Decoders.decode(clazz: [StoreItemTemplateResource].self, source: source)
        }
        // Decoder for StoreItemTemplateResource
        Decoders.addDecoder(clazz: StoreItemTemplateResource.self) { (source: AnyObject, instance: AnyObject?) -> StoreItemTemplateResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? StoreItemTemplateResource() : instance as! StoreItemTemplateResource
            
            result.behaviors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["behaviors"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"] as AnyObject?)
            result.skuTemplate = Decoders.decodeOptional(clazz: TemplateResource.self, source: sourceDictionary["sku_template"] as AnyObject?)
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return result
        }


        // Decoder for [StringOperationResource]
        Decoders.addDecoder(clazz: [StringOperationResource].self) { (source: AnyObject, instance: AnyObject?) -> [StringOperationResource] in
            return Decoders.decode(clazz: [StringOperationResource].self, source: source)
        }
        // Decoder for StringOperationResource
        Decoders.addDecoder(clazz: StringOperationResource.self) { (source: AnyObject, instance: AnyObject?) -> StringOperationResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? StringOperationResource() : instance as! StringOperationResource
            
            result.args = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["args"] as AnyObject?)
            result.op = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["op"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return result
        }


        // Decoder for [StripeCreatePaymentMethod]
        Decoders.addDecoder(clazz: [StripeCreatePaymentMethod].self) { (source: AnyObject, instance: AnyObject?) -> [StripeCreatePaymentMethod] in
            return Decoders.decode(clazz: [StripeCreatePaymentMethod].self, source: source)
        }
        // Decoder for StripeCreatePaymentMethod
        Decoders.addDecoder(clazz: StripeCreatePaymentMethod.self) { (source: AnyObject, instance: AnyObject?) -> StripeCreatePaymentMethod in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? StripeCreatePaymentMethod() : instance as! StripeCreatePaymentMethod
            
            result.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"] as AnyObject?)
            result.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"] as AnyObject?)
            return result
        }


        // Decoder for [StripePaymentRequest]
        Decoders.addDecoder(clazz: [StripePaymentRequest].self) { (source: AnyObject, instance: AnyObject?) -> [StripePaymentRequest] in
            return Decoders.decode(clazz: [StripePaymentRequest].self, source: source)
        }
        // Decoder for StripePaymentRequest
        Decoders.addDecoder(clazz: StripePaymentRequest.self) { (source: AnyObject, instance: AnyObject?) -> StripePaymentRequest in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? StripePaymentRequest() : instance as! StripePaymentRequest
            
            result.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"] as AnyObject?)
            result.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"] as AnyObject?)
            return result
        }


        // Decoder for [SubscriptionCreditResource]
        Decoders.addDecoder(clazz: [SubscriptionCreditResource].self) { (source: AnyObject, instance: AnyObject?) -> [SubscriptionCreditResource] in
            return Decoders.decode(clazz: [SubscriptionCreditResource].self, source: source)
        }
        // Decoder for SubscriptionCreditResource
        Decoders.addDecoder(clazz: SubscriptionCreditResource.self) { (source: AnyObject, instance: AnyObject?) -> SubscriptionCreditResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? SubscriptionCreditResource() : instance as! SubscriptionCreditResource
            
            result.amount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["amount"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            result.inventoryId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["inventory_id"] as AnyObject?)
            result.reason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reason"] as AnyObject?)
            return result
        }


        // Decoder for [SubscriptionPlan]
        Decoders.addDecoder(clazz: [SubscriptionPlan].self) { (source: AnyObject, instance: AnyObject?) -> [SubscriptionPlan] in
            return Decoders.decode(clazz: [SubscriptionPlan].self, source: source)
        }
        // Decoder for SubscriptionPlan
        Decoders.addDecoder(clazz: SubscriptionPlan.self) { (source: AnyObject, instance: AnyObject?) -> SubscriptionPlan in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? SubscriptionPlan() : instance as! SubscriptionPlan
            
            result.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            if let availability = sourceDictionary["availability"] as? String { 
                result.availability = SubscriptionPlan.Availability(rawValue: (availability))
            }
            
            result.billGraceDays = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["bill_grace_days"] as AnyObject?)
            result.consolidated = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["consolidated"] as AnyObject?)
            result.firstBill = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["first_bill"] as AnyObject?)
            if let firstBillUnitOfTime = sourceDictionary["first_bill_unit_of_time"] as? String { 
                result.firstBillUnitOfTime = SubscriptionPlan.FirstBillUnitOfTime(rawValue: (firstBillUnitOfTime))
            }
            
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.latePaymentSku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["late_payment_sku"] as AnyObject?)
            result.locked = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["locked"] as AnyObject?)
            result.maxAutoRenew = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_auto_renew"] as AnyObject?)
            result.maxBillAttempts = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_bill_attempts"] as AnyObject?)
            result.migrationPlan = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["migration_plan"] as AnyObject?)
            result.minimumTerm = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["minimum_term"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.primarySku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["primary_sku"] as AnyObject?)
            result.reactivationSku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reactivation_sku"] as AnyObject?)
            result.recurringSku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["recurring_sku"] as AnyObject?)
            result.renewPeriod = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["renew_period"] as AnyObject?)
            if let renewPeriodUnitOfTime = sourceDictionary["renew_period_unit_of_time"] as? String { 
                result.renewPeriodUnitOfTime = SubscriptionPlan.RenewPeriodUnitOfTime(rawValue: (renewPeriodUnitOfTime))
            }
            
            result.subscriptionId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["subscription_id"] as AnyObject?)
            return result
        }


        // Decoder for [SubscriptionPlanResource]
        Decoders.addDecoder(clazz: [SubscriptionPlanResource].self) { (source: AnyObject, instance: AnyObject?) -> [SubscriptionPlanResource] in
            return Decoders.decode(clazz: [SubscriptionPlanResource].self, source: source)
        }
        // Decoder for SubscriptionPlanResource
        Decoders.addDecoder(clazz: SubscriptionPlanResource.self) { (source: AnyObject, instance: AnyObject?) -> SubscriptionPlanResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? SubscriptionPlanResource() : instance as! SubscriptionPlanResource
            
            result.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            result.billingCycleLength = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["billing_cycle_length"] as AnyObject?)
            if let billingCycleUnit = sourceDictionary["billing_cycle_unit"] as? String { 
                result.billingCycleUnit = SubscriptionPlanResource.BillingCycleUnit(rawValue: (billingCycleUnit))
            }
            
            result.consolidated = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["consolidated"] as AnyObject?)
            result.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"] as AnyObject?)
            result.endDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["end_date"] as AnyObject?)
            result.firstBillingCycleLength = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["first_billing_cycle_length"] as AnyObject?)
            if let firstBillingCycleUnit = sourceDictionary["first_billing_cycle_unit"] as? String { 
                result.firstBillingCycleUnit = SubscriptionPlanResource.FirstBillingCycleUnit(rawValue: (firstBillingCycleUnit))
            }
            
            result.gracePeriod = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["grace_period"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.initialFee = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["initial_fee"] as AnyObject?)
            result.initialSku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["initial_sku"] as AnyObject?)
            result.latePaymentFee = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["late_payment_fee"] as AnyObject?)
            result.latePaymentSku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["late_payment_sku"] as AnyObject?)
            result.locked = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["locked"] as AnyObject?)
            result.maxBillAttempts = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_bill_attempts"] as AnyObject?)
            result.maxCycles = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_cycles"] as AnyObject?)
            result.migrateToPlan = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["migrate_to_plan"] as AnyObject?)
            result.minCycles = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min_cycles"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.published = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["published"] as AnyObject?)
            result.reactivationFee = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["reactivation_fee"] as AnyObject?)
            result.reactivationSku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reactivation_sku"] as AnyObject?)
            result.recurringFee = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["recurring_fee"] as AnyObject?)
            result.recurringSku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["recurring_sku"] as AnyObject?)
            result.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["start_date"] as AnyObject?)
            return result
        }


        // Decoder for [SubscriptionPriceOverrideRequest]
        Decoders.addDecoder(clazz: [SubscriptionPriceOverrideRequest].self) { (source: AnyObject, instance: AnyObject?) -> [SubscriptionPriceOverrideRequest] in
            return Decoders.decode(clazz: [SubscriptionPriceOverrideRequest].self, source: source)
        }
        // Decoder for SubscriptionPriceOverrideRequest
        Decoders.addDecoder(clazz: SubscriptionPriceOverrideRequest.self) { (source: AnyObject, instance: AnyObject?) -> SubscriptionPriceOverrideRequest in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? SubscriptionPriceOverrideRequest() : instance as! SubscriptionPriceOverrideRequest
            
            result.newPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["new_price"] as AnyObject?)
            result.reason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reason"] as AnyObject?)
            return result
        }


        // Decoder for [SubscriptionResource]
        Decoders.addDecoder(clazz: [SubscriptionResource].self) { (source: AnyObject, instance: AnyObject?) -> [SubscriptionResource] in
            return Decoders.decode(clazz: [SubscriptionResource].self, source: source)
        }
        // Decoder for SubscriptionResource
        Decoders.addDecoder(clazz: SubscriptionResource.self) { (source: AnyObject, instance: AnyObject?) -> SubscriptionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? SubscriptionResource() : instance as! SubscriptionResource
            
            result.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            if let availability = sourceDictionary["availability"] as? String { 
                result.availability = SubscriptionResource.Availability(rawValue: (availability))
            }
            
            result.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"] as AnyObject?)
            result.consolidationDayOfMonth = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["consolidation_day_of_month"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.geoCountryList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["geo_country_list"] as AnyObject?)
            if let geoPolicyType = sourceDictionary["geo_policy_type"] as? String { 
                result.geoPolicyType = SubscriptionResource.GeoPolicyType(rawValue: (geoPolicyType))
            }
            
            result.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            result.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.plans = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["plans"] as AnyObject?)
            result.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sort"] as AnyObject?)
            result.storeEnd = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["store_end"] as AnyObject?)
            result.storeStart = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["store_start"] as AnyObject?)
            result.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            result.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            result.uniqueKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_key"] as AnyObject?)
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            result.vendorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vendor_id"] as AnyObject?)
            return result
        }


        // Decoder for [SubscriptionTemplateResource]
        Decoders.addDecoder(clazz: [SubscriptionTemplateResource].self) { (source: AnyObject, instance: AnyObject?) -> [SubscriptionTemplateResource] in
            return Decoders.decode(clazz: [SubscriptionTemplateResource].self, source: source)
        }
        // Decoder for SubscriptionTemplateResource
        Decoders.addDecoder(clazz: SubscriptionTemplateResource.self) { (source: AnyObject, instance: AnyObject?) -> SubscriptionTemplateResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? SubscriptionTemplateResource() : instance as! SubscriptionTemplateResource
            
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.planTemplate = Decoders.decodeOptional(clazz: TemplateResource.self, source: sourceDictionary["plan_template"] as AnyObject?)
            result.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"] as AnyObject?)
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return result
        }


        // Decoder for [TemplateEmailResource]
        Decoders.addDecoder(clazz: [TemplateEmailResource].self) { (source: AnyObject, instance: AnyObject?) -> [TemplateEmailResource] in
            return Decoders.decode(clazz: [TemplateEmailResource].self, source: source)
        }
        // Decoder for TemplateEmailResource
        Decoders.addDecoder(clazz: TemplateEmailResource.self) { (source: AnyObject, instance: AnyObject?) -> TemplateEmailResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? TemplateEmailResource() : instance as! TemplateEmailResource
            
            result.from = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["from"] as AnyObject?)
            result.recipients = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["recipients"] as AnyObject?)
            result.templateKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template_key"] as AnyObject?)
            result.templateVars = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["template_vars"] as AnyObject?)
            return result
        }


        // Decoder for [TemplateResource]
        Decoders.addDecoder(clazz: [TemplateResource].self) { (source: AnyObject, instance: AnyObject?) -> [TemplateResource] in
            return Decoders.decode(clazz: [TemplateResource].self, source: source)
        }
        // Decoder for TemplateResource
        Decoders.addDecoder(clazz: TemplateResource.self) { (source: AnyObject, instance: AnyObject?) -> TemplateResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? TemplateResource() : instance as! TemplateResource
            
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"] as AnyObject?)
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return result
        }


        // Decoder for [TemplateSMSResource]
        Decoders.addDecoder(clazz: [TemplateSMSResource].self) { (source: AnyObject, instance: AnyObject?) -> [TemplateSMSResource] in
            return Decoders.decode(clazz: [TemplateSMSResource].self, source: source)
        }
        // Decoder for TemplateSMSResource
        Decoders.addDecoder(clazz: TemplateSMSResource.self) { (source: AnyObject, instance: AnyObject?) -> TemplateSMSResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? TemplateSMSResource() : instance as! TemplateSMSResource
            
            result.from = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["from"] as AnyObject?)
            result.localizer = Decoders.decodeOptional(clazz: Localizer.self, source: sourceDictionary["localizer"] as AnyObject?)
            result.recipients = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["recipients"] as AnyObject?)
            result.templateKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template_key"] as AnyObject?)
            result.templateVars = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["template_vars"] as AnyObject?)
            return result
        }


        // Decoder for [TierResource]
        Decoders.addDecoder(clazz: [TierResource].self) { (source: AnyObject, instance: AnyObject?) -> [TierResource] in
            return Decoders.decode(clazz: [TierResource].self, source: source)
        }
        // Decoder for TierResource
        Decoders.addDecoder(clazz: TierResource.self) { (source: AnyObject, instance: AnyObject?) -> TierResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? TierResource() : instance as! TierResource
            
            result.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.requiredProgress = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["required_progress"] as AnyObject?)
            result.triggerEventName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trigger_event_name"] as AnyObject?)
            return result
        }


        // Decoder for [TokenDetailsResource]
        Decoders.addDecoder(clazz: [TokenDetailsResource].self) { (source: AnyObject, instance: AnyObject?) -> [TokenDetailsResource] in
            return Decoders.decode(clazz: [TokenDetailsResource].self, source: source)
        }
        // Decoder for TokenDetailsResource
        Decoders.addDecoder(clazz: TokenDetailsResource.self) { (source: AnyObject, instance: AnyObject?) -> TokenDetailsResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? TokenDetailsResource() : instance as! TokenDetailsResource
            
            result.clientId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["client_id"] as AnyObject?)
            result.roles = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["roles"] as AnyObject?)
            result.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"] as AnyObject?)
            return result
        }


        // Decoder for [TransactionResource]
        Decoders.addDecoder(clazz: [TransactionResource].self) { (source: AnyObject, instance: AnyObject?) -> [TransactionResource] in
            return Decoders.decode(clazz: [TransactionResource].self, source: source)
        }
        // Decoder for TransactionResource
        Decoders.addDecoder(clazz: TransactionResource.self) { (source: AnyObject, instance: AnyObject?) -> TransactionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? TransactionResource() : instance as! TransactionResource
            
            result.createDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["create_date"] as AnyObject?)
            result.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"] as AnyObject?)
            result.details = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["details"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            result.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"] as AnyObject?)
            result.isRefunded = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_refunded"] as AnyObject?)
            result.response = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["response"] as AnyObject?)
            if let source = sourceDictionary["source"] as? String { 
                result.source = TransactionResource.Source(rawValue: (source))
            }
            
            result.successful = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["successful"] as AnyObject?)
            result.transactionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["transaction_id"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"] as AnyObject?)
            result.value = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"] as AnyObject?)
            return result
        }


        // Decoder for [TypeHintLookupResource]
        Decoders.addDecoder(clazz: [TypeHintLookupResource].self) { (source: AnyObject, instance: AnyObject?) -> [TypeHintLookupResource] in
            return Decoders.decode(clazz: [TypeHintLookupResource].self, source: source)
        }
        // Decoder for TypeHintLookupResource
        Decoders.addDecoder(clazz: TypeHintLookupResource.self) { (source: AnyObject, instance: AnyObject?) -> TypeHintLookupResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? TypeHintLookupResource() : instance as! TypeHintLookupResource
            
            result.lookupKey = Decoders.decodeOptional(clazz: ExpressionResource.self, source: sourceDictionary["lookup_key"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.valueType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value_type"] as AnyObject?)
            return result
        }


        // Decoder for [UsageInfo]
        Decoders.addDecoder(clazz: [UsageInfo].self) { (source: AnyObject, instance: AnyObject?) -> [UsageInfo] in
            return Decoders.decode(clazz: [UsageInfo].self, source: source)
        }
        // Decoder for UsageInfo
        Decoders.addDecoder(clazz: UsageInfo.self) { (source: AnyObject, instance: AnyObject?) -> UsageInfo in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? UsageInfo() : instance as! UsageInfo
            
            result.count = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["count"] as AnyObject?)
            result.date = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["date"] as AnyObject?)
            result.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"] as AnyObject?)
            result.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?)
            return result
        }


        // Decoder for [UserAchievementGroupResource]
        Decoders.addDecoder(clazz: [UserAchievementGroupResource].self) { (source: AnyObject, instance: AnyObject?) -> [UserAchievementGroupResource] in
            return Decoders.decode(clazz: [UserAchievementGroupResource].self, source: source)
        }
        // Decoder for UserAchievementGroupResource
        Decoders.addDecoder(clazz: UserAchievementGroupResource.self) { (source: AnyObject, instance: AnyObject?) -> UserAchievementGroupResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? UserAchievementGroupResource() : instance as! UserAchievementGroupResource
            
            result.achievements = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["achievements"] as AnyObject?)
            result.groupName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["group_name"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.progress = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["progress"] as AnyObject?)
            result.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"] as AnyObject?)
            return result
        }


        // Decoder for [UserAchievementResource]
        Decoders.addDecoder(clazz: [UserAchievementResource].self) { (source: AnyObject, instance: AnyObject?) -> [UserAchievementResource] in
            return Decoders.decode(clazz: [UserAchievementResource].self, source: source)
        }
        // Decoder for UserAchievementResource
        Decoders.addDecoder(clazz: UserAchievementResource.self) { (source: AnyObject, instance: AnyObject?) -> UserAchievementResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? UserAchievementResource() : instance as! UserAchievementResource
            
            result.achieved = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["achieved"] as AnyObject?)
            result.achievementName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["achievement_name"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.earnedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["earned_date"] as AnyObject?)
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return result
        }


        // Decoder for [UserActionLog]
        Decoders.addDecoder(clazz: [UserActionLog].self) { (source: AnyObject, instance: AnyObject?) -> [UserActionLog] in
            return Decoders.decode(clazz: [UserActionLog].self, source: source)
        }
        // Decoder for UserActionLog
        Decoders.addDecoder(clazz: UserActionLog.self) { (source: AnyObject, instance: AnyObject?) -> UserActionLog in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? UserActionLog() : instance as! UserActionLog
            
            result.actionDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["action_description"] as AnyObject?)
            result.actionName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["action_name"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.details = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["details"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.requestId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["request_id"] as AnyObject?)
            result.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"] as AnyObject?)
            return result
        }


        // Decoder for [UserActivityResults]
        Decoders.addDecoder(clazz: [UserActivityResults].self) { (source: AnyObject, instance: AnyObject?) -> [UserActivityResults] in
            return Decoders.decode(clazz: [UserActivityResults].self, source: source)
        }
        // Decoder for UserActivityResults
        Decoders.addDecoder(clazz: UserActivityResults.self) { (source: AnyObject, instance: AnyObject?) -> UserActivityResults in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? UserActivityResults() : instance as! UserActivityResults
            
            result.currencyRewards = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["currency_rewards"] as AnyObject?)
            result.itemRewards = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["item_rewards"] as AnyObject?)
            result.rank = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["rank"] as AnyObject?)
            result.score = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["score"] as AnyObject?)
            result.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            result.ties = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ties"] as AnyObject?)
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            result.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"] as AnyObject?)
            return result
        }


        // Decoder for [UserActivityResultsResource]
        Decoders.addDecoder(clazz: [UserActivityResultsResource].self) { (source: AnyObject, instance: AnyObject?) -> [UserActivityResultsResource] in
            return Decoders.decode(clazz: [UserActivityResultsResource].self, source: source)
        }
        // Decoder for UserActivityResultsResource
        Decoders.addDecoder(clazz: UserActivityResultsResource.self) { (source: AnyObject, instance: AnyObject?) -> UserActivityResultsResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? UserActivityResultsResource() : instance as! UserActivityResultsResource
            
            result.score = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["score"] as AnyObject?)
            result.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            result.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"] as AnyObject?)
            return result
        }


        // Decoder for [UserBaseResource]
        Decoders.addDecoder(clazz: [UserBaseResource].self) { (source: AnyObject, instance: AnyObject?) -> [UserBaseResource] in
            return Decoders.decode(clazz: [UserBaseResource].self, source: source)
        }
        // Decoder for UserBaseResource
        Decoders.addDecoder(clazz: UserBaseResource.self) { (source: AnyObject, instance: AnyObject?) -> UserBaseResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? UserBaseResource() : instance as! UserBaseResource
            
            result.avatarUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["avatar_url"] as AnyObject?)
            result.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["display_name"] as AnyObject?)
            result.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"] as AnyObject?)
            result.fullname = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullname"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            result.lastActivity = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["last_activity"] as AnyObject?)
            result.lastUpdated = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["last_updated"] as AnyObject?)
            result.memberSince = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["member_since"] as AnyObject?)
            result.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"] as AnyObject?)
            return result
        }


        // Decoder for [UserInventoryAddRequest]
        Decoders.addDecoder(clazz: [UserInventoryAddRequest].self) { (source: AnyObject, instance: AnyObject?) -> [UserInventoryAddRequest] in
            return Decoders.decode(clazz: [UserInventoryAddRequest].self, source: source)
        }
        // Decoder for UserInventoryAddRequest
        Decoders.addDecoder(clazz: UserInventoryAddRequest.self) { (source: AnyObject, instance: AnyObject?) -> UserInventoryAddRequest in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? UserInventoryAddRequest() : instance as! UserInventoryAddRequest
            
            result.note = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["note"] as AnyObject?)
            result.overrides = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["overrides"] as AnyObject?)
            result.skipInvoice = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["skip_invoice"] as AnyObject?)
            result.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"] as AnyObject?)
            return result
        }


        // Decoder for [UserInventoryResource]
        Decoders.addDecoder(clazz: [UserInventoryResource].self) { (source: AnyObject, instance: AnyObject?) -> [UserInventoryResource] in
            return Decoders.decode(clazz: [UserInventoryResource].self, source: source)
        }
        // Decoder for UserInventoryResource
        Decoders.addDecoder(clazz: UserInventoryResource.self) { (source: AnyObject, instance: AnyObject?) -> UserInventoryResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? UserInventoryResource() : instance as! UserInventoryResource
            
            result.behaviorData = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["behavior_data"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.expires = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["expires"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            result.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"] as AnyObject?)
            result.itemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["item_id"] as AnyObject?)
            result.itemName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["item_name"] as AnyObject?)
            result.itemTypeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["item_type_hint"] as AnyObject?)
            if let status = sourceDictionary["status"] as? String { 
                result.status = UserInventoryResource.Status(rawValue: (status))
            }
            
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            result.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"] as AnyObject?)
            return result
        }


        // Decoder for [UserItemLogResource]
        Decoders.addDecoder(clazz: [UserItemLogResource].self) { (source: AnyObject, instance: AnyObject?) -> [UserItemLogResource] in
            return Decoders.decode(clazz: [UserItemLogResource].self, source: source)
        }
        // Decoder for UserItemLogResource
        Decoders.addDecoder(clazz: UserItemLogResource.self) { (source: AnyObject, instance: AnyObject?) -> UserItemLogResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? UserItemLogResource() : instance as! UserItemLogResource
            
            result.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            result.info = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["info"] as AnyObject?)
            result.item = Decoders.decodeOptional(clazz: SimpleReferenceResourceint.self, source: sourceDictionary["item"] as AnyObject?)
            result.logDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["log_date"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"] as AnyObject?)
            result.userInventory = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_inventory"] as AnyObject?)
            return result
        }


        // Decoder for [UserLevelingResource]
        Decoders.addDecoder(clazz: [UserLevelingResource].self) { (source: AnyObject, instance: AnyObject?) -> [UserLevelingResource] in
            return Decoders.decode(clazz: [UserLevelingResource].self, source: source)
        }
        // Decoder for UserLevelingResource
        Decoders.addDecoder(clazz: UserLevelingResource.self) { (source: AnyObject, instance: AnyObject?) -> UserLevelingResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? UserLevelingResource() : instance as! UserLevelingResource
            
            result.lastTierName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last_tier_name"] as AnyObject?)
            result.lastTierProgress = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["last_tier_progress"] as AnyObject?)
            result.levelName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["level_name"] as AnyObject?)
            result.nextTierName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["next_tier_name"] as AnyObject?)
            result.nextTierProgress = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["next_tier_progress"] as AnyObject?)
            result.progress = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["progress"] as AnyObject?)
            result.tierNames = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tier_names"] as AnyObject?)
            result.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"] as AnyObject?)
            return result
        }


        // Decoder for [UserRelationshipReferenceResource]
        Decoders.addDecoder(clazz: [UserRelationshipReferenceResource].self) { (source: AnyObject, instance: AnyObject?) -> [UserRelationshipReferenceResource] in
            return Decoders.decode(clazz: [UserRelationshipReferenceResource].self, source: source)
        }
        // Decoder for UserRelationshipReferenceResource
        Decoders.addDecoder(clazz: UserRelationshipReferenceResource.self) { (source: AnyObject, instance: AnyObject?) -> UserRelationshipReferenceResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? UserRelationshipReferenceResource() : instance as! UserRelationshipReferenceResource
            
            result.avatarUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["avatar_url"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context"] as AnyObject?)
            result.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["display_name"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            result.relationshipId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["relationship_id"] as AnyObject?)
            result.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"] as AnyObject?)
            return result
        }


        // Decoder for [UserRelationshipResource]
        Decoders.addDecoder(clazz: [UserRelationshipResource].self) { (source: AnyObject, instance: AnyObject?) -> [UserRelationshipResource] in
            return Decoders.decode(clazz: [UserRelationshipResource].self, source: source)
        }
        // Decoder for UserRelationshipResource
        Decoders.addDecoder(clazz: UserRelationshipResource.self) { (source: AnyObject, instance: AnyObject?) -> UserRelationshipResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? UserRelationshipResource() : instance as! UserRelationshipResource
            
            result.child = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["child"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            result.parent = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["parent"] as AnyObject?)
            return result
        }


        // Decoder for [UserResource]
        Decoders.addDecoder(clazz: [UserResource].self) { (source: AnyObject, instance: AnyObject?) -> [UserResource] in
            return Decoders.decode(clazz: [UserResource].self, source: source)
        }
        // Decoder for UserResource
        Decoders.addDecoder(clazz: UserResource.self) { (source: AnyObject, instance: AnyObject?) -> UserResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? UserResource() : instance as! UserResource
            
            result.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            result.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"] as AnyObject?)
            result.address2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address2"] as AnyObject?)
            result.avatarUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["avatar_url"] as AnyObject?)
            result.children = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["children"] as AnyObject?)
            result.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"] as AnyObject?)
            result.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_code"] as AnyObject?)
            result.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"] as AnyObject?)
            result.dateOfBirth = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["date_of_birth"] as AnyObject?)
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["display_name"] as AnyObject?)
            result.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"] as AnyObject?)
            result.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["first_name"] as AnyObject?)
            result.fullname = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullname"] as AnyObject?)
            result.gender = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gender"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            result.languageCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["language_code"] as AnyObject?)
            result.lastActivity = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["last_activity"] as AnyObject?)
            result.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last_name"] as AnyObject?)
            result.lastUpdated = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["last_updated"] as AnyObject?)
            result.memberSince = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["member_since"] as AnyObject?)
            result.mobileNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mobile_number"] as AnyObject?)
            result.parents = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["parents"] as AnyObject?)
            result.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"] as AnyObject?)
            result.postalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["postal_code"] as AnyObject?)
            result.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"] as AnyObject?)
            result.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            result.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            result.timezoneCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timezone_code"] as AnyObject?)
            result.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"] as AnyObject?)
            return result
        }


        // Decoder for [UsernameLookupResource]
        Decoders.addDecoder(clazz: [UsernameLookupResource].self) { (source: AnyObject, instance: AnyObject?) -> [UsernameLookupResource] in
            return Decoders.decode(clazz: [UsernameLookupResource].self, source: source)
        }
        // Decoder for UsernameLookupResource
        Decoders.addDecoder(clazz: UsernameLookupResource.self) { (source: AnyObject, instance: AnyObject?) -> UsernameLookupResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? UsernameLookupResource() : instance as! UsernameLookupResource
            
            result.lookupKey = Decoders.decodeOptional(clazz: ExpressionResource.self, source: sourceDictionary["lookup_key"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.valueType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value_type"] as AnyObject?)
            return result
        }


        // Decoder for [VariableTypeResource]
        Decoders.addDecoder(clazz: [VariableTypeResource].self) { (source: AnyObject, instance: AnyObject?) -> [VariableTypeResource] in
            return Decoders.decode(clazz: [VariableTypeResource].self, source: source)
        }
        // Decoder for VariableTypeResource
        Decoders.addDecoder(clazz: VariableTypeResource.self) { (source: AnyObject, instance: AnyObject?) -> VariableTypeResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? VariableTypeResource() : instance as! VariableTypeResource
            
            if let base = sourceDictionary["base"] as? String { 
                result.base = VariableTypeResource.Base(rawValue: (base))
            }
            
            result.enumerable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enumerable"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return result
        }


        // Decoder for [VendorEmailLookupResource]
        Decoders.addDecoder(clazz: [VendorEmailLookupResource].self) { (source: AnyObject, instance: AnyObject?) -> [VendorEmailLookupResource] in
            return Decoders.decode(clazz: [VendorEmailLookupResource].self, source: source)
        }
        // Decoder for VendorEmailLookupResource
        Decoders.addDecoder(clazz: VendorEmailLookupResource.self) { (source: AnyObject, instance: AnyObject?) -> VendorEmailLookupResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? VendorEmailLookupResource() : instance as! VendorEmailLookupResource
            
            result.lookupKey = Decoders.decodeOptional(clazz: ExpressionResource.self, source: sourceDictionary["lookup_key"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.valueType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value_type"] as AnyObject?)
            return result
        }


        // Decoder for [VendorResource]
        Decoders.addDecoder(clazz: [VendorResource].self) { (source: AnyObject, instance: AnyObject?) -> [VendorResource] in
            return Decoders.decode(clazz: [VendorResource].self, source: source)
        }
        // Decoder for VendorResource
        Decoders.addDecoder(clazz: VendorResource.self) { (source: AnyObject, instance: AnyObject?) -> VendorResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? VendorResource() : instance as! VendorResource
            
            result.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"] as AnyObject?)
            result.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            result.createDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["create_date"] as AnyObject?)
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            result.imageUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["image_url"] as AnyObject?)
            result.manualApproval = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["manual_approval"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.primaryContactEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["primary_contact_email"] as AnyObject?)
            result.primaryContactName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["primary_contact_name"] as AnyObject?)
            result.primaryContactPhone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["primary_contact_phone"] as AnyObject?)
            result.salesEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sales_email"] as AnyObject?)
            result.supportEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["support_email"] as AnyObject?)
            result.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            result.updateDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["update_date"] as AnyObject?)
            result.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?)
            return result
        }


        // Decoder for [Version]
        Decoders.addDecoder(clazz: [Version].self) { (source: AnyObject, instance: AnyObject?) -> [Version] in
            return Decoders.decode(clazz: [Version].self, source: source)
        }
        // Decoder for Version
        Decoders.addDecoder(clazz: Version.self) { (source: AnyObject, instance: AnyObject?) -> Version in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Version() : instance as! Version
            
            result.version = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["version"] as AnyObject?)
            return result
        }


        // Decoder for [VideoRelationshipResource]
        Decoders.addDecoder(clazz: [VideoRelationshipResource].self) { (source: AnyObject, instance: AnyObject?) -> [VideoRelationshipResource] in
            return Decoders.decode(clazz: [VideoRelationshipResource].self, source: source)
        }
        // Decoder for VideoRelationshipResource
        Decoders.addDecoder(clazz: VideoRelationshipResource.self) { (source: AnyObject, instance: AnyObject?) -> VideoRelationshipResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? VideoRelationshipResource() : instance as! VideoRelationshipResource
            
            result.from = Decoders.decodeOptional(clazz: SimpleReferenceResourcelong.self, source: sourceDictionary["from"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            result.relationshipDetails = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["relationship_details"] as AnyObject?)
            result.to = Decoders.decodeOptional(clazz: SimpleReferenceResourcelong.self, source: sourceDictionary["to"] as AnyObject?)
            return result
        }


        // Decoder for [VideoResource]
        Decoders.addDecoder(clazz: [VideoResource].self) { (source: AnyObject, instance: AnyObject?) -> [VideoResource] in
            return Decoders.decode(clazz: [VideoResource].self, source: source)
        }
        // Decoder for VideoResource
        Decoders.addDecoder(clazz: VideoResource.self) { (source: AnyObject, instance: AnyObject?) -> VideoResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? VideoResource() : instance as! VideoResource
            
            result.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"] as AnyObject?)
            result.author = Decoders.decodeOptional(clazz: SimpleReferenceResourcelong.self, source: sourceDictionary["author"] as AnyObject?)
            result.authored = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["authored"] as AnyObject?)
            result.banned = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["banned"] as AnyObject?)
            result.category = Decoders.decodeOptional(clazz: SimpleReferenceResourcestring.self, source: sourceDictionary["category"] as AnyObject?)
            result.comments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["comments"] as AnyObject?)
            result.contributors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["contributors"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.embed = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["embed"] as AnyObject?)
            result._extension = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["extension"] as AnyObject?)
            result.height = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["height"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            result.length = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["length"] as AnyObject?)
            result.location = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["location"] as AnyObject?)
            result.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"] as AnyObject?)
            result.mimeType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mime_type"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.priority = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["priority"] as AnyObject?)
            if let privacy = sourceDictionary["privacy"] as? String { 
                result.privacy = VideoResource.Privacy(rawValue: (privacy))
            }
            
            result.published = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["published"] as AnyObject?)
            result.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["size"] as AnyObject?)
            result.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            result.thumbnail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["thumbnail"] as AnyObject?)
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            result.uploader = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["uploader"] as AnyObject?)
            result.views = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["views"] as AnyObject?)
            result.width = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["width"] as AnyObject?)
            return result
        }


        // Decoder for [WalletAlterRequest]
        Decoders.addDecoder(clazz: [WalletAlterRequest].self) { (source: AnyObject, instance: AnyObject?) -> [WalletAlterRequest] in
            return Decoders.decode(clazz: [WalletAlterRequest].self, source: source)
        }
        // Decoder for WalletAlterRequest
        Decoders.addDecoder(clazz: WalletAlterRequest.self) { (source: AnyObject, instance: AnyObject?) -> WalletAlterRequest in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? WalletAlterRequest() : instance as! WalletAlterRequest
            
            result.delta = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["delta"] as AnyObject?)
            result.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"] as AnyObject?)
            result.reason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reason"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return result
        }


        // Decoder for [WalletTotalResponse]
        Decoders.addDecoder(clazz: [WalletTotalResponse].self) { (source: AnyObject, instance: AnyObject?) -> [WalletTotalResponse] in
            return Decoders.decode(clazz: [WalletTotalResponse].self, source: source)
        }
        // Decoder for WalletTotalResponse
        Decoders.addDecoder(clazz: WalletTotalResponse.self) { (source: AnyObject, instance: AnyObject?) -> WalletTotalResponse in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? WalletTotalResponse() : instance as! WalletTotalResponse
            
            result.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"] as AnyObject?)
            result.total = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["total"] as AnyObject?)
            return result
        }


        // Decoder for [WalletTransactionResource]
        Decoders.addDecoder(clazz: [WalletTransactionResource].self) { (source: AnyObject, instance: AnyObject?) -> [WalletTransactionResource] in
            return Decoders.decode(clazz: [WalletTransactionResource].self, source: source)
        }
        // Decoder for WalletTransactionResource
        Decoders.addDecoder(clazz: WalletTransactionResource.self) { (source: AnyObject, instance: AnyObject?) -> WalletTransactionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? WalletTransactionResource() : instance as! WalletTransactionResource
            
            result.balance = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["balance"] as AnyObject?)
            result.createDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["create_date"] as AnyObject?)
            result.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"] as AnyObject?)
            result.details = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["details"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            result.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"] as AnyObject?)
            result.isRefunded = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_refunded"] as AnyObject?)
            result.response = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["response"] as AnyObject?)
            if let source = sourceDictionary["source"] as? String { 
                result.source = WalletTransactionResource.Source(rawValue: (source))
            }
            
            result.successful = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["successful"] as AnyObject?)
            result.transactionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["transaction_id"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"] as AnyObject?)
            result.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"] as AnyObject?)
            result.value = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"] as AnyObject?)
            result.walletId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["wallet_id"] as AnyObject?)
            return result
        }


        // Decoder for [XsollaPaymentRequest]
        Decoders.addDecoder(clazz: [XsollaPaymentRequest].self) { (source: AnyObject, instance: AnyObject?) -> [XsollaPaymentRequest] in
            return Decoders.decode(clazz: [XsollaPaymentRequest].self, source: source)
        }
        // Decoder for XsollaPaymentRequest
        Decoders.addDecoder(clazz: XsollaPaymentRequest.self) { (source: AnyObject, instance: AnyObject?) -> XsollaPaymentRequest in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? XsollaPaymentRequest() : instance as! XsollaPaymentRequest
            
            result.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"] as AnyObject?)
            result.returnUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["return_url"] as AnyObject?)
            return result
        }


        // Decoder for [AudioPropertyDefinitionResource]
        Decoders.addDecoder(clazz: [AudioPropertyDefinitionResource].self) { (source: AnyObject, instance: AnyObject?) -> [AudioPropertyDefinitionResource] in
            return Decoders.decode(clazz: [AudioPropertyDefinitionResource].self, source: source)
        }
        // Decoder for AudioPropertyDefinitionResource
        Decoders.addDecoder(clazz: AudioPropertyDefinitionResource.self) { (source: AnyObject, instance: AnyObject?) -> AudioPropertyDefinitionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? AudioPropertyDefinitionResource() : instance as! AudioPropertyDefinitionResource
            if decoders["\(PropertyDefinitionResource.self)"] != nil {
              _ = Decoders.decode(clazz: PropertyDefinitionResource.self, source: source, instance: result)
            }
            
            result.fieldList = Decoders.decodeOptional(clazz: PropertyFieldListResource.self, source: sourceDictionary["field_list"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result._required = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["required"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.fileType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["file_type"] as AnyObject?)
            result.maxLength = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_length"] as AnyObject?)
            result.minLength = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min_length"] as AnyObject?)
            return result
        }


        // Decoder for [BooleanProperty]
        Decoders.addDecoder(clazz: [BooleanProperty].self) { (source: AnyObject, instance: AnyObject?) -> [BooleanProperty] in
            return Decoders.decode(clazz: [BooleanProperty].self, source: source)
        }
        // Decoder for BooleanProperty
        Decoders.addDecoder(clazz: BooleanProperty.self) { (source: AnyObject, instance: AnyObject?) -> BooleanProperty in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? BooleanProperty() : instance as! BooleanProperty
            if decoders["\(Property.self)"] != nil {
              _ = Decoders.decode(clazz: Property.self, source: source, instance: result)
            }
            
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.value = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["value"] as AnyObject?)
            return result
        }


        // Decoder for [BooleanPropertyDefinitionResource]
        Decoders.addDecoder(clazz: [BooleanPropertyDefinitionResource].self) { (source: AnyObject, instance: AnyObject?) -> [BooleanPropertyDefinitionResource] in
            return Decoders.decode(clazz: [BooleanPropertyDefinitionResource].self, source: source)
        }
        // Decoder for BooleanPropertyDefinitionResource
        Decoders.addDecoder(clazz: BooleanPropertyDefinitionResource.self) { (source: AnyObject, instance: AnyObject?) -> BooleanPropertyDefinitionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? BooleanPropertyDefinitionResource() : instance as! BooleanPropertyDefinitionResource
            if decoders["\(PropertyDefinitionResource.self)"] != nil {
              _ = Decoders.decode(clazz: PropertyDefinitionResource.self, source: source, instance: result)
            }
            
            result.fieldList = Decoders.decodeOptional(clazz: PropertyFieldListResource.self, source: sourceDictionary["field_list"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result._required = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["required"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return result
        }


        // Decoder for [CacheClearEvent]
        Decoders.addDecoder(clazz: [CacheClearEvent].self) { (source: AnyObject, instance: AnyObject?) -> [CacheClearEvent] in
            return Decoders.decode(clazz: [CacheClearEvent].self, source: source)
        }
        // Decoder for CacheClearEvent
        Decoders.addDecoder(clazz: CacheClearEvent.self) { (source: AnyObject, instance: AnyObject?) -> CacheClearEvent in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? CacheClearEvent() : instance as! CacheClearEvent
            if decoders["\(BroadcastableEvent.self)"] != nil {
              _ = Decoders.decode(clazz: BroadcastableEvent.self, source: source, instance: result)
            }
            
            result.client = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["client"] as AnyObject?)
            result.customer = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["customer"] as AnyObject?)
            result.doNotBroadcast = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["do_not_broadcast"] as AnyObject?)
            result.section = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["section"] as AnyObject?)
            result.source = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["source"] as AnyObject?)
            result.specifics = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["specifics"] as AnyObject?)
            result.synchronous = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["synchronous"] as AnyObject?)
            result.timestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["timestamp"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.customerSetup = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["customer_setup"] as AnyObject?)
            result.customerTeardown = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["customer_teardown"] as AnyObject?)
            return result
        }


        // Decoder for [Consumable]
        Decoders.addDecoder(clazz: [Consumable].self) { (source: AnyObject, instance: AnyObject?) -> [Consumable] in
            return Decoders.decode(clazz: [Consumable].self, source: source)
        }
        // Decoder for Consumable
        Decoders.addDecoder(clazz: Consumable.self) { (source: AnyObject, instance: AnyObject?) -> Consumable in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Consumable() : instance as! Consumable
            if decoders["\(Behavior.self)"] != nil {
              _ = Decoders.decode(clazz: Behavior.self, source: source, instance: result)
            }
            
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"] as AnyObject?)
            result.maxUse = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_use"] as AnyObject?)
            return result
        }


        // Decoder for [DateProperty]
        Decoders.addDecoder(clazz: [DateProperty].self) { (source: AnyObject, instance: AnyObject?) -> [DateProperty] in
            return Decoders.decode(clazz: [DateProperty].self, source: source)
        }
        // Decoder for DateProperty
        Decoders.addDecoder(clazz: DateProperty.self) { (source: AnyObject, instance: AnyObject?) -> DateProperty in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? DateProperty() : instance as! DateProperty
            if decoders["\(Property.self)"] != nil {
              _ = Decoders.decode(clazz: Property.self, source: source, instance: result)
            }
            
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.value = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["value"] as AnyObject?)
            return result
        }


        // Decoder for [DatePropertyDefinitionResource]
        Decoders.addDecoder(clazz: [DatePropertyDefinitionResource].self) { (source: AnyObject, instance: AnyObject?) -> [DatePropertyDefinitionResource] in
            return Decoders.decode(clazz: [DatePropertyDefinitionResource].self, source: source)
        }
        // Decoder for DatePropertyDefinitionResource
        Decoders.addDecoder(clazz: DatePropertyDefinitionResource.self) { (source: AnyObject, instance: AnyObject?) -> DatePropertyDefinitionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? DatePropertyDefinitionResource() : instance as! DatePropertyDefinitionResource
            if decoders["\(PropertyDefinitionResource.self)"] != nil {
              _ = Decoders.decode(clazz: PropertyDefinitionResource.self, source: source, instance: result)
            }
            
            result.fieldList = Decoders.decodeOptional(clazz: PropertyFieldListResource.self, source: sourceDictionary["field_list"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result._required = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["required"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.max = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["max"] as AnyObject?)
            result.min = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["min"] as AnyObject?)
            return result
        }


        // Decoder for [DoubleProperty]
        Decoders.addDecoder(clazz: [DoubleProperty].self) { (source: AnyObject, instance: AnyObject?) -> [DoubleProperty] in
            return Decoders.decode(clazz: [DoubleProperty].self, source: source)
        }
        // Decoder for DoubleProperty
        Decoders.addDecoder(clazz: DoubleProperty.self) { (source: AnyObject, instance: AnyObject?) -> DoubleProperty in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? DoubleProperty() : instance as! DoubleProperty
            if decoders["\(Property.self)"] != nil {
              _ = Decoders.decode(clazz: Property.self, source: source, instance: result)
            }
            
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.value = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"] as AnyObject?)
            return result
        }


        // Decoder for [DoublePropertyDefinitionResource]
        Decoders.addDecoder(clazz: [DoublePropertyDefinitionResource].self) { (source: AnyObject, instance: AnyObject?) -> [DoublePropertyDefinitionResource] in
            return Decoders.decode(clazz: [DoublePropertyDefinitionResource].self, source: source)
        }
        // Decoder for DoublePropertyDefinitionResource
        Decoders.addDecoder(clazz: DoublePropertyDefinitionResource.self) { (source: AnyObject, instance: AnyObject?) -> DoublePropertyDefinitionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? DoublePropertyDefinitionResource() : instance as! DoublePropertyDefinitionResource
            if decoders["\(PropertyDefinitionResource.self)"] != nil {
              _ = Decoders.decode(clazz: PropertyDefinitionResource.self, source: source, instance: result)
            }
            
            result.fieldList = Decoders.decodeOptional(clazz: PropertyFieldListResource.self, source: sourceDictionary["field_list"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result._required = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["required"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.max = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["max"] as AnyObject?)
            result.min = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["min"] as AnyObject?)
            return result
        }


        // Decoder for [EntitlementItem]
        Decoders.addDecoder(clazz: [EntitlementItem].self) { (source: AnyObject, instance: AnyObject?) -> [EntitlementItem] in
            return Decoders.decode(clazz: [EntitlementItem].self, source: source)
        }
        // Decoder for EntitlementItem
        Decoders.addDecoder(clazz: EntitlementItem.self) { (source: AnyObject, instance: AnyObject?) -> EntitlementItem in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? EntitlementItem() : instance as! EntitlementItem
            if decoders["\(Item.self)"] != nil {
              _ = Decoders.decode(clazz: Item.self, source: source, instance: result)
            }
            
            result.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            result.behaviors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["behaviors"] as AnyObject?)
            result.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            result.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sort"] as AnyObject?)
            result.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            result.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            result.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"] as AnyObject?)
            result.uniqueKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_key"] as AnyObject?)
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return result
        }


        // Decoder for [Expirable]
        Decoders.addDecoder(clazz: [Expirable].self) { (source: AnyObject, instance: AnyObject?) -> [Expirable] in
            return Decoders.decode(clazz: [Expirable].self, source: source)
        }
        // Decoder for Expirable
        Decoders.addDecoder(clazz: Expirable.self) { (source: AnyObject, instance: AnyObject?) -> Expirable in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Expirable() : instance as! Expirable
            if decoders["\(Behavior.self)"] != nil {
              _ = Decoders.decode(clazz: Behavior.self, source: source, instance: result)
            }
            
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"] as AnyObject?)
            result.timeLength = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["time_length"] as AnyObject?)
            result.unitOfTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unit_of_time"] as AnyObject?)
            return result
        }


        // Decoder for [FileGroupProperty]
        Decoders.addDecoder(clazz: [FileGroupProperty].self) { (source: AnyObject, instance: AnyObject?) -> [FileGroupProperty] in
            return Decoders.decode(clazz: [FileGroupProperty].self, source: source)
        }
        // Decoder for FileGroupProperty
        Decoders.addDecoder(clazz: FileGroupProperty.self) { (source: AnyObject, instance: AnyObject?) -> FileGroupProperty in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? FileGroupProperty() : instance as! FileGroupProperty
            if decoders["\(Property.self)"] != nil {
              _ = Decoders.decode(clazz: Property.self, source: source, instance: result)
            }
            
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.files = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["files"] as AnyObject?)
            return result
        }


        // Decoder for [FileGroupPropertyDefinitionResource]
        Decoders.addDecoder(clazz: [FileGroupPropertyDefinitionResource].self) { (source: AnyObject, instance: AnyObject?) -> [FileGroupPropertyDefinitionResource] in
            return Decoders.decode(clazz: [FileGroupPropertyDefinitionResource].self, source: source)
        }
        // Decoder for FileGroupPropertyDefinitionResource
        Decoders.addDecoder(clazz: FileGroupPropertyDefinitionResource.self) { (source: AnyObject, instance: AnyObject?) -> FileGroupPropertyDefinitionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? FileGroupPropertyDefinitionResource() : instance as! FileGroupPropertyDefinitionResource
            if decoders["\(PropertyDefinitionResource.self)"] != nil {
              _ = Decoders.decode(clazz: PropertyDefinitionResource.self, source: source, instance: result)
            }
            
            result.fieldList = Decoders.decodeOptional(clazz: PropertyFieldListResource.self, source: sourceDictionary["field_list"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result._required = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["required"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.fileType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["file_type"] as AnyObject?)
            result.maxCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_count"] as AnyObject?)
            result.maxFileSize = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["max_file_size"] as AnyObject?)
            result.minCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min_count"] as AnyObject?)
            return result
        }


        // Decoder for [FileProperty]
        Decoders.addDecoder(clazz: [FileProperty].self) { (source: AnyObject, instance: AnyObject?) -> [FileProperty] in
            return Decoders.decode(clazz: [FileProperty].self, source: source)
        }
        // Decoder for FileProperty
        Decoders.addDecoder(clazz: FileProperty.self) { (source: AnyObject, instance: AnyObject?) -> FileProperty in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? FileProperty() : instance as! FileProperty
            if decoders["\(Property.self)"] != nil {
              _ = Decoders.decode(clazz: Property.self, source: source, instance: result)
            }
            
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.crc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["crc"] as AnyObject?)
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.fileType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["file_type"] as AnyObject?)
            result.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?)
            return result
        }


        // Decoder for [FilePropertyDefinitionResource]
        Decoders.addDecoder(clazz: [FilePropertyDefinitionResource].self) { (source: AnyObject, instance: AnyObject?) -> [FilePropertyDefinitionResource] in
            return Decoders.decode(clazz: [FilePropertyDefinitionResource].self, source: source)
        }
        // Decoder for FilePropertyDefinitionResource
        Decoders.addDecoder(clazz: FilePropertyDefinitionResource.self) { (source: AnyObject, instance: AnyObject?) -> FilePropertyDefinitionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? FilePropertyDefinitionResource() : instance as! FilePropertyDefinitionResource
            if decoders["\(PropertyDefinitionResource.self)"] != nil {
              _ = Decoders.decode(clazz: PropertyDefinitionResource.self, source: source, instance: result)
            }
            
            result.fieldList = Decoders.decodeOptional(clazz: PropertyFieldListResource.self, source: sourceDictionary["field_list"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result._required = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["required"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.fileType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["file_type"] as AnyObject?)
            result.maxFileSize = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["max_file_size"] as AnyObject?)
            return result
        }


        // Decoder for [FormattedTextProperty]
        Decoders.addDecoder(clazz: [FormattedTextProperty].self) { (source: AnyObject, instance: AnyObject?) -> [FormattedTextProperty] in
            return Decoders.decode(clazz: [FormattedTextProperty].self, source: source)
        }
        // Decoder for FormattedTextProperty
        Decoders.addDecoder(clazz: FormattedTextProperty.self) { (source: AnyObject, instance: AnyObject?) -> FormattedTextProperty in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? FormattedTextProperty() : instance as! FormattedTextProperty
            if decoders["\(Property.self)"] != nil {
              _ = Decoders.decode(clazz: Property.self, source: source, instance: result)
            }
            
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"] as AnyObject?)
            return result
        }


        // Decoder for [FormattedTextPropertyDefinitionResource]
        Decoders.addDecoder(clazz: [FormattedTextPropertyDefinitionResource].self) { (source: AnyObject, instance: AnyObject?) -> [FormattedTextPropertyDefinitionResource] in
            return Decoders.decode(clazz: [FormattedTextPropertyDefinitionResource].self, source: source)
        }
        // Decoder for FormattedTextPropertyDefinitionResource
        Decoders.addDecoder(clazz: FormattedTextPropertyDefinitionResource.self) { (source: AnyObject, instance: AnyObject?) -> FormattedTextPropertyDefinitionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? FormattedTextPropertyDefinitionResource() : instance as! FormattedTextPropertyDefinitionResource
            if decoders["\(PropertyDefinitionResource.self)"] != nil {
              _ = Decoders.decode(clazz: PropertyDefinitionResource.self, source: source, instance: result)
            }
            
            result.fieldList = Decoders.decodeOptional(clazz: PropertyFieldListResource.self, source: sourceDictionary["field_list"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result._required = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["required"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.maxLength = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_length"] as AnyObject?)
            return result
        }


        // Decoder for [Fulfillable]
        Decoders.addDecoder(clazz: [Fulfillable].self) { (source: AnyObject, instance: AnyObject?) -> [Fulfillable] in
            return Decoders.decode(clazz: [Fulfillable].self, source: source)
        }
        // Decoder for Fulfillable
        Decoders.addDecoder(clazz: Fulfillable.self) { (source: AnyObject, instance: AnyObject?) -> Fulfillable in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Fulfillable() : instance as! Fulfillable
            if decoders["\(Behavior.self)"] != nil {
              _ = Decoders.decode(clazz: Behavior.self, source: source, instance: result)
            }
            
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"] as AnyObject?)
            result.typeName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_name"] as AnyObject?)
            return result
        }


        // Decoder for [GuestPlayable]
        Decoders.addDecoder(clazz: [GuestPlayable].self) { (source: AnyObject, instance: AnyObject?) -> [GuestPlayable] in
            return Decoders.decode(clazz: [GuestPlayable].self, source: source)
        }
        // Decoder for GuestPlayable
        Decoders.addDecoder(clazz: GuestPlayable.self) { (source: AnyObject, instance: AnyObject?) -> GuestPlayable in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? GuestPlayable() : instance as! GuestPlayable
            if decoders["\(Behavior.self)"] != nil {
              _ = Decoders.decode(clazz: Behavior.self, source: source, instance: result)
            }
            
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"] as AnyObject?)
            result.allowed = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["allowed"] as AnyObject?)
            result.leaderboard = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["leaderboard"] as AnyObject?)
            return result
        }


        // Decoder for [ImagePropertyDefinitionResource]
        Decoders.addDecoder(clazz: [ImagePropertyDefinitionResource].self) { (source: AnyObject, instance: AnyObject?) -> [ImagePropertyDefinitionResource] in
            return Decoders.decode(clazz: [ImagePropertyDefinitionResource].self, source: source)
        }
        // Decoder for ImagePropertyDefinitionResource
        Decoders.addDecoder(clazz: ImagePropertyDefinitionResource.self) { (source: AnyObject, instance: AnyObject?) -> ImagePropertyDefinitionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ImagePropertyDefinitionResource() : instance as! ImagePropertyDefinitionResource
            if decoders["\(PropertyDefinitionResource.self)"] != nil {
              _ = Decoders.decode(clazz: PropertyDefinitionResource.self, source: source, instance: result)
            }
            
            result.fieldList = Decoders.decodeOptional(clazz: PropertyFieldListResource.self, source: sourceDictionary["field_list"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result._required = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["required"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.fileType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["file_type"] as AnyObject?)
            result.maxHeight = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_height"] as AnyObject?)
            result.maxWidth = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_width"] as AnyObject?)
            result.minHeight = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min_height"] as AnyObject?)
            result.minWidth = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min_width"] as AnyObject?)
            return result
        }


        // Decoder for [IntegerProperty]
        Decoders.addDecoder(clazz: [IntegerProperty].self) { (source: AnyObject, instance: AnyObject?) -> [IntegerProperty] in
            return Decoders.decode(clazz: [IntegerProperty].self, source: source)
        }
        // Decoder for IntegerProperty
        Decoders.addDecoder(clazz: IntegerProperty.self) { (source: AnyObject, instance: AnyObject?) -> IntegerProperty in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? IntegerProperty() : instance as! IntegerProperty
            if decoders["\(Property.self)"] != nil {
              _ = Decoders.decode(clazz: Property.self, source: source, instance: result)
            }
            
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.value = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["value"] as AnyObject?)
            return result
        }


        // Decoder for [IntegerPropertyDefinitionResource]
        Decoders.addDecoder(clazz: [IntegerPropertyDefinitionResource].self) { (source: AnyObject, instance: AnyObject?) -> [IntegerPropertyDefinitionResource] in
            return Decoders.decode(clazz: [IntegerPropertyDefinitionResource].self, source: source)
        }
        // Decoder for IntegerPropertyDefinitionResource
        Decoders.addDecoder(clazz: IntegerPropertyDefinitionResource.self) { (source: AnyObject, instance: AnyObject?) -> IntegerPropertyDefinitionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? IntegerPropertyDefinitionResource() : instance as! IntegerPropertyDefinitionResource
            if decoders["\(PropertyDefinitionResource.self)"] != nil {
              _ = Decoders.decode(clazz: PropertyDefinitionResource.self, source: source, instance: result)
            }
            
            result.fieldList = Decoders.decodeOptional(clazz: PropertyFieldListResource.self, source: sourceDictionary["field_list"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result._required = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["required"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.max = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max"] as AnyObject?)
            result.min = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min"] as AnyObject?)
            return result
        }


        // Decoder for [LimitedGettable]
        Decoders.addDecoder(clazz: [LimitedGettable].self) { (source: AnyObject, instance: AnyObject?) -> [LimitedGettable] in
            return Decoders.decode(clazz: [LimitedGettable].self, source: source)
        }
        // Decoder for LimitedGettable
        Decoders.addDecoder(clazz: LimitedGettable.self) { (source: AnyObject, instance: AnyObject?) -> LimitedGettable in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? LimitedGettable() : instance as! LimitedGettable
            if decoders["\(Behavior.self)"] != nil {
              _ = Decoders.decode(clazz: Behavior.self, source: source, instance: result)
            }
            
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"] as AnyObject?)
            result.group = Decoders.decodeOptional(clazz: LimitedGettableGroup.self, source: sourceDictionary["group"] as AnyObject?)
            return result
        }


        // Decoder for [LongProperty]
        Decoders.addDecoder(clazz: [LongProperty].self) { (source: AnyObject, instance: AnyObject?) -> [LongProperty] in
            return Decoders.decode(clazz: [LongProperty].self, source: source)
        }
        // Decoder for LongProperty
        Decoders.addDecoder(clazz: LongProperty.self) { (source: AnyObject, instance: AnyObject?) -> LongProperty in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? LongProperty() : instance as! LongProperty
            if decoders["\(Property.self)"] != nil {
              _ = Decoders.decode(clazz: Property.self, source: source, instance: result)
            }
            
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.value = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["value"] as AnyObject?)
            return result
        }


        // Decoder for [LongPropertyDefinitionResource]
        Decoders.addDecoder(clazz: [LongPropertyDefinitionResource].self) { (source: AnyObject, instance: AnyObject?) -> [LongPropertyDefinitionResource] in
            return Decoders.decode(clazz: [LongPropertyDefinitionResource].self, source: source)
        }
        // Decoder for LongPropertyDefinitionResource
        Decoders.addDecoder(clazz: LongPropertyDefinitionResource.self) { (source: AnyObject, instance: AnyObject?) -> LongPropertyDefinitionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? LongPropertyDefinitionResource() : instance as! LongPropertyDefinitionResource
            if decoders["\(PropertyDefinitionResource.self)"] != nil {
              _ = Decoders.decode(clazz: PropertyDefinitionResource.self, source: source, instance: result)
            }
            
            result.fieldList = Decoders.decodeOptional(clazz: PropertyFieldListResource.self, source: sourceDictionary["field_list"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result._required = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["required"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.max = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["max"] as AnyObject?)
            result.min = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["min"] as AnyObject?)
            return result
        }


        // Decoder for [NewCustomerEvent]
        Decoders.addDecoder(clazz: [NewCustomerEvent].self) { (source: AnyObject, instance: AnyObject?) -> [NewCustomerEvent] in
            return Decoders.decode(clazz: [NewCustomerEvent].self, source: source)
        }
        // Decoder for NewCustomerEvent
        Decoders.addDecoder(clazz: NewCustomerEvent.self) { (source: AnyObject, instance: AnyObject?) -> NewCustomerEvent in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? NewCustomerEvent() : instance as! NewCustomerEvent
            if decoders["\(BroadcastableEvent.self)"] != nil {
              _ = Decoders.decode(clazz: BroadcastableEvent.self, source: source, instance: result)
            }
            
            result.client = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["client"] as AnyObject?)
            result.customer = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["customer"] as AnyObject?)
            result.doNotBroadcast = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["do_not_broadcast"] as AnyObject?)
            result.section = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["section"] as AnyObject?)
            result.source = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["source"] as AnyObject?)
            result.specifics = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["specifics"] as AnyObject?)
            result.synchronous = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["synchronous"] as AnyObject?)
            result.timestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["timestamp"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.customerConfig = Decoders.decodeOptional(clazz: CustomerConfig.self, source: sourceDictionary["customer_config"] as AnyObject?)
            return result
        }


        // Decoder for [PreReqEntitlement]
        Decoders.addDecoder(clazz: [PreReqEntitlement].self) { (source: AnyObject, instance: AnyObject?) -> [PreReqEntitlement] in
            return Decoders.decode(clazz: [PreReqEntitlement].self, source: source)
        }
        // Decoder for PreReqEntitlement
        Decoders.addDecoder(clazz: PreReqEntitlement.self) { (source: AnyObject, instance: AnyObject?) -> PreReqEntitlement in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PreReqEntitlement() : instance as! PreReqEntitlement
            if decoders["\(Behavior.self)"] != nil {
              _ = Decoders.decode(clazz: Behavior.self, source: source, instance: result)
            }
            
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"] as AnyObject?)
            result.itemIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["item_ids"] as AnyObject?)
            return result
        }


        // Decoder for [PriceOverridable]
        Decoders.addDecoder(clazz: [PriceOverridable].self) { (source: AnyObject, instance: AnyObject?) -> [PriceOverridable] in
            return Decoders.decode(clazz: [PriceOverridable].self, source: source)
        }
        // Decoder for PriceOverridable
        Decoders.addDecoder(clazz: PriceOverridable.self) { (source: AnyObject, instance: AnyObject?) -> PriceOverridable in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PriceOverridable() : instance as! PriceOverridable
            if decoders["\(Behavior.self)"] != nil {
              _ = Decoders.decode(clazz: Behavior.self, source: source, instance: result)
            }
            
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"] as AnyObject?)
            result.maxPrice = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_price"] as AnyObject?)
            result.minPrice = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min_price"] as AnyObject?)
            return result
        }


        // Decoder for [RemoveCustomerEvent]
        Decoders.addDecoder(clazz: [RemoveCustomerEvent].self) { (source: AnyObject, instance: AnyObject?) -> [RemoveCustomerEvent] in
            return Decoders.decode(clazz: [RemoveCustomerEvent].self, source: source)
        }
        // Decoder for RemoveCustomerEvent
        Decoders.addDecoder(clazz: RemoveCustomerEvent.self) { (source: AnyObject, instance: AnyObject?) -> RemoveCustomerEvent in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? RemoveCustomerEvent() : instance as! RemoveCustomerEvent
            if decoders["\(BroadcastableEvent.self)"] != nil {
              _ = Decoders.decode(clazz: BroadcastableEvent.self, source: source, instance: result)
            }
            
            result.client = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["client"] as AnyObject?)
            result.customer = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["customer"] as AnyObject?)
            result.doNotBroadcast = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["do_not_broadcast"] as AnyObject?)
            result.section = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["section"] as AnyObject?)
            result.source = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["source"] as AnyObject?)
            result.specifics = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["specifics"] as AnyObject?)
            result.synchronous = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["synchronous"] as AnyObject?)
            result.timestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["timestamp"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.customerConfig = Decoders.decodeOptional(clazz: CustomerConfig.self, source: sourceDictionary["customer_config"] as AnyObject?)
            return result
        }


        // Decoder for [Spendable]
        Decoders.addDecoder(clazz: [Spendable].self) { (source: AnyObject, instance: AnyObject?) -> [Spendable] in
            return Decoders.decode(clazz: [Spendable].self, source: source)
        }
        // Decoder for Spendable
        Decoders.addDecoder(clazz: Spendable.self) { (source: AnyObject, instance: AnyObject?) -> Spendable in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Spendable() : instance as! Spendable
            if decoders["\(Behavior.self)"] != nil {
              _ = Decoders.decode(clazz: Behavior.self, source: source, instance: result)
            }
            
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"] as AnyObject?)
            result.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"] as AnyObject?)
            result.value = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["value"] as AnyObject?)
            return result
        }


        // Decoder for [StoreItem]
        Decoders.addDecoder(clazz: [StoreItem].self) { (source: AnyObject, instance: AnyObject?) -> [StoreItem] in
            return Decoders.decode(clazz: [StoreItem].self, source: source)
        }
        // Decoder for StoreItem
        Decoders.addDecoder(clazz: StoreItem.self) { (source: AnyObject, instance: AnyObject?) -> StoreItem in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? StoreItem() : instance as! StoreItem
            if decoders["\(Item.self)"] != nil {
              _ = Decoders.decode(clazz: Item.self, source: source, instance: result)
            }
            
            result.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            result.behaviors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["behaviors"] as AnyObject?)
            result.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"] as AnyObject?)
            result.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            result.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"] as AnyObject?)
            result.sort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sort"] as AnyObject?)
            result.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            result.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            result.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"] as AnyObject?)
            result.uniqueKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_key"] as AnyObject?)
            result.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            result.displayable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["displayable"] as AnyObject?)
            result.geoCountryList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["geo_country_list"] as AnyObject?)
            if let geoPolicyType = sourceDictionary["geo_policy_type"] as? String { 
                result.geoPolicyType = StoreItem.GeoPolicyType(rawValue: (geoPolicyType))
            }
            
            result.shippingTier = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["shipping_tier"] as AnyObject?)
            result.skus = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["skus"] as AnyObject?)
            result.storeEnd = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["store_end"] as AnyObject?)
            result.storeStart = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["store_start"] as AnyObject?)
            result.vendorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vendor_id"] as AnyObject?)
            return result
        }


        // Decoder for [TextProperty]
        Decoders.addDecoder(clazz: [TextProperty].self) { (source: AnyObject, instance: AnyObject?) -> [TextProperty] in
            return Decoders.decode(clazz: [TextProperty].self, source: source)
        }
        // Decoder for TextProperty
        Decoders.addDecoder(clazz: TextProperty.self) { (source: AnyObject, instance: AnyObject?) -> TextProperty in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? TextProperty() : instance as! TextProperty
            if decoders["\(Property.self)"] != nil {
              _ = Decoders.decode(clazz: Property.self, source: source, instance: result)
            }
            
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"] as AnyObject?)
            return result
        }


        // Decoder for [TextPropertyDefinitionResource]
        Decoders.addDecoder(clazz: [TextPropertyDefinitionResource].self) { (source: AnyObject, instance: AnyObject?) -> [TextPropertyDefinitionResource] in
            return Decoders.decode(clazz: [TextPropertyDefinitionResource].self, source: source)
        }
        // Decoder for TextPropertyDefinitionResource
        Decoders.addDecoder(clazz: TextPropertyDefinitionResource.self) { (source: AnyObject, instance: AnyObject?) -> TextPropertyDefinitionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? TextPropertyDefinitionResource() : instance as! TextPropertyDefinitionResource
            if decoders["\(PropertyDefinitionResource.self)"] != nil {
              _ = Decoders.decode(clazz: PropertyDefinitionResource.self, source: source, instance: result)
            }
            
            result.fieldList = Decoders.decodeOptional(clazz: PropertyFieldListResource.self, source: sourceDictionary["field_list"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result._required = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["required"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.maxLength = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_length"] as AnyObject?)
            return result
        }


        // Decoder for [TimePeriodGettable]
        Decoders.addDecoder(clazz: [TimePeriodGettable].self) { (source: AnyObject, instance: AnyObject?) -> [TimePeriodGettable] in
            return Decoders.decode(clazz: [TimePeriodGettable].self, source: source)
        }
        // Decoder for TimePeriodGettable
        Decoders.addDecoder(clazz: TimePeriodGettable.self) { (source: AnyObject, instance: AnyObject?) -> TimePeriodGettable in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? TimePeriodGettable() : instance as! TimePeriodGettable
            if decoders["\(Behavior.self)"] != nil {
              _ = Decoders.decode(clazz: Behavior.self, source: source, instance: result)
            }
            
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"] as AnyObject?)
            result.getLimit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["get_limit"] as AnyObject?)
            result.groupName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["group_name"] as AnyObject?)
            result.timeLength = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["time_length"] as AnyObject?)
            result.unitOfTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unit_of_time"] as AnyObject?)
            return result
        }


        // Decoder for [TimePeriodUsable]
        Decoders.addDecoder(clazz: [TimePeriodUsable].self) { (source: AnyObject, instance: AnyObject?) -> [TimePeriodUsable] in
            return Decoders.decode(clazz: [TimePeriodUsable].self, source: source)
        }
        // Decoder for TimePeriodUsable
        Decoders.addDecoder(clazz: TimePeriodUsable.self) { (source: AnyObject, instance: AnyObject?) -> TimePeriodUsable in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? TimePeriodUsable() : instance as! TimePeriodUsable
            if decoders["\(Behavior.self)"] != nil {
              _ = Decoders.decode(clazz: Behavior.self, source: source, instance: result)
            }
            
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"] as AnyObject?)
            result.maxUse = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_use"] as AnyObject?)
            result.timeLength = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["time_length"] as AnyObject?)
            result.unitOfTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unit_of_time"] as AnyObject?)
            return result
        }


        // Decoder for [VideoPropertyDefinitionResource]
        Decoders.addDecoder(clazz: [VideoPropertyDefinitionResource].self) { (source: AnyObject, instance: AnyObject?) -> [VideoPropertyDefinitionResource] in
            return Decoders.decode(clazz: [VideoPropertyDefinitionResource].self, source: source)
        }
        // Decoder for VideoPropertyDefinitionResource
        Decoders.addDecoder(clazz: VideoPropertyDefinitionResource.self) { (source: AnyObject, instance: AnyObject?) -> VideoPropertyDefinitionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? VideoPropertyDefinitionResource() : instance as! VideoPropertyDefinitionResource
            if decoders["\(PropertyDefinitionResource.self)"] != nil {
              _ = Decoders.decode(clazz: PropertyDefinitionResource.self, source: source, instance: result)
            }
            
            result.fieldList = Decoders.decodeOptional(clazz: PropertyFieldListResource.self, source: sourceDictionary["field_list"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result._required = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["required"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.fileType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["file_type"] as AnyObject?)
            result.maxHeight = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_height"] as AnyObject?)
            result.maxLength = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_length"] as AnyObject?)
            result.maxWidth = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_width"] as AnyObject?)
            result.minHeight = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min_height"] as AnyObject?)
            result.minLength = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min_length"] as AnyObject?)
            result.minWidth = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min_width"] as AnyObject?)
            return result
        }


        // Decoder for [AudioGroupProperty]
        Decoders.addDecoder(clazz: [AudioGroupProperty].self) { (source: AnyObject, instance: AnyObject?) -> [AudioGroupProperty] in
            return Decoders.decode(clazz: [AudioGroupProperty].self, source: source)
        }
        // Decoder for AudioGroupProperty
        Decoders.addDecoder(clazz: AudioGroupProperty.self) { (source: AnyObject, instance: AnyObject?) -> AudioGroupProperty in
            if let source = source as?  {
                return source
            }
            fatalError("Source \(source) is not convertible to typealias AudioGroupProperty: Maybe swagger file is insufficient")
        }


        // Decoder for [AudioGroupPropertyDefinitionResource]
        Decoders.addDecoder(clazz: [AudioGroupPropertyDefinitionResource].self) { (source: AnyObject, instance: AnyObject?) -> [AudioGroupPropertyDefinitionResource] in
            return Decoders.decode(clazz: [AudioGroupPropertyDefinitionResource].self, source: source)
        }
        // Decoder for AudioGroupPropertyDefinitionResource
        Decoders.addDecoder(clazz: AudioGroupPropertyDefinitionResource.self) { (source: AnyObject, instance: AnyObject?) -> AudioGroupPropertyDefinitionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? AudioGroupPropertyDefinitionResource() : instance as! AudioGroupPropertyDefinitionResource
            if decoders["\(FileGroupPropertyDefinitionResource.self)"] != nil {
              _ = Decoders.decode(clazz: FileGroupPropertyDefinitionResource.self, source: source, instance: result)
            }
            
            result.maxLength = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_length"] as AnyObject?)
            result.minLength = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min_length"] as AnyObject?)
            return result
        }


        // Decoder for [AudioProperty]
        Decoders.addDecoder(clazz: [AudioProperty].self) { (source: AnyObject, instance: AnyObject?) -> [AudioProperty] in
            return Decoders.decode(clazz: [AudioProperty].self, source: source)
        }
        // Decoder for AudioProperty
        Decoders.addDecoder(clazz: AudioProperty.self) { (source: AnyObject, instance: AnyObject?) -> AudioProperty in
            if let source = source as?  {
                return source
            }
            fatalError("Source \(source) is not convertible to typealias AudioProperty: Maybe swagger file is insufficient")
        }


        // Decoder for [BundleItem]
        Decoders.addDecoder(clazz: [BundleItem].self) { (source: AnyObject, instance: AnyObject?) -> [BundleItem] in
            return Decoders.decode(clazz: [BundleItem].self, source: source)
        }
        // Decoder for BundleItem
        Decoders.addDecoder(clazz: BundleItem.self) { (source: AnyObject, instance: AnyObject?) -> BundleItem in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? BundleItem() : instance as! BundleItem
            if decoders["\(StoreItem.self)"] != nil {
              _ = Decoders.decode(clazz: StoreItem.self, source: source, instance: result)
            }
            
            result.bundledSkus = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["bundled_skus"] as AnyObject?)
            return result
        }


        // Decoder for [CouponItem]
        Decoders.addDecoder(clazz: [CouponItem].self) { (source: AnyObject, instance: AnyObject?) -> [CouponItem] in
            return Decoders.decode(clazz: [CouponItem].self, source: source)
        }
        // Decoder for CouponItem
        Decoders.addDecoder(clazz: CouponItem.self) { (source: AnyObject, instance: AnyObject?) -> CouponItem in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? CouponItem() : instance as! CouponItem
            if decoders["\(StoreItem.self)"] != nil {
              _ = Decoders.decode(clazz: StoreItem.self, source: source, instance: result)
            }
            
            if let couponTypeHint = sourceDictionary["coupon_type_hint"] as? String { 
                result.couponTypeHint = CouponItem.CouponTypeHint(rawValue: (couponTypeHint))
            }
            
            result.discountMax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["discount_max"] as AnyObject?)
            result.discountMinCartValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["discount_min_cart_value"] as AnyObject?)
            if let discountType = sourceDictionary["discount_type"] as? String { 
                result.discountType = CouponItem.DiscountType(rawValue: (discountType))
            }
            
            result.discountValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["discount_value"] as AnyObject?)
            result.exclusive = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["exclusive"] as AnyObject?)
            result.itemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["item_id"] as AnyObject?)
            result.maxQuantity = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_quantity"] as AnyObject?)
            result.selfExclusive = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["self_exclusive"] as AnyObject?)
            result.validForTags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["valid_for_tags"] as AnyObject?)
            return result
        }


        // Decoder for [ImageGroupProperty]
        Decoders.addDecoder(clazz: [ImageGroupProperty].self) { (source: AnyObject, instance: AnyObject?) -> [ImageGroupProperty] in
            return Decoders.decode(clazz: [ImageGroupProperty].self, source: source)
        }
        // Decoder for ImageGroupProperty
        Decoders.addDecoder(clazz: ImageGroupProperty.self) { (source: AnyObject, instance: AnyObject?) -> ImageGroupProperty in
            if let source = source as?  {
                return source
            }
            fatalError("Source \(source) is not convertible to typealias ImageGroupProperty: Maybe swagger file is insufficient")
        }


        // Decoder for [ImageGroupPropertyDefinitionResource]
        Decoders.addDecoder(clazz: [ImageGroupPropertyDefinitionResource].self) { (source: AnyObject, instance: AnyObject?) -> [ImageGroupPropertyDefinitionResource] in
            return Decoders.decode(clazz: [ImageGroupPropertyDefinitionResource].self, source: source)
        }
        // Decoder for ImageGroupPropertyDefinitionResource
        Decoders.addDecoder(clazz: ImageGroupPropertyDefinitionResource.self) { (source: AnyObject, instance: AnyObject?) -> ImageGroupPropertyDefinitionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ImageGroupPropertyDefinitionResource() : instance as! ImageGroupPropertyDefinitionResource
            if decoders["\(FileGroupPropertyDefinitionResource.self)"] != nil {
              _ = Decoders.decode(clazz: FileGroupPropertyDefinitionResource.self, source: source, instance: result)
            }
            
            result.maxHeight = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_height"] as AnyObject?)
            result.maxWidth = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_width"] as AnyObject?)
            result.minHeight = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min_height"] as AnyObject?)
            result.minWidth = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min_width"] as AnyObject?)
            return result
        }


        // Decoder for [ImageProperty]
        Decoders.addDecoder(clazz: [ImageProperty].self) { (source: AnyObject, instance: AnyObject?) -> [ImageProperty] in
            return Decoders.decode(clazz: [ImageProperty].self, source: source)
        }
        // Decoder for ImageProperty
        Decoders.addDecoder(clazz: ImageProperty.self) { (source: AnyObject, instance: AnyObject?) -> ImageProperty in
            if let source = source as?  {
                return source
            }
            fatalError("Source \(source) is not convertible to typealias ImageProperty: Maybe swagger file is insufficient")
        }


        // Decoder for [ShippingItem]
        Decoders.addDecoder(clazz: [ShippingItem].self) { (source: AnyObject, instance: AnyObject?) -> [ShippingItem] in
            return Decoders.decode(clazz: [ShippingItem].self, source: source)
        }
        // Decoder for ShippingItem
        Decoders.addDecoder(clazz: ShippingItem.self) { (source: AnyObject, instance: AnyObject?) -> ShippingItem in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ShippingItem() : instance as! ShippingItem
            if decoders["\(StoreItem.self)"] != nil {
              _ = Decoders.decode(clazz: StoreItem.self, source: source, instance: result)
            }
            
            result.countries = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["countries"] as AnyObject?)
            result.maxTierTotal = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_tier_total"] as AnyObject?)
            result.taxable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["taxable"] as AnyObject?)
            return result
        }


        // Decoder for [Subscription]
        Decoders.addDecoder(clazz: [Subscription].self) { (source: AnyObject, instance: AnyObject?) -> [Subscription] in
            return Decoders.decode(clazz: [Subscription].self, source: source)
        }
        // Decoder for Subscription
        Decoders.addDecoder(clazz: Subscription.self) { (source: AnyObject, instance: AnyObject?) -> Subscription in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Subscription() : instance as! Subscription
            if decoders["\(StoreItem.self)"] != nil {
              _ = Decoders.decode(clazz: StoreItem.self, source: source, instance: result)
            }
            
            if let availability = sourceDictionary["availability"] as? String { 
                result.availability = Subscription.Availability(rawValue: (availability))
            }
            
            result.consolidationDayOfMonth = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["consolidation_day_of_month"] as AnyObject?)
            result.subscriptionPlans = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["subscription_plans"] as AnyObject?)
            return result
        }


        // Decoder for [VideoGroupProperty]
        Decoders.addDecoder(clazz: [VideoGroupProperty].self) { (source: AnyObject, instance: AnyObject?) -> [VideoGroupProperty] in
            return Decoders.decode(clazz: [VideoGroupProperty].self, source: source)
        }
        // Decoder for VideoGroupProperty
        Decoders.addDecoder(clazz: VideoGroupProperty.self) { (source: AnyObject, instance: AnyObject?) -> VideoGroupProperty in
            if let source = source as?  {
                return source
            }
            fatalError("Source \(source) is not convertible to typealias VideoGroupProperty: Maybe swagger file is insufficient")
        }


        // Decoder for [VideoGroupPropertyDefinitionResource]
        Decoders.addDecoder(clazz: [VideoGroupPropertyDefinitionResource].self) { (source: AnyObject, instance: AnyObject?) -> [VideoGroupPropertyDefinitionResource] in
            return Decoders.decode(clazz: [VideoGroupPropertyDefinitionResource].self, source: source)
        }
        // Decoder for VideoGroupPropertyDefinitionResource
        Decoders.addDecoder(clazz: VideoGroupPropertyDefinitionResource.self) { (source: AnyObject, instance: AnyObject?) -> VideoGroupPropertyDefinitionResource in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? VideoGroupPropertyDefinitionResource() : instance as! VideoGroupPropertyDefinitionResource
            if decoders["\(FileGroupPropertyDefinitionResource.self)"] != nil {
              _ = Decoders.decode(clazz: FileGroupPropertyDefinitionResource.self, source: source, instance: result)
            }
            
            result.maxHeight = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_height"] as AnyObject?)
            result.maxLength = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_length"] as AnyObject?)
            result.maxWidth = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_width"] as AnyObject?)
            result.minHeight = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min_height"] as AnyObject?)
            result.minLength = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min_length"] as AnyObject?)
            result.minWidth = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min_width"] as AnyObject?)
            return result
        }


        // Decoder for [VideoProperty]
        Decoders.addDecoder(clazz: [VideoProperty].self) { (source: AnyObject, instance: AnyObject?) -> [VideoProperty] in
            return Decoders.decode(clazz: [VideoProperty].self, source: source)
        }
        // Decoder for VideoProperty
        Decoders.addDecoder(clazz: VideoProperty.self) { (source: AnyObject, instance: AnyObject?) -> VideoProperty in
            if let source = source as?  {
                return source
            }
            fatalError("Source \(source) is not convertible to typealias VideoProperty: Maybe swagger file is insufficient")
        }
    }()

    static fileprivate func initialize() {
        _ = Decoders.__once
    }
}
