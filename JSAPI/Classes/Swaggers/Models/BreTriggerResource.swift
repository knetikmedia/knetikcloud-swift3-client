//
// BreTriggerResource.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class BreTriggerResource: JSONEncodable {
    public enum Category: String { 
        case achievement = "achievement"
        case behavior = "behavior"
        case comment = "comment"
        case disposition = "disposition"
        case device = "device"
        case entitlement = "entitlement"
        case friends = "friends"
        case fulfillment = "fulfillment"
        case gamification = "gamification"
        case inventory = "inventory"
        case invoice = "invoice"
        case media = "media"
        case scheduler = "scheduler"
        case store = "store"
        case subscription = "subscription"
        case user = "user"
        case wallet = "wallet"
        case custom = "custom"
        case challenge = "challenge"
        case activity = "activity"
        case campaign = "campaign"
        case event = "event"
    }
    /** The category this trigger belongs to. See endpoints for related asset information. All new triggers are in category &#39;custom&#39; */
    public var category: Category?
    /** The unique name for the event. This serves as the unique identifier. Cannot be changed after creation */
    public var eventName: String?
    /** A list af parameters that will be sent with the event when the trigger is fired. These must be included in the event and match the described types */
    public var parameters: [BreTriggerParameterDefinition]?
    /** Where this trigger came from. System triggers cannot be removed or updated */
    public var systemTrigger: Bool?
    /** A description of the trigger */
    public var triggerDescription: String?
    /** A human readable name for this trigger */
    public var triggerName: String?

    public init() {}

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["category"] = self.category?.rawValue
        nillableDictionary["event_name"] = self.eventName
        nillableDictionary["parameters"] = self.parameters?.encodeToJSON()
        nillableDictionary["system_trigger"] = self.systemTrigger
        nillableDictionary["trigger_description"] = self.triggerDescription
        nillableDictionary["trigger_name"] = self.triggerName
        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
