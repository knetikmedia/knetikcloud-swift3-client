//
// FlagReportResource.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class FlagReportResource: JSONEncodable {

    public enum Resolution: String { 
        case banned = "banned"
        case ignored = "ignored"
    }
    /** The context of that resource  */
    public var context: String?
    /** The context ID of that resource */
    public var contextId: String?
    /** The date/time this resource was created in seconds since epoch */
    public var createdDate: Int64?
    /** The unique ID for that resource */
    public var id: Int64?
    /** The reason of that resource required only in case of active resolution */
    public var reason: String?
    /** The resolution of that resource */
    public var resolution: Resolution?
    /** The date/time this report was resolved in seconds since epoch. Null if not resolved yet */
    public var resolved: Int64?
    /** The date/time this resource was last updated in seconds since epoch */
    public var updatedDate: Int64?

    public init() {}

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["context"] = self.context
        nillableDictionary["context_id"] = self.contextId
        nillableDictionary["created_date"] = self.createdDate?.encodeToJSON()
        nillableDictionary["id"] = self.id?.encodeToJSON()
        nillableDictionary["reason"] = self.reason
        nillableDictionary["resolution"] = self.resolution?.rawValue
        nillableDictionary["resolved"] = self.resolved?.encodeToJSON()
        nillableDictionary["updated_date"] = self.updatedDate?.encodeToJSON()

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
