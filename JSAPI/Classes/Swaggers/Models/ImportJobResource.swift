//
// ImportJobResource.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class ImportJobResource: JSONEncodable {

    public enum Status: String { 
        case pendingValidation = "PENDING_VALIDATION"
        case validating = "VALIDATING"
        case valid = "VALID"
        case invalid = "INVALID"
        case pendingProcess = "PENDING_PROCESS"
        case processing = "PROCESSING"
        case processed = "PROCESSED"
        case failed = "FAILED"
    }
    /** The id of the category to assign all questions in the import to */
    public var categoryId: String?
    /** The date the job was created in seconds since unix epoc */
    public var createdDate: Int64?
    /** The id of the job */
    public var id: Int64?
    /** A name for this import for later reference */
    public var name: String?
    /** Error information from validation */
    public var output: [ImportJobOutputResource]?
    /** The number of questions form the CSV file. Filled in after validation */
    public var recordCount: Int64?
    /** The status of the job */
    public var status: Status?
    /** The date the job was last updated in seconds since unix epoc */
    public var updatedDate: Int64?
    /** The url of a CSV file to pull trivia questions from. Cannot be changed after initial POST */
    public var url: String?
    /** The vendor who supplied this set of questions */
    public var vendor: String?

    public init() {}

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["category_id"] = self.categoryId
        nillableDictionary["created_date"] = self.createdDate?.encodeToJSON()
        nillableDictionary["id"] = self.id?.encodeToJSON()
        nillableDictionary["name"] = self.name
        nillableDictionary["output"] = self.output?.encodeToJSON()
        nillableDictionary["record_count"] = self.recordCount?.encodeToJSON()
        nillableDictionary["status"] = self.status?.rawValue
        nillableDictionary["updated_date"] = self.updatedDate?.encodeToJSON()
        nillableDictionary["url"] = self.url
        nillableDictionary["vendor"] = self.vendor

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
