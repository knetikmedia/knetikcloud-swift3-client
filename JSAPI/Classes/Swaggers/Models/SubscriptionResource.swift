//
// SubscriptionResource.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class SubscriptionResource: JSONEncodable {

    public enum Availability: String { 
        case all = "all"
        case newSubscribers = "new_subscribers"
    }
    public enum GeoPolicyType: String { 
        case whitelist = "whitelist"
        case blacklist = "blacklist"
    }
    /** A map of item additional properties, keyed on the property name. Must match the names and types defined in the template for this item type. */
    public var additionalProperties: [String:Property]?
    /** Who can purchase this subscription */
    public var availability: Availability?
    /** A category for filtering items */
    public var category: String?
    /** The day of the month 1..31 this subscription will renew */
    public var consolidationDayOfMonth: Int32?
    /** The date the item was created, unix timestamp in seconds */
    public var createdDate: Int64?
    /** A list of country iso3 codes to include in the blacklist/whitelist geo policy */
    public var geoCountryList: [String]?
    /** Whether to use the geo_country_list as a black list or white list for item geographical availability */
    public var geoPolicyType: GeoPolicyType?
    /** The id of the item */
    public var id: Int32?
    /** A long description of the subscription */
    public var longDescription: String?
    /** The name of the item */
    public var name: String?
    /** The billing options for this subscription */
    public var plans: [SubscriptionPlanResource]?
    /** A short description of the subscription.  Max 255 characters */
    public var shortDescription: String?
    /** A number to use in sorting items.  Default 500 */
    public var sort: Int32?
    /** Used to schedule removal from store.  Null means the subscription will never be removed */
    public var storeEnd: Int64?
    /** Used to schedule appearance in store.  Null means the subscription will appear now */
    public var storeStart: Int64?
    /** List of tags used for filtering items */
    public var tags: [String]?
    /** An item template this item is validated against. May be null and no validation of additional properties will be done. */
    public var template: String?
    /** The unique key for the item */
    public var uniqueKey: String?
    /** The date the item was last updated */
    public var updatedDate: Int64?
    /** The vendor who provides the item */
    public var vendorId: Int32?

    public init() {}

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["additional_properties"] = self.additionalProperties?.encodeToJSON()
        nillableDictionary["availability"] = self.availability?.rawValue
        nillableDictionary["category"] = self.category
        nillableDictionary["consolidation_day_of_month"] = self.consolidationDayOfMonth?.encodeToJSON()
        nillableDictionary["created_date"] = self.createdDate?.encodeToJSON()
        nillableDictionary["geo_country_list"] = self.geoCountryList?.encodeToJSON()
        nillableDictionary["geo_policy_type"] = self.geoPolicyType?.rawValue
        nillableDictionary["id"] = self.id?.encodeToJSON()
        nillableDictionary["long_description"] = self.longDescription
        nillableDictionary["name"] = self.name
        nillableDictionary["plans"] = self.plans?.encodeToJSON()
        nillableDictionary["short_description"] = self.shortDescription
        nillableDictionary["sort"] = self.sort?.encodeToJSON()
        nillableDictionary["store_end"] = self.storeEnd?.encodeToJSON()
        nillableDictionary["store_start"] = self.storeStart?.encodeToJSON()
        nillableDictionary["tags"] = self.tags?.encodeToJSON()
        nillableDictionary["template"] = self.template
        nillableDictionary["unique_key"] = self.uniqueKey
        nillableDictionary["updated_date"] = self.updatedDate?.encodeToJSON()
        nillableDictionary["vendor_id"] = self.vendorId?.encodeToJSON()

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
