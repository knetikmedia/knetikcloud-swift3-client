//
// CreateActivityOccurrenceRequest.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings */
open class CreateActivityOccurrenceRequest: JSONEncodable {

    public enum Status: String { 
        case setup = "SETUP"
        case open = "OPEN"
        case playing = "PLAYING"
        case finished = "FINISHED"
        case abandoned = "ABANDONED"
    }
    /** The id of the activity, only needed when outside of challenge/event */
    public var activityId: Int64?
    /** The id of the challenge activity (required if playing in a challenge/event). Note that this is the challenge_activity_id in case the same activity apears twice in the challenge. */
    public var challengeActivityId: Int64?
    /** The entitlement item required to enter the occurrence. Required if not part of an event. Must come from the set of entitlement items listed in the activity */
    public var entitlement: ItemIdRequest?
    /** The id of the event this occurence is a part of, if any */
    public var eventId: Int64?
    /** The values selected from the available settings defined for the activity. Ex: difficulty: hard. Can be left out if the activity is played during an event and the settings are already set at the event level. Ex: every monday, difficulty: hard, number of questions: 10, category: sport. Otherwise, the set must exactly match those of the activity. */
    public var settings: [SelectedSettingRequest]?
    /** Whether this occurrence will be ran as a simulation. Simulations will not be rewarded. Useful for bot play or trials */
    public var simulated: Bool?
    /** The current status of the occurrence (default: SETUP). */
    public var status: Status?
    /** The list of users participating in this occurrence. Can only be set directly with ACTIVITIES_ADMIN permission */
    public var users: [Participant]?

    public init() {}

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["activity_id"] = self.activityId?.encodeToJSON()
        nillableDictionary["challenge_activity_id"] = self.challengeActivityId?.encodeToJSON()
        nillableDictionary["entitlement"] = self.entitlement?.encodeToJSON()
        nillableDictionary["event_id"] = self.eventId?.encodeToJSON()
        nillableDictionary["settings"] = self.settings?.encodeToJSON()
        nillableDictionary["simulated"] = self.simulated
        nillableDictionary["status"] = self.status?.rawValue
        nillableDictionary["users"] = self.users?.encodeToJSON()

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
