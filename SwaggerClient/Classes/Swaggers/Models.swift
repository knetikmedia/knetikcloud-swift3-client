// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> Any
}

public enum ErrorResponse : Error {
    case Error(Int, Data?, Error)
}

open class Response<T> {
    open let statusCode: Int
    open let header: [String: String]
    open let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: HTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = Int()
class Decoders {
    static fileprivate var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz: T.Type, decoder: @escaping ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as AnyObject }
    }

    static func decode<T>(clazz: T.Type, discriminator: String, source: AnyObject) -> T {
        let key = discriminator;
        if let decoder = decoders[key] {
            return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decode<T>(clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.int32Value as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.int64Value as! T;
        }
        if T.self is UUID.Type && source is String {
            return UUID(uuidString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is Data.Type && source is String {
            return Data(base64Encoded: source as! String) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    private static var __once: () = {
        let formatters = [
            "yyyy-MM-dd",
            "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss'Z'",
            "yyyy-MM-dd'T'HH:mm:ss.SSS",
            "yyyy-MM-dd HH:mm:ss"
        ].map { (format: String) -> DateFormatter in
            let formatter = DateFormatter()
            formatter.dateFormat = format
            return formatter
        }
        // Decoder for Date
        Decoders.addDecoder(clazz: Date.self) { (source: AnyObject) -> Date in
           if let sourceString = source as? String {
                for formatter in formatters {
                    if let date = formatter.date(from: sourceString) {
                        return date
                    }
                }
            }
            if let sourceInt = source as? Int64 {
                // treat as a java date
                return Date(timeIntervalSince1970: Double(sourceInt / 1000) )
            }
            fatalError("formatter failed to parse \(source)")
        } 

        // Decoder for [AchievementDefinitionResource]
        Decoders.addDecoder(clazz: [AchievementDefinitionResource].self) { (source: AnyObject) -> [AchievementDefinitionResource] in
            return Decoders.decode(clazz: [AchievementDefinitionResource].self, source: source)
        }
        // Decoder for AchievementDefinitionResource
        Decoders.addDecoder(clazz: AchievementDefinitionResource.self) { (source: AnyObject) -> AchievementDefinitionResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = AchievementDefinitionResource()
            instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.hidden = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hidden"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.requiredProgress = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["required_progress"] as AnyObject?)
            instance.ruleId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rule_id"] as AnyObject?)
            instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            instance.triggerEventName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trigger_event_name"] as AnyObject?)
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return instance
        }


        // Decoder for [AchievementProgressUpdateRequest]
        Decoders.addDecoder(clazz: [AchievementProgressUpdateRequest].self) { (source: AnyObject) -> [AchievementProgressUpdateRequest] in
            return Decoders.decode(clazz: [AchievementProgressUpdateRequest].self, source: source)
        }
        // Decoder for AchievementProgressUpdateRequest
        Decoders.addDecoder(clazz: AchievementProgressUpdateRequest.self) { (source: AnyObject) -> AchievementProgressUpdateRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = AchievementProgressUpdateRequest()
            instance.incrementValue = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["increment_value"] as AnyObject?)
            instance.progressValue = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["progress_value"] as AnyObject?)
            return instance
        }


        // Decoder for [ActionResource]
        Decoders.addDecoder(clazz: [ActionResource].self) { (source: AnyObject) -> [ActionResource] in
            return Decoders.decode(clazz: [ActionResource].self, source: source)
        }
        // Decoder for ActionResource
        Decoders.addDecoder(clazz: ActionResource.self) { (source: AnyObject) -> ActionResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ActionResource()
            if let category = sourceDictionary["category"] as? String { 
                instance.category = ActionResource.Category(rawValue: (category))
            }
            
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.variables = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["variables"] as AnyObject?)
            return instance
        }


        // Decoder for [ActionVariableResource]
        Decoders.addDecoder(clazz: [ActionVariableResource].self) { (source: AnyObject) -> [ActionVariableResource] in
            return Decoders.decode(clazz: [ActionVariableResource].self, source: source)
        }
        // Decoder for ActionVariableResource
        Decoders.addDecoder(clazz: ActionVariableResource.self) { (source: AnyObject) -> ActionVariableResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ActionVariableResource()
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance._optional = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["optional"] as AnyObject?)
            instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return instance
        }


        // Decoder for [ActivityEntitlementResource]
        Decoders.addDecoder(clazz: [ActivityEntitlementResource].self) { (source: AnyObject) -> [ActivityEntitlementResource] in
            return Decoders.decode(clazz: [ActivityEntitlementResource].self, source: source)
        }
        // Decoder for ActivityEntitlementResource
        Decoders.addDecoder(clazz: ActivityEntitlementResource.self) { (source: AnyObject) -> ActivityEntitlementResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ActivityEntitlementResource()
            instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"] as AnyObject?)
            instance.itemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["item_id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.price = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price"] as AnyObject?)
            instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"] as AnyObject?)
            return instance
        }


        // Decoder for [ActivityOccurrenceCreationFailure]
        Decoders.addDecoder(clazz: [ActivityOccurrenceCreationFailure].self) { (source: AnyObject) -> [ActivityOccurrenceCreationFailure] in
            return Decoders.decode(clazz: [ActivityOccurrenceCreationFailure].self, source: source)
        }
        // Decoder for ActivityOccurrenceCreationFailure
        Decoders.addDecoder(clazz: ActivityOccurrenceCreationFailure.self) { (source: AnyObject) -> ActivityOccurrenceCreationFailure in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ActivityOccurrenceCreationFailure()
            instance.userResults = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["user_results"] as AnyObject?)
            return instance
        }


        // Decoder for [ActivityOccurrenceJoinResult]
        Decoders.addDecoder(clazz: [ActivityOccurrenceJoinResult].self) { (source: AnyObject) -> [ActivityOccurrenceJoinResult] in
            return Decoders.decode(clazz: [ActivityOccurrenceJoinResult].self, source: source)
        }
        // Decoder for ActivityOccurrenceJoinResult
        Decoders.addDecoder(clazz: ActivityOccurrenceJoinResult.self) { (source: AnyObject) -> ActivityOccurrenceJoinResult in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ActivityOccurrenceJoinResult()
            instance.entitlement = Decoders.decodeOptional(clazz: ActivityEntitlementResource.self, source: sourceDictionary["entitlement"] as AnyObject?)
            instance.errorCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["error_code"] as AnyObject?)
            instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"] as AnyObject?)
            instance.userId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["user_id"] as AnyObject?)
            return instance
        }


        // Decoder for [ActivityOccurrenceResource]
        Decoders.addDecoder(clazz: [ActivityOccurrenceResource].self) { (source: AnyObject) -> [ActivityOccurrenceResource] in
            return Decoders.decode(clazz: [ActivityOccurrenceResource].self, source: source)
        }
        // Decoder for ActivityOccurrenceResource
        Decoders.addDecoder(clazz: ActivityOccurrenceResource.self) { (source: AnyObject) -> ActivityOccurrenceResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ActivityOccurrenceResource()
            instance.activityId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["activity_id"] as AnyObject?)
            instance.challengeActivityId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["challenge_activity_id"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.entitlement = Decoders.decodeOptional(clazz: ActivityEntitlementResource.self, source: sourceDictionary["entitlement"] as AnyObject?)
            instance.eventId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["event_id"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            if let rewardStatus = sourceDictionary["reward_status"] as? String { 
                instance.rewardStatus = ActivityOccurrenceResource.RewardStatus(rawValue: (rewardStatus))
            }
            
            instance.settings = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["settings"] as AnyObject?)
            instance.simulated = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["simulated"] as AnyObject?)
            instance.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["start_date"] as AnyObject?)
            if let status = sourceDictionary["status"] as? String { 
                instance.status = ActivityOccurrenceResource.Status(rawValue: (status))
            }
            
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            instance.users = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["users"] as AnyObject?)
            return instance
        }


        // Decoder for [ActivityOccurrenceResults]
        Decoders.addDecoder(clazz: [ActivityOccurrenceResults].self) { (source: AnyObject) -> [ActivityOccurrenceResults] in
            return Decoders.decode(clazz: [ActivityOccurrenceResults].self, source: source)
        }
        // Decoder for ActivityOccurrenceResults
        Decoders.addDecoder(clazz: ActivityOccurrenceResults.self) { (source: AnyObject) -> ActivityOccurrenceResults in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ActivityOccurrenceResults()
            instance.users = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["users"] as AnyObject?)
            return instance
        }


        // Decoder for [ActivityResource]
        Decoders.addDecoder(clazz: [ActivityResource].self) { (source: AnyObject) -> [ActivityResource] in
            return Decoders.decode(clazz: [ActivityResource].self, source: source)
        }
        // Decoder for ActivityResource
        Decoders.addDecoder(clazz: ActivityResource.self) { (source: AnyObject) -> ActivityResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ActivityResource()
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.entitlements = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entitlements"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.launch = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["launch"] as AnyObject?)
            instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.rewardSet = Decoders.decodeOptional(clazz: RewardSetResource.self, source: sourceDictionary["reward_set"] as AnyObject?)
            instance.settings = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["settings"] as AnyObject?)
            instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"] as AnyObject?)
            instance.template = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["template"] as AnyObject?)
            instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            instance.uniqueKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_key"] as AnyObject?)
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return instance
        }


        // Decoder for [ActivityUserResource]
        Decoders.addDecoder(clazz: [ActivityUserResource].self) { (source: AnyObject) -> [ActivityUserResource] in
            return Decoders.decode(clazz: [ActivityUserResource].self, source: source)
        }
        // Decoder for ActivityUserResource
        Decoders.addDecoder(clazz: ActivityUserResource.self) { (source: AnyObject) -> ActivityUserResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ActivityUserResource()
            instance.host = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["host"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.joinedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["joined_date"] as AnyObject?)
            instance.leftDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["left_date"] as AnyObject?)
            instance.metric = Decoders.decodeOptional(clazz: MetricResource.self, source: sourceDictionary["metric"] as AnyObject?)
            if let status = sourceDictionary["status"] as? String { 
                instance.status = ActivityUserResource.Status(rawValue: (status))
            }
            
            instance.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"] as AnyObject?)
            return instance
        }


        // Decoder for [AddressResource]
        Decoders.addDecoder(clazz: [AddressResource].self) { (source: AnyObject) -> [AddressResource] in
            return Decoders.decode(clazz: [AddressResource].self, source: source)
        }
        // Decoder for AddressResource
        Decoders.addDecoder(clazz: AddressResource.self) { (source: AnyObject) -> AddressResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = AddressResource()
            instance.address1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address1"] as AnyObject?)
            instance.address2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address2"] as AnyObject?)
            instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"] as AnyObject?)
            instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_code"] as AnyObject?)
            instance.postalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["postal_code"] as AnyObject?)
            instance.stateCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state_code"] as AnyObject?)
            return instance
        }


        // Decoder for [Affiliate]
        Decoders.addDecoder(clazz: [Affiliate].self) { (source: AnyObject) -> [Affiliate] in
            return Decoders.decode(clazz: [Affiliate].self, source: source)
        }
        // Decoder for Affiliate
        Decoders.addDecoder(clazz: Affiliate.self) { (source: AnyObject) -> Affiliate in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Affiliate()
            instance.affiliateKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["affiliate_key"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            return instance
        }


        // Decoder for [AggregateCountResource]
        Decoders.addDecoder(clazz: [AggregateCountResource].self) { (source: AnyObject) -> [AggregateCountResource] in
            return Decoders.decode(clazz: [AggregateCountResource].self, source: source)
        }
        // Decoder for AggregateCountResource
        Decoders.addDecoder(clazz: AggregateCountResource.self) { (source: AnyObject) -> AggregateCountResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = AggregateCountResource()
            instance.count = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["count"] as AnyObject?)
            instance.date = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["date"] as AnyObject?)
            return instance
        }


        // Decoder for [AggregateInvoiceReportResource]
        Decoders.addDecoder(clazz: [AggregateInvoiceReportResource].self) { (source: AnyObject) -> [AggregateInvoiceReportResource] in
            return Decoders.decode(clazz: [AggregateInvoiceReportResource].self, source: source)
        }
        // Decoder for AggregateInvoiceReportResource
        Decoders.addDecoder(clazz: AggregateInvoiceReportResource.self) { (source: AnyObject) -> AggregateInvoiceReportResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = AggregateInvoiceReportResource()
            instance.count = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["count"] as AnyObject?)
            instance.date = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["date"] as AnyObject?)
            instance.revenue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["revenue"] as AnyObject?)
            instance.userCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["user_count"] as AnyObject?)
            return instance
        }


        // Decoder for [AmazonS3Activity]
        Decoders.addDecoder(clazz: [AmazonS3Activity].self) { (source: AnyObject) -> [AmazonS3Activity] in
            return Decoders.decode(clazz: [AmazonS3Activity].self, source: source)
        }
        // Decoder for AmazonS3Activity
        Decoders.addDecoder(clazz: AmazonS3Activity.self) { (source: AnyObject) -> AmazonS3Activity in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = AmazonS3Activity()
            instance.action = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["action"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.filename = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["filename"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.objectKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["object_key"] as AnyObject?)
            instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?)
            instance.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"] as AnyObject?)
            return instance
        }


        // Decoder for [AnswerResource]
        Decoders.addDecoder(clazz: [AnswerResource].self) { (source: AnyObject) -> [AnswerResource] in
            return Decoders.decode(clazz: [AnswerResource].self, source: source)
        }
        // Decoder for AnswerResource
        Decoders.addDecoder(clazz: AnswerResource.self) { (source: AnyObject) -> AnswerResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = AnswerResource()
            instance.answer = Decoders.decodeOptional(clazz: Property.self, source: sourceDictionary["answer"] as AnyObject?)
            instance.correct = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["correct"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            return instance
        }


        // Decoder for [ApplyPaymentRequest]
        Decoders.addDecoder(clazz: [ApplyPaymentRequest].self) { (source: AnyObject) -> [ApplyPaymentRequest] in
            return Decoders.decode(clazz: [ApplyPaymentRequest].self, source: source)
        }
        // Decoder for ApplyPaymentRequest
        Decoders.addDecoder(clazz: ApplyPaymentRequest.self) { (source: AnyObject) -> ApplyPaymentRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ApplyPaymentRequest()
            instance.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"] as AnyObject?)
            instance.receipt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["receipt"] as AnyObject?)
            instance.transactionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["transaction_id"] as AnyObject?)
            return instance
        }


        // Decoder for [ArticleResource]
        Decoders.addDecoder(clazz: [ArticleResource].self) { (source: AnyObject) -> [ArticleResource] in
            return Decoders.decode(clazz: [ArticleResource].self, source: source)
        }
        // Decoder for ArticleResource
        Decoders.addDecoder(clazz: ArticleResource.self) { (source: AnyObject) -> ArticleResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ArticleResource()
            instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"] as AnyObject?)
            instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            instance.body = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["body"] as AnyObject?)
            instance.category = Decoders.decodeOptional(clazz: NestedCategory.self, source: sourceDictionary["category"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?)
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return instance
        }


        // Decoder for [Artist]
        Decoders.addDecoder(clazz: [Artist].self) { (source: AnyObject) -> [Artist] in
            return Decoders.decode(clazz: [Artist].self, source: source)
        }
        // Decoder for Artist
        Decoders.addDecoder(clazz: Artist.self) { (source: AnyObject) -> Artist in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Artist()
            instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            instance.born = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["born"] as AnyObject?)
            instance.contributionCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["contribution_count"] as AnyObject?)
            instance.created = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created"] as AnyObject?)
            instance.died = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["died"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.priority = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["priority"] as AnyObject?)
            instance.propertiesString = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["properties_string"] as AnyObject?)
            instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"] as AnyObject?)
            instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            instance.updated = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated"] as AnyObject?)
            return instance
        }


        // Decoder for [ArtistResource]
        Decoders.addDecoder(clazz: [ArtistResource].self) { (source: AnyObject) -> [ArtistResource] in
            return Decoders.decode(clazz: [ArtistResource].self, source: source)
        }
        // Decoder for ArtistResource
        Decoders.addDecoder(clazz: ArtistResource.self) { (source: AnyObject) -> ArtistResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ArtistResource()
            instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            instance.born = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["born"] as AnyObject?)
            instance.contributionCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["contribution_count"] as AnyObject?)
            instance.contributions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["contributions"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.died = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["died"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.priority = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["priority"] as AnyObject?)
            instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"] as AnyObject?)
            instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return instance
        }


        // Decoder for [AvailableSettingResource]
        Decoders.addDecoder(clazz: [AvailableSettingResource].self) { (source: AnyObject) -> [AvailableSettingResource] in
            return Decoders.decode(clazz: [AvailableSettingResource].self, source: source)
        }
        // Decoder for AvailableSettingResource
        Decoders.addDecoder(clazz: AvailableSettingResource.self) { (source: AnyObject) -> AvailableSettingResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = AvailableSettingResource()
            instance.advancedOption = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["advanced_option"] as AnyObject?)
            instance.defaultValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["default_value"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.options = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["options"] as AnyObject?)
            return instance
        }


        // Decoder for [BareActivityResource]
        Decoders.addDecoder(clazz: [BareActivityResource].self) { (source: AnyObject) -> [BareActivityResource] in
            return Decoders.decode(clazz: [BareActivityResource].self, source: source)
        }
        // Decoder for BareActivityResource
        Decoders.addDecoder(clazz: BareActivityResource.self) { (source: AnyObject) -> BareActivityResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = BareActivityResource()
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.launch = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["launch"] as AnyObject?)
            instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"] as AnyObject?)
            instance.template = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["template"] as AnyObject?)
            instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            instance.uniqueKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_key"] as AnyObject?)
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return instance
        }


        // Decoder for [BareChallengeActivityResource]
        Decoders.addDecoder(clazz: [BareChallengeActivityResource].self) { (source: AnyObject) -> [BareChallengeActivityResource] in
            return Decoders.decode(clazz: [BareChallengeActivityResource].self, source: source)
        }
        // Decoder for BareChallengeActivityResource
        Decoders.addDecoder(clazz: BareChallengeActivityResource.self) { (source: AnyObject) -> BareChallengeActivityResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = BareChallengeActivityResource()
            instance.activityId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["activity_id"] as AnyObject?)
            instance.challengeId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["challenge_id"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            return instance
        }


        // Decoder for [Batch]
        Decoders.addDecoder(clazz: [Batch].self) { (source: AnyObject) -> [Batch] in
            return Decoders.decode(clazz: [Batch].self, source: source)
        }
        // Decoder for Batch
        Decoders.addDecoder(clazz: Batch.self) { (source: AnyObject) -> Batch in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Batch()
            instance.batch = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["batch"] as AnyObject?)
            return instance
        }


        // Decoder for [BatchRequest]
        Decoders.addDecoder(clazz: [BatchRequest].self) { (source: AnyObject) -> [BatchRequest] in
            return Decoders.decode(clazz: [BatchRequest].self, source: source)
        }
        // Decoder for BatchRequest
        Decoders.addDecoder(clazz: BatchRequest.self) { (source: AnyObject) -> BatchRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = BatchRequest()
            instance.body = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["body"] as AnyObject?)
            instance.contentType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["content_type"] as AnyObject?)
            instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"] as AnyObject?)
            instance.timeout = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["timeout"] as AnyObject?)
            instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"] as AnyObject?)
            instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"] as AnyObject?)
            return instance
        }


        // Decoder for [BatchReturn]
        Decoders.addDecoder(clazz: [BatchReturn].self) { (source: AnyObject) -> [BatchReturn] in
            return Decoders.decode(clazz: [BatchReturn].self, source: source)
        }
        // Decoder for BatchReturn
        Decoders.addDecoder(clazz: BatchReturn.self) { (source: AnyObject) -> BatchReturn in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = BatchReturn()
            instance.body = Decoders.decodeOptional(clazz: Result.self, source: sourceDictionary["body"] as AnyObject?)
            instance.code = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["code"] as AnyObject?)
            instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"] as AnyObject?)
            return instance
        }


        // Decoder for [Behavior]
        Decoders.addDecoder(clazz: [Behavior].self) { (source: AnyObject) -> [Behavior] in
            return Decoders.decode(clazz: [Behavior].self, source: source)
        }
        // Decoder for Behavior
        Decoders.addDecoder(clazz: Behavior.self) { (source: AnyObject) -> Behavior in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Behavior()
            instance.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"] as AnyObject?)
            return instance
        }


        // Decoder for [BillingReport]
        Decoders.addDecoder(clazz: [BillingReport].self) { (source: AnyObject) -> [BillingReport] in
            return Decoders.decode(clazz: [BillingReport].self, source: source)
        }
        // Decoder for BillingReport
        Decoders.addDecoder(clazz: BillingReport.self) { (source: AnyObject) -> BillingReport in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = BillingReport()
            instance.created = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.lastKnownFailures = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["last_known_failures"] as AnyObject?)
            instance.statistics = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["statistics"] as AnyObject?)
            return instance
        }


        // Decoder for [BooleanResource]
        Decoders.addDecoder(clazz: [BooleanResource].self) { (source: AnyObject) -> [BooleanResource] in
            return Decoders.decode(clazz: [BooleanResource].self, source: source)
        }
        // Decoder for BooleanResource
        Decoders.addDecoder(clazz: BooleanResource.self) { (source: AnyObject) -> BooleanResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = BooleanResource()
            instance.value = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["value"] as AnyObject?)
            return instance
        }


        // Decoder for [BreCategoryResource]
        Decoders.addDecoder(clazz: [BreCategoryResource].self) { (source: AnyObject) -> [BreCategoryResource] in
            return Decoders.decode(clazz: [BreCategoryResource].self, source: source)
        }
        // Decoder for BreCategoryResource
        Decoders.addDecoder(clazz: BreCategoryResource.self) { (source: AnyObject) -> BreCategoryResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = BreCategoryResource()
            instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            return instance
        }


        // Decoder for [BreEvent]
        Decoders.addDecoder(clazz: [BreEvent].self) { (source: AnyObject) -> [BreEvent] in
            return Decoders.decode(clazz: [BreEvent].self, source: source)
        }
        // Decoder for BreEvent
        Decoders.addDecoder(clazz: BreEvent.self) { (source: AnyObject) -> BreEvent in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = BreEvent()
            instance.eventName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["event_name"] as AnyObject?)
            instance.params = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["params"] as AnyObject?)
            return instance
        }


        // Decoder for [BreEventLog]
        Decoders.addDecoder(clazz: [BreEventLog].self) { (source: AnyObject) -> [BreEventLog] in
            return Decoders.decode(clazz: [BreEventLog].self, source: source)
        }
        // Decoder for BreEventLog
        Decoders.addDecoder(clazz: BreEventLog.self) { (source: AnyObject) -> BreEventLog in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = BreEventLog()
            instance.customer = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["customer"] as AnyObject?)
            instance.eventId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["event_id"] as AnyObject?)
            instance.eventName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["event_name"] as AnyObject?)
            instance.eventStartDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["event_start_date"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.parameters = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["parameters"] as AnyObject?)
            instance.rules = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["rules"] as AnyObject?)
            return instance
        }


        // Decoder for [BreGlobalResource]
        Decoders.addDecoder(clazz: [BreGlobalResource].self) { (source: AnyObject) -> [BreGlobalResource] in
            return Decoders.decode(clazz: [BreGlobalResource].self, source: source)
        }
        // Decoder for BreGlobalResource
        Decoders.addDecoder(clazz: BreGlobalResource.self) { (source: AnyObject) -> BreGlobalResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = BreGlobalResource()
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.scopes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["scopes"] as AnyObject?)
            instance.systemGlobal = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["system_global"] as AnyObject?)
            instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return instance
        }


        // Decoder for [BreGlobalScopeDefinition]
        Decoders.addDecoder(clazz: [BreGlobalScopeDefinition].self) { (source: AnyObject) -> [BreGlobalScopeDefinition] in
            return Decoders.decode(clazz: [BreGlobalScopeDefinition].self, source: source)
        }
        // Decoder for BreGlobalScopeDefinition
        Decoders.addDecoder(clazz: BreGlobalScopeDefinition.self) { (source: AnyObject) -> BreGlobalScopeDefinition in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = BreGlobalScopeDefinition()
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return instance
        }


        // Decoder for [BreRule]
        Decoders.addDecoder(clazz: [BreRule].self) { (source: AnyObject) -> [BreRule] in
            return Decoders.decode(clazz: [BreRule].self, source: source)
        }
        // Decoder for BreRule
        Decoders.addDecoder(clazz: BreRule.self) { (source: AnyObject) -> BreRule in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = BreRule()
            instance.actions = Decoders.decodeOptional(clazz: ActionResource.self, source: sourceDictionary["actions"] as AnyObject?)
            instance.condition = Decoders.decodeOptional(clazz: PredicateOperation.self, source: sourceDictionary["condition"] as AnyObject?)
            instance.conditionText = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["condition_text"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"] as AnyObject?)
            instance.endDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["end_date"] as AnyObject?)
            instance.eventName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["event_name"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["start_date"] as AnyObject?)
            instance.systemRule = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["system_rule"] as AnyObject?)
            return instance
        }


        // Decoder for [BreRuleLog]
        Decoders.addDecoder(clazz: [BreRuleLog].self) { (source: AnyObject) -> [BreRuleLog] in
            return Decoders.decode(clazz: [BreRuleLog].self, source: source)
        }
        // Decoder for BreRuleLog
        Decoders.addDecoder(clazz: BreRuleLog.self) { (source: AnyObject) -> BreRuleLog in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = BreRuleLog()
            instance.ran = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ran"] as AnyObject?)
            instance.reason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reason"] as AnyObject?)
            instance.ruleEndDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["rule_end_date"] as AnyObject?)
            instance.ruleId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rule_id"] as AnyObject?)
            instance.ruleName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rule_name"] as AnyObject?)
            instance.ruleStartDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["rule_start_date"] as AnyObject?)
            return instance
        }


        // Decoder for [BreTriggerParameterDefinition]
        Decoders.addDecoder(clazz: [BreTriggerParameterDefinition].self) { (source: AnyObject) -> [BreTriggerParameterDefinition] in
            return Decoders.decode(clazz: [BreTriggerParameterDefinition].self, source: source)
        }
        // Decoder for BreTriggerParameterDefinition
        Decoders.addDecoder(clazz: BreTriggerParameterDefinition.self) { (source: AnyObject) -> BreTriggerParameterDefinition in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = BreTriggerParameterDefinition()
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return instance
        }


        // Decoder for [BreTriggerResource]
        Decoders.addDecoder(clazz: [BreTriggerResource].self) { (source: AnyObject) -> [BreTriggerResource] in
            return Decoders.decode(clazz: [BreTriggerResource].self, source: source)
        }
        // Decoder for BreTriggerResource
        Decoders.addDecoder(clazz: BreTriggerResource.self) { (source: AnyObject) -> BreTriggerResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = BreTriggerResource()
            if let category = sourceDictionary["category"] as? String { 
                instance.category = BreTriggerResource.Category(rawValue: (category))
            }
            
            instance.eventName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["event_name"] as AnyObject?)
            instance.parameters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["parameters"] as AnyObject?)
            instance.systemTrigger = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["system_trigger"] as AnyObject?)
            instance.triggerDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trigger_description"] as AnyObject?)
            instance.triggerName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trigger_name"] as AnyObject?)
            return instance
        }


        // Decoder for [BundleItem]
        Decoders.addDecoder(clazz: [BundleItem].self) { (source: AnyObject) -> [BundleItem] in
            return Decoders.decode(clazz: [BundleItem].self, source: source)
        }
        // Decoder for BundleItem
        Decoders.addDecoder(clazz: BundleItem.self) { (source: AnyObject) -> BundleItem in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = BundleItem()
            instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            instance.behaviors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["behaviors"] as AnyObject?)
            instance.bundledSkus = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["bundled_skus"] as AnyObject?)
            instance.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.displayable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["displayable"] as AnyObject?)
            instance.geoCountryList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["geo_country_list"] as AnyObject?)
            if let geoPolicyType = sourceDictionary["geo_policy_type"] as? String { 
                instance.geoPolicyType = BundleItem.GeoPolicyType(rawValue: (geoPolicyType))
            }
            
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.shippingTier = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["shipping_tier"] as AnyObject?)
            instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"] as AnyObject?)
            instance.skus = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["skus"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.storeEnd = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["store_end"] as AnyObject?)
            instance.storeStart = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["store_start"] as AnyObject?)
            instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            instance.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"] as AnyObject?)
            instance.uniqueKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_key"] as AnyObject?)
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            instance.vendorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vendor_id"] as AnyObject?)
            return instance
        }


        // Decoder for [BundledSku]
        Decoders.addDecoder(clazz: [BundledSku].self) { (source: AnyObject) -> [BundledSku] in
            return Decoders.decode(clazz: [BundledSku].self, source: source)
        }
        // Decoder for BundledSku
        Decoders.addDecoder(clazz: BundledSku.self) { (source: AnyObject) -> BundledSku in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = BundledSku()
            instance.priceOverride = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price_override"] as AnyObject?)
            instance.quantity = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["quantity"] as AnyObject?)
            instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"] as AnyObject?)
            return instance
        }


        // Decoder for [CampaignResource]
        Decoders.addDecoder(clazz: [CampaignResource].self) { (source: AnyObject) -> [CampaignResource] in
            return Decoders.decode(clazz: [CampaignResource].self, source: source)
        }
        // Decoder for CampaignResource
        Decoders.addDecoder(clazz: CampaignResource.self) { (source: AnyObject) -> CampaignResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CampaignResource()
            instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"] as AnyObject?)
            instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.leaderboardStrategy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["leaderboard_strategy"] as AnyObject?)
            instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.nextChallenge = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["next_challenge"] as AnyObject?)
            instance.nextChallengeDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["next_challenge_date"] as AnyObject?)
            instance.rewardSet = Decoders.decodeOptional(clazz: RewardSetResource.self, source: sourceDictionary["reward_set"] as AnyObject?)
            if let rewardStatus = sourceDictionary["reward_status"] as? String { 
                instance.rewardStatus = CampaignResource.RewardStatus(rawValue: (rewardStatus))
            }
            
            instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"] as AnyObject?)
            instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return instance
        }


        // Decoder for [Cart]
        Decoders.addDecoder(clazz: [Cart].self) { (source: AnyObject) -> [Cart] in
            return Decoders.decode(clazz: [Cart].self, source: source)
        }
        // Decoder for Cart
        Decoders.addDecoder(clazz: Cart.self) { (source: AnyObject) -> Cart in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Cart()
            instance.countryTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["country_tax"] as AnyObject?)
            instance.coupons = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["coupons"] as AnyObject?)
            instance.created = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created"] as AnyObject?)
            instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"] as AnyObject?)
            instance.discountTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["discount_total"] as AnyObject?)
            instance.errorCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["error_code"] as AnyObject?)
            instance.errorMessage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error_message"] as AnyObject?)
            instance.grandTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["grand_total"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.invoiceId = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["invoice_id"] as AnyObject?)
            instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"] as AnyObject?)
            instance.owner = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["owner"] as AnyObject?)
            instance.selectedShippingOptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["selected_shipping_options"] as AnyObject?)
            instance.shippable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["shippable"] as AnyObject?)
            instance.shippingAddress = Decoders.decodeOptional(clazz: CartShippingAddressRequest.self, source: sourceDictionary["shipping_address"] as AnyObject?)
            instance.shippingCost = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["shipping_cost"] as AnyObject?)
            instance.shippingOptions = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["shipping_options"] as AnyObject?)
            instance.stateTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["state_tax"] as AnyObject?)
            if let status = sourceDictionary["status"] as? String { 
                instance.status = Cart.Status(rawValue: (status))
            }
            
            instance.subtotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["subtotal"] as AnyObject?)
            instance.updated = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated"] as AnyObject?)
            return instance
        }


        // Decoder for [CartItemRequest]
        Decoders.addDecoder(clazz: [CartItemRequest].self) { (source: AnyObject) -> [CartItemRequest] in
            return Decoders.decode(clazz: [CartItemRequest].self, source: source)
        }
        // Decoder for CartItemRequest
        Decoders.addDecoder(clazz: CartItemRequest.self) { (source: AnyObject) -> CartItemRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CartItemRequest()
            instance.affiliateKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["affiliate_key"] as AnyObject?)
            instance.catalogSku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["catalog_sku"] as AnyObject?)
            instance.quantity = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["quantity"] as AnyObject?)
            return instance
        }


        // Decoder for [CartLineItem]
        Decoders.addDecoder(clazz: [CartLineItem].self) { (source: AnyObject) -> [CartLineItem] in
            return Decoders.decode(clazz: [CartLineItem].self, source: source)
        }
        // Decoder for CartLineItem
        Decoders.addDecoder(clazz: CartLineItem.self) { (source: AnyObject) -> CartLineItem in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CartLineItem()
            instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.discount = Decoders.decodeOptional(clazz: Discount.self, source: sourceDictionary["discount"] as AnyObject?)
            instance.lineTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["line_total"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.originalLineTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["original_line_total"] as AnyObject?)
            instance.originalUnitPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["original_unit_price"] as AnyObject?)
            instance.qty = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["qty"] as AnyObject?)
            instance.saleName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sale_name"] as AnyObject?)
            instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"] as AnyObject?)
            instance.skuDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku_description"] as AnyObject?)
            instance.storeItemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["store_item_id"] as AnyObject?)
            instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            instance.thumbUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["thumb_url"] as AnyObject?)
            instance.unitPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["unit_price"] as AnyObject?)
            instance.vendorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vendor_id"] as AnyObject?)
            instance.vendorName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vendor_name"] as AnyObject?)
            return instance
        }


        // Decoder for [CartShippableResponse]
        Decoders.addDecoder(clazz: [CartShippableResponse].self) { (source: AnyObject) -> [CartShippableResponse] in
            return Decoders.decode(clazz: [CartShippableResponse].self, source: source)
        }
        // Decoder for CartShippableResponse
        Decoders.addDecoder(clazz: CartShippableResponse.self) { (source: AnyObject) -> CartShippableResponse in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CartShippableResponse()
            instance.cartId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["cart_id"] as AnyObject?)
            instance.shippable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["shippable"] as AnyObject?)
            return instance
        }


        // Decoder for [CartShippingAddressRequest]
        Decoders.addDecoder(clazz: [CartShippingAddressRequest].self) { (source: AnyObject) -> [CartShippingAddressRequest] in
            return Decoders.decode(clazz: [CartShippingAddressRequest].self, source: source)
        }
        // Decoder for CartShippingAddressRequest
        Decoders.addDecoder(clazz: CartShippingAddressRequest.self) { (source: AnyObject) -> CartShippingAddressRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CartShippingAddressRequest()
            instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"] as AnyObject?)
            instance.countryCodeIso3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_code_iso3"] as AnyObject?)
            instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"] as AnyObject?)
            instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["first_name"] as AnyObject?)
            instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last_name"] as AnyObject?)
            instance.namePrefix = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name_prefix"] as AnyObject?)
            instance.orderNotes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["order_notes"] as AnyObject?)
            instance.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone_number"] as AnyObject?)
            instance.postalStateCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["postal_state_code"] as AnyObject?)
            instance.shippingAddressLine1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipping_address_line1"] as AnyObject?)
            instance.shippingAddressLine2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipping_address_line2"] as AnyObject?)
            instance.zip = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zip"] as AnyObject?)
            return instance
        }


        // Decoder for [CartShippingOption]
        Decoders.addDecoder(clazz: [CartShippingOption].self) { (source: AnyObject) -> [CartShippingOption] in
            return Decoders.decode(clazz: [CartShippingOption].self, source: source)
        }
        // Decoder for CartShippingOption
        Decoders.addDecoder(clazz: CartShippingOption.self) { (source: AnyObject) -> CartShippingOption in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CartShippingOption()
            instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.originalPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["original_price"] as AnyObject?)
            instance.price = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price"] as AnyObject?)
            instance.shippingItemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["shipping_item_id"] as AnyObject?)
            instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"] as AnyObject?)
            instance.taxable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["taxable"] as AnyObject?)
            instance.vendorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vendor_id"] as AnyObject?)
            instance.vendorName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vendor_name"] as AnyObject?)
            return instance
        }


        // Decoder for [CartSummary]
        Decoders.addDecoder(clazz: [CartSummary].self) { (source: AnyObject) -> [CartSummary] in
            return Decoders.decode(clazz: [CartSummary].self, source: source)
        }
        // Decoder for CartSummary
        Decoders.addDecoder(clazz: CartSummary.self) { (source: AnyObject) -> CartSummary in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CartSummary()
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"] as AnyObject?)
            instance.grandTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["grand_total"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.invoiceId = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["invoice_id"] as AnyObject?)
            instance.itemsInCart = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["items_in_cart"] as AnyObject?)
            if let status = sourceDictionary["status"] as? String { 
                instance.status = CartSummary.Status(rawValue: (status))
            }
            
            instance.subtotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["subtotal"] as AnyObject?)
            return instance
        }


        // Decoder for [CatalogSale]
        Decoders.addDecoder(clazz: [CatalogSale].self) { (source: AnyObject) -> [CatalogSale] in
            return Decoders.decode(clazz: [CatalogSale].self, source: source)
        }
        // Decoder for CatalogSale
        Decoders.addDecoder(clazz: CatalogSale.self) { (source: AnyObject) -> CatalogSale in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CatalogSale()
            instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"] as AnyObject?)
            if let discountType = sourceDictionary["discount_type"] as? String { 
                instance.discountType = CatalogSale.DiscountType(rawValue: (discountType))
            }
            
            instance.discountValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["discount_value"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.item = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["item"] as AnyObject?)
            instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.saleEndDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["sale_end_date"] as AnyObject?)
            instance.saleStartDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["sale_start_date"] as AnyObject?)
            instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"] as AnyObject?)
            instance.tag = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tag"] as AnyObject?)
            instance.vendor = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vendor"] as AnyObject?)
            return instance
        }


        // Decoder for [CategoryResource]
        Decoders.addDecoder(clazz: [CategoryResource].self) { (source: AnyObject) -> [CategoryResource] in
            return Decoders.decode(clazz: [CategoryResource].self, source: source)
        }
        // Decoder for CategoryResource
        Decoders.addDecoder(clazz: CategoryResource.self) { (source: AnyObject) -> CategoryResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CategoryResource()
            instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"] as AnyObject?)
            instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            return instance
        }


        // Decoder for [ChallengeActivityResource]
        Decoders.addDecoder(clazz: [ChallengeActivityResource].self) { (source: AnyObject) -> [ChallengeActivityResource] in
            return Decoders.decode(clazz: [ChallengeActivityResource].self, source: source)
        }
        // Decoder for ChallengeActivityResource
        Decoders.addDecoder(clazz: ChallengeActivityResource.self) { (source: AnyObject) -> ChallengeActivityResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ChallengeActivityResource()
            instance.activityId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["activity_id"] as AnyObject?)
            instance.challengeId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["challenge_id"] as AnyObject?)
            instance.entitlement = Decoders.decodeOptional(clazz: ActivityEntitlementResource.self, source: sourceDictionary["entitlement"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.rewardSet = Decoders.decodeOptional(clazz: RewardSetResource.self, source: sourceDictionary["reward_set"] as AnyObject?)
            instance.settings = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["settings"] as AnyObject?)
            return instance
        }


        // Decoder for [ChallengeEventParticipantResource]
        Decoders.addDecoder(clazz: [ChallengeEventParticipantResource].self) { (source: AnyObject) -> [ChallengeEventParticipantResource] in
            return Decoders.decode(clazz: [ChallengeEventParticipantResource].self, source: source)
        }
        // Decoder for ChallengeEventParticipantResource
        Decoders.addDecoder(clazz: ChallengeEventParticipantResource.self) { (source: AnyObject) -> ChallengeEventParticipantResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ChallengeEventParticipantResource()
            instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"] as AnyObject?)
            instance.fullname = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullname"] as AnyObject?)
            instance.score = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["score"] as AnyObject?)
            instance.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"] as AnyObject?)
            instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"] as AnyObject?)
            return instance
        }


        // Decoder for [ChallengeEventResource]
        Decoders.addDecoder(clazz: [ChallengeEventResource].self) { (source: AnyObject) -> [ChallengeEventResource] in
            return Decoders.decode(clazz: [ChallengeEventResource].self, source: source)
        }
        // Decoder for ChallengeEventResource
        Decoders.addDecoder(clazz: ChallengeEventResource.self) { (source: AnyObject) -> ChallengeEventResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ChallengeEventResource()
            instance.challengeId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["challenge_id"] as AnyObject?)
            instance.endDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["end_date"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            if let rewardStatus = sourceDictionary["reward_status"] as? String { 
                instance.rewardStatus = ChallengeEventResource.RewardStatus(rawValue: (rewardStatus))
            }
            
            instance.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["start_date"] as AnyObject?)
            return instance
        }


        // Decoder for [ChallengeResource]
        Decoders.addDecoder(clazz: [ChallengeResource].self) { (source: AnyObject) -> [ChallengeResource] in
            return Decoders.decode(clazz: [ChallengeResource].self, source: source)
        }
        // Decoder for ChallengeResource
        Decoders.addDecoder(clazz: ChallengeResource.self) { (source: AnyObject) -> ChallengeResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ChallengeResource()
            instance.activities = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["activities"] as AnyObject?)
            instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            instance.campaignId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["campaign_id"] as AnyObject?)
            instance.copyOf = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["copy_of"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.endDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["end_date"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.leaderboardStrategy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["leaderboard_strategy"] as AnyObject?)
            instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.nextEventDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["next_event_date"] as AnyObject?)
            instance.rewardLagMinutes = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["reward_lag_minutes"] as AnyObject?)
            instance.rewardSet = Decoders.decodeOptional(clazz: RewardSetResource.self, source: sourceDictionary["reward_set"] as AnyObject?)
            instance.schedule = Decoders.decodeOptional(clazz: Schedule.self, source: sourceDictionary["schedule"] as AnyObject?)
            instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"] as AnyObject?)
            instance.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["start_date"] as AnyObject?)
            instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return instance
        }


        // Decoder for [CityResource]
        Decoders.addDecoder(clazz: [CityResource].self) { (source: AnyObject) -> [CityResource] in
            return Decoders.decode(clazz: [CityResource].self, source: source)
        }
        // Decoder for CityResource
        Decoders.addDecoder(clazz: CityResource.self) { (source: AnyObject) -> CityResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CityResource()
            instance.countryCodeIso3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_code_iso3"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.stateCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state_code"] as AnyObject?)
            return instance
        }


        // Decoder for [ClientResource]
        Decoders.addDecoder(clazz: [ClientResource].self) { (source: AnyObject) -> [ClientResource] in
            return Decoders.decode(clazz: [ClientResource].self, source: source)
        }
        // Decoder for ClientResource
        Decoders.addDecoder(clazz: ClientResource.self) { (source: AnyObject) -> ClientResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ClientResource()
            instance.accessTokenValiditySeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["access_token_validity_seconds"] as AnyObject?)
            instance.clientKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["client_key"] as AnyObject?)
            instance.grantTypes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["grant_types"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.isPublic = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_public"] as AnyObject?)
            instance.locked = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["locked"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.redirectUris = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["redirect_uris"] as AnyObject?)
            instance.refreshTokenValiditySeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["refresh_token_validity_seconds"] as AnyObject?)
            instance.secret = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["secret"] as AnyObject?)
            return instance
        }


        // Decoder for [CollectionCountry]
        Decoders.addDecoder(clazz: [CollectionCountry].self) { (source: AnyObject) -> [CollectionCountry] in
            return Decoders.decode(clazz: [CollectionCountry].self, source: source)
        }
        // Decoder for CollectionCountry
        Decoders.addDecoder(clazz: CollectionCountry.self) { (source: AnyObject) -> CollectionCountry in
            if let source = source as? Any {
                return source
            }
            fatalError("Source \(source) is not convertible to typealias CollectionCountry: Maybe swagger file is insufficient")
        }


        // Decoder for [CollectionVideoContribution]
        Decoders.addDecoder(clazz: [CollectionVideoContribution].self) { (source: AnyObject) -> [CollectionVideoContribution] in
            return Decoders.decode(clazz: [CollectionVideoContribution].self, source: source)
        }
        // Decoder for CollectionVideoContribution
        Decoders.addDecoder(clazz: CollectionVideoContribution.self) { (source: AnyObject) -> CollectionVideoContribution in
            if let source = source as? Any {
                return source
            }
            fatalError("Source \(source) is not convertible to typealias CollectionVideoContribution: Maybe swagger file is insufficient")
        }


        // Decoder for [Collectionstring]
        Decoders.addDecoder(clazz: [Collectionstring].self) { (source: AnyObject) -> [Collectionstring] in
            return Decoders.decode(clazz: [Collectionstring].self, source: source)
        }
        // Decoder for Collectionstring
        Decoders.addDecoder(clazz: Collectionstring.self) { (source: AnyObject) -> Collectionstring in
            if let source = source as? Any {
                return source
            }
            fatalError("Source \(source) is not convertible to typealias Collectionstring: Maybe swagger file is insufficient")
        }


        // Decoder for [CommentResource]
        Decoders.addDecoder(clazz: [CommentResource].self) { (source: AnyObject) -> [CommentResource] in
            return Decoders.decode(clazz: [CommentResource].self, source: source)
        }
        // Decoder for CommentResource
        Decoders.addDecoder(clazz: CommentResource.self) { (source: AnyObject) -> CommentResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CommentResource()
            instance.content = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["content"] as AnyObject?)
            instance.context = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context"] as AnyObject?)
            instance.contextId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["context_id"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.summary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["summary"] as AnyObject?)
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            instance.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"] as AnyObject?)
            return instance
        }


        // Decoder for [CommentSearch]
        Decoders.addDecoder(clazz: [CommentSearch].self) { (source: AnyObject) -> [CommentSearch] in
            return Decoders.decode(clazz: [CommentSearch].self, source: source)
        }
        // Decoder for CommentSearch
        Decoders.addDecoder(clazz: CommentSearch.self) { (source: AnyObject) -> CommentSearch in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CommentSearch()
            instance.content = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["content"] as AnyObject?)
            instance.context = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context"] as AnyObject?)
            instance.contextId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["context_id"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.ownerId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["owner_id"] as AnyObject?)
            instance.ownerUsername = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["owner_username"] as AnyObject?)
            return instance
        }


        // Decoder for [Config]
        Decoders.addDecoder(clazz: [Config].self) { (source: AnyObject) -> [Config] in
            return Decoders.decode(clazz: [Config].self, source: source)
        }
        // Decoder for Config
        Decoders.addDecoder(clazz: Config.self) { (source: AnyObject) -> Config in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Config()
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.publicRead = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["public_read"] as AnyObject?)
            instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"] as AnyObject?)
            return instance
        }


        // Decoder for [ContributionResource]
        Decoders.addDecoder(clazz: [ContributionResource].self) { (source: AnyObject) -> [ContributionResource] in
            return Decoders.decode(clazz: [ContributionResource].self, source: source)
        }
        // Decoder for ContributionResource
        Decoders.addDecoder(clazz: ContributionResource.self) { (source: AnyObject) -> ContributionResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ContributionResource()
            instance.artist = Decoders.decodeOptional(clazz: SimpleReferenceResourcelong.self, source: sourceDictionary["artist"] as AnyObject?)
            instance.media = Decoders.decodeOptional(clazz: SimpleReferenceResourcelong.self, source: sourceDictionary["media"] as AnyObject?)
            instance.role = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["role"] as AnyObject?)
            return instance
        }


        // Decoder for [Country]
        Decoders.addDecoder(clazz: [Country].self) { (source: AnyObject) -> [Country] in
            return Decoders.decode(clazz: [Country].self, source: source)
        }
        // Decoder for Country
        Decoders.addDecoder(clazz: Country.self) { (source: AnyObject) -> Country in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Country()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.iso2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iso2"] as AnyObject?)
            instance.iso3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iso3"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [CountryResource]
        Decoders.addDecoder(clazz: [CountryResource].self) { (source: AnyObject) -> [CountryResource] in
            return Decoders.decode(clazz: [CountryResource].self, source: source)
        }
        // Decoder for CountryResource
        Decoders.addDecoder(clazz: CountryResource.self) { (source: AnyObject) -> CountryResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CountryResource()
            instance.iso2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iso2"] as AnyObject?)
            instance.iso3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iso3"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [CountryTaxResource]
        Decoders.addDecoder(clazz: [CountryTaxResource].self) { (source: AnyObject) -> [CountryTaxResource] in
            return Decoders.decode(clazz: [CountryTaxResource].self, source: source)
        }
        // Decoder for CountryTaxResource
        Decoders.addDecoder(clazz: CountryTaxResource.self) { (source: AnyObject) -> CountryTaxResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CountryTaxResource()
            instance.countryIso3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_iso3"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.rate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rate"] as AnyObject?)
            instance.taxShipping = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["tax_shipping"] as AnyObject?)
            return instance
        }


        // Decoder for [CouponDefinition]
        Decoders.addDecoder(clazz: [CouponDefinition].self) { (source: AnyObject) -> [CouponDefinition] in
            return Decoders.decode(clazz: [CouponDefinition].self, source: source)
        }
        // Decoder for CouponDefinition
        Decoders.addDecoder(clazz: CouponDefinition.self) { (source: AnyObject) -> CouponDefinition in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CouponDefinition()
            instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            if let discountType = sourceDictionary["discount_type"] as? String { 
                instance.discountType = CouponDefinition.DiscountType(rawValue: (discountType))
            }
            
            instance.exclusive = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["exclusive"] as AnyObject?)
            instance.maxDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["max_discount"] as AnyObject?)
            instance.maxQuantity = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_quantity"] as AnyObject?)
            instance.minCartTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["min_cart_total"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.selfExclusive = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["self_exclusive"] as AnyObject?)
            instance.targetItemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["target_item_id"] as AnyObject?)
            if let type = sourceDictionary["type"] as? String { 
                instance.type = CouponDefinition.ModelType(rawValue: (type))
            }
            
            instance.validForTags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["valid_for_tags"] as AnyObject?)
            instance.value = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"] as AnyObject?)
            instance.vendorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vendor_id"] as AnyObject?)
            return instance
        }


        // Decoder for [CouponItem]
        Decoders.addDecoder(clazz: [CouponItem].self) { (source: AnyObject) -> [CouponItem] in
            return Decoders.decode(clazz: [CouponItem].self, source: source)
        }
        // Decoder for CouponItem
        Decoders.addDecoder(clazz: CouponItem.self) { (source: AnyObject) -> CouponItem in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CouponItem()
            instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            instance.behaviors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["behaviors"] as AnyObject?)
            instance.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"] as AnyObject?)
            if let couponTypeHint = sourceDictionary["coupon_type_hint"] as? String { 
                instance.couponTypeHint = CouponItem.CouponTypeHint(rawValue: (couponTypeHint))
            }
            
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.discountMax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["discount_max"] as AnyObject?)
            instance.discountMinCartValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["discount_min_cart_value"] as AnyObject?)
            if let discountType = sourceDictionary["discount_type"] as? String { 
                instance.discountType = CouponItem.DiscountType(rawValue: (discountType))
            }
            
            instance.discountValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["discount_value"] as AnyObject?)
            instance.displayable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["displayable"] as AnyObject?)
            instance.exclusive = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["exclusive"] as AnyObject?)
            instance.geoCountryList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["geo_country_list"] as AnyObject?)
            if let geoPolicyType = sourceDictionary["geo_policy_type"] as? String { 
                instance.geoPolicyType = CouponItem.GeoPolicyType(rawValue: (geoPolicyType))
            }
            
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.itemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["item_id"] as AnyObject?)
            instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"] as AnyObject?)
            instance.maxQuantity = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_quantity"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.selfExclusive = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["self_exclusive"] as AnyObject?)
            instance.shippingTier = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["shipping_tier"] as AnyObject?)
            instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"] as AnyObject?)
            instance.skus = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["skus"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.storeEnd = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["store_end"] as AnyObject?)
            instance.storeStart = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["store_start"] as AnyObject?)
            instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            instance.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"] as AnyObject?)
            instance.uniqueKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_key"] as AnyObject?)
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            instance.validForTags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["valid_for_tags"] as AnyObject?)
            instance.vendorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vendor_id"] as AnyObject?)
            return instance
        }


        // Decoder for [CreateBillingAgreementRequest]
        Decoders.addDecoder(clazz: [CreateBillingAgreementRequest].self) { (source: AnyObject) -> [CreateBillingAgreementRequest] in
            return Decoders.decode(clazz: [CreateBillingAgreementRequest].self, source: source)
        }
        // Decoder for CreateBillingAgreementRequest
        Decoders.addDecoder(clazz: CreateBillingAgreementRequest.self) { (source: AnyObject) -> CreateBillingAgreementRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CreateBillingAgreementRequest()
            instance.cancelUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cancel_url"] as AnyObject?)
            instance.returnUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["return_url"] as AnyObject?)
            instance.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"] as AnyObject?)
            return instance
        }


        // Decoder for [CreatePayPalPaymentRequest]
        Decoders.addDecoder(clazz: [CreatePayPalPaymentRequest].self) { (source: AnyObject) -> [CreatePayPalPaymentRequest] in
            return Decoders.decode(clazz: [CreatePayPalPaymentRequest].self, source: source)
        }
        // Decoder for CreatePayPalPaymentRequest
        Decoders.addDecoder(clazz: CreatePayPalPaymentRequest.self) { (source: AnyObject) -> CreatePayPalPaymentRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CreatePayPalPaymentRequest()
            instance.cancelUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cancel_url"] as AnyObject?)
            instance.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"] as AnyObject?)
            instance.returnUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["return_url"] as AnyObject?)
            return instance
        }


        // Decoder for [Currency]
        Decoders.addDecoder(clazz: [Currency].self) { (source: AnyObject) -> [Currency] in
            return Decoders.decode(clazz: [Currency].self, source: source)
        }
        // Decoder for Currency
        Decoders.addDecoder(clazz: Currency.self) { (source: AnyObject) -> Currency in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Currency()
            instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"] as AnyObject?)
            instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            instance.dateCreated = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["date_created"] as AnyObject?)
            instance.dateUpdated = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["date_updated"] as AnyObject?)
            instance.factor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["factor"] as AnyObject?)
            instance.icon = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["icon"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            if let type = sourceDictionary["type"] as? String { 
                instance.type = Currency.ModelType(rawValue: (type))
            }
            
            instance.virtual = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["virtual"] as AnyObject?)
            return instance
        }


        // Decoder for [CurrencyResource]
        Decoders.addDecoder(clazz: [CurrencyResource].self) { (source: AnyObject) -> [CurrencyResource] in
            return Decoders.decode(clazz: [CurrencyResource].self, source: source)
        }
        // Decoder for CurrencyResource
        Decoders.addDecoder(clazz: CurrencyResource.self) { (source: AnyObject) -> CurrencyResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CurrencyResource()
            instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"] as AnyObject?)
            instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.factor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["factor"] as AnyObject?)
            instance.icon = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["icon"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            if let type = sourceDictionary["type"] as? String { 
                instance.type = CurrencyResource.ModelType(rawValue: (type))
            }
            
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return instance
        }


        // Decoder for [CustomerConfig]
        Decoders.addDecoder(clazz: [CustomerConfig].self) { (source: AnyObject) -> [CustomerConfig] in
            return Decoders.decode(clazz: [CustomerConfig].self, source: source)
        }
        // Decoder for CustomerConfig
        Decoders.addDecoder(clazz: CustomerConfig.self) { (source: AnyObject) -> CustomerConfig in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CustomerConfig()
            instance.aliases = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["aliases"] as AnyObject?)
            instance.database = Decoders.decodeOptional(clazz: DatabaseConfig.self, source: sourceDictionary["database"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.uploadBucket = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["upload_bucket"] as AnyObject?)
            return instance
        }


        // Decoder for [CustomerResource]
        Decoders.addDecoder(clazz: [CustomerResource].self) { (source: AnyObject) -> [CustomerResource] in
            return Decoders.decode(clazz: [CustomerResource].self, source: source)
        }
        // Decoder for CustomerResource
        Decoders.addDecoder(clazz: CustomerResource.self) { (source: AnyObject) -> CustomerResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CustomerResource()
            instance.aliases = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["aliases"] as AnyObject?)
            instance.database = Decoders.decodeOptional(clazz: DatabaseConfig.self, source: sourceDictionary["database"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [DatabaseConfig]
        Decoders.addDecoder(clazz: [DatabaseConfig].self) { (source: AnyObject) -> [DatabaseConfig] in
            return Decoders.decode(clazz: [DatabaseConfig].self, source: source)
        }
        // Decoder for DatabaseConfig
        Decoders.addDecoder(clazz: DatabaseConfig.self) { (source: AnyObject) -> DatabaseConfig in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DatabaseConfig()
            instance.mongo = Decoders.decodeOptional(clazz: MongoDatabaseConfig.self, source: sourceDictionary["mongo"] as AnyObject?)
            instance.sql = Decoders.decodeOptional(clazz: SqlDatabaseConfig.self, source: sourceDictionary["sql"] as AnyObject?)
            return instance
        }


        // Decoder for [DeltaResource]
        Decoders.addDecoder(clazz: [DeltaResource].self) { (source: AnyObject) -> [DeltaResource] in
            return Decoders.decode(clazz: [DeltaResource].self, source: source)
        }
        // Decoder for DeltaResource
        Decoders.addDecoder(clazz: DeltaResource.self) { (source: AnyObject) -> DeltaResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DeltaResource()
            instance.categoryId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category_id"] as AnyObject?)
            instance.mediaType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["media_type"] as AnyObject?)
            instance.questionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["question_id"] as AnyObject?)
            if let state = sourceDictionary["state"] as? String { 
                instance.state = DeltaResource.State(rawValue: (state))
            }
            
            instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return instance
        }


        // Decoder for [DeviceResource]
        Decoders.addDecoder(clazz: [DeviceResource].self) { (source: AnyObject) -> [DeviceResource] in
            return Decoders.decode(clazz: [DeviceResource].self, source: source)
        }
        // Decoder for DeviceResource
        Decoders.addDecoder(clazz: DeviceResource.self) { (source: AnyObject) -> DeviceResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DeviceResource()
            instance.authorization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["authorization"] as AnyObject?)
            if let condition = sourceDictionary["condition"] as? String { 
                instance.condition = DeviceResource.Condition(rawValue: (condition))
            }
            
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.data = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["data"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.deviceType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["device_type"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.location = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["location"] as AnyObject?)
            instance.macAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mac_address"] as AnyObject?)
            instance.make = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["make"] as AnyObject?)
            instance.model = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["model"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.os = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["os"] as AnyObject?)
            instance.serial = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["serial"] as AnyObject?)
            if let status = sourceDictionary["status"] as? String { 
                instance.status = DeviceResource.Status(rawValue: (status))
            }
            
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            instance.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"] as AnyObject?)
            return instance
        }


        // Decoder for [Discount]
        Decoders.addDecoder(clazz: [Discount].self) { (source: AnyObject) -> [Discount] in
            return Decoders.decode(clazz: [Discount].self, source: source)
        }
        // Decoder for Discount
        Decoders.addDecoder(clazz: Discount.self) { (source: AnyObject) -> Discount in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Discount()
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"] as AnyObject?)
            instance.value = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"] as AnyObject?)
            return instance
        }


        // Decoder for [DispositionCount]
        Decoders.addDecoder(clazz: [DispositionCount].self) { (source: AnyObject) -> [DispositionCount] in
            return Decoders.decode(clazz: [DispositionCount].self, source: source)
        }
        // Decoder for DispositionCount
        Decoders.addDecoder(clazz: DispositionCount.self) { (source: AnyObject) -> DispositionCount in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DispositionCount()
            instance.count = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["count"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [DispositionResource]
        Decoders.addDecoder(clazz: [DispositionResource].self) { (source: AnyObject) -> [DispositionResource] in
            return Decoders.decode(clazz: [DispositionResource].self, source: source)
        }
        // Decoder for DispositionResource
        Decoders.addDecoder(clazz: DispositionResource.self) { (source: AnyObject) -> DispositionResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DispositionResource()
            instance.context = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context"] as AnyObject?)
            instance.contextId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context_id"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"] as AnyObject?)
            return instance
        }


        // Decoder for [EntitlementItem]
        Decoders.addDecoder(clazz: [EntitlementItem].self) { (source: AnyObject) -> [EntitlementItem] in
            return Decoders.decode(clazz: [EntitlementItem].self, source: source)
        }
        // Decoder for EntitlementItem
        Decoders.addDecoder(clazz: EntitlementItem.self) { (source: AnyObject) -> EntitlementItem in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = EntitlementItem()
            instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            instance.behaviors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["behaviors"] as AnyObject?)
            instance.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            instance.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"] as AnyObject?)
            instance.uniqueKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_key"] as AnyObject?)
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return instance
        }


        // Decoder for [Expressionobject]
        Decoders.addDecoder(clazz: [Expressionobject].self) { (source: AnyObject) -> [Expressionobject] in
            return Decoders.decode(clazz: [Expressionobject].self, source: source)
        }
        // Decoder for Expressionobject
        Decoders.addDecoder(clazz: Expressionobject.self) { (source: AnyObject) -> Expressionobject in
            if let source = source as? Any {
                return source
            }
            fatalError("Source \(source) is not convertible to typealias Expressionobject: Maybe swagger file is insufficient")
        }


        // Decoder for [FinalizeBillingAgreementRequest]
        Decoders.addDecoder(clazz: [FinalizeBillingAgreementRequest].self) { (source: AnyObject) -> [FinalizeBillingAgreementRequest] in
            return Decoders.decode(clazz: [FinalizeBillingAgreementRequest].self, source: source)
        }
        // Decoder for FinalizeBillingAgreementRequest
        Decoders.addDecoder(clazz: FinalizeBillingAgreementRequest.self) { (source: AnyObject) -> FinalizeBillingAgreementRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = FinalizeBillingAgreementRequest()
            instance.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"] as AnyObject?)
            instance.newDefault = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["new_default"] as AnyObject?)
            instance.payerId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["payer_id"] as AnyObject?)
            instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"] as AnyObject?)
            instance.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"] as AnyObject?)
            return instance
        }


        // Decoder for [FinalizePayPalPaymentRequest]
        Decoders.addDecoder(clazz: [FinalizePayPalPaymentRequest].self) { (source: AnyObject) -> [FinalizePayPalPaymentRequest] in
            return Decoders.decode(clazz: [FinalizePayPalPaymentRequest].self, source: source)
        }
        // Decoder for FinalizePayPalPaymentRequest
        Decoders.addDecoder(clazz: FinalizePayPalPaymentRequest.self) { (source: AnyObject) -> FinalizePayPalPaymentRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = FinalizePayPalPaymentRequest()
            instance.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"] as AnyObject?)
            instance.payerId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["payer_id"] as AnyObject?)
            instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"] as AnyObject?)
            return instance
        }


        // Decoder for [FlagReportResource]
        Decoders.addDecoder(clazz: [FlagReportResource].self) { (source: AnyObject) -> [FlagReportResource] in
            return Decoders.decode(clazz: [FlagReportResource].self, source: source)
        }
        // Decoder for FlagReportResource
        Decoders.addDecoder(clazz: FlagReportResource.self) { (source: AnyObject) -> FlagReportResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = FlagReportResource()
            instance.context = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context"] as AnyObject?)
            instance.contextId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context_id"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.reason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reason"] as AnyObject?)
            if let resolution = sourceDictionary["resolution"] as? String { 
                instance.resolution = FlagReportResource.Resolution(rawValue: (resolution))
            }
            
            instance.resolved = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["resolved"] as AnyObject?)
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return instance
        }


        // Decoder for [FlagResource]
        Decoders.addDecoder(clazz: [FlagResource].self) { (source: AnyObject) -> [FlagResource] in
            return Decoders.decode(clazz: [FlagResource].self, source: source)
        }
        // Decoder for FlagResource
        Decoders.addDecoder(clazz: FlagResource.self) { (source: AnyObject) -> FlagResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = FlagResource()
            instance.context = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context"] as AnyObject?)
            instance.contextId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context_id"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.reason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reason"] as AnyObject?)
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            instance.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"] as AnyObject?)
            return instance
        }


        // Decoder for [ForwardLog]
        Decoders.addDecoder(clazz: [ForwardLog].self) { (source: AnyObject) -> [ForwardLog] in
            return Decoders.decode(clazz: [ForwardLog].self, source: source)
        }
        // Decoder for ForwardLog
        Decoders.addDecoder(clazz: ForwardLog.self) { (source: AnyObject) -> ForwardLog in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ForwardLog()
            instance.endDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["end_date"] as AnyObject?)
            instance.errorMsg = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error_msg"] as AnyObject?)
            instance.httpStatusCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["http_status_code"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.payload = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["payload"] as AnyObject?)
            instance.response = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["response"] as AnyObject?)
            instance.retryCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["retry_count"] as AnyObject?)
            instance.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["start_date"] as AnyObject?)
            instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?)
            return instance
        }


        // Decoder for [FulfillmentType]
        Decoders.addDecoder(clazz: [FulfillmentType].self) { (source: AnyObject) -> [FulfillmentType] in
            return Decoders.decode(clazz: [FulfillmentType].self, source: source)
        }
        // Decoder for FulfillmentType
        Decoders.addDecoder(clazz: FulfillmentType.self) { (source: AnyObject) -> FulfillmentType in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = FulfillmentType()
            instance.core = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["core"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [GooglePaymentRequest]
        Decoders.addDecoder(clazz: [GooglePaymentRequest].self) { (source: AnyObject) -> [GooglePaymentRequest] in
            return Decoders.decode(clazz: [GooglePaymentRequest].self, source: source)
        }
        // Decoder for GooglePaymentRequest
        Decoders.addDecoder(clazz: GooglePaymentRequest.self) { (source: AnyObject) -> GooglePaymentRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = GooglePaymentRequest()
            instance.jsonPayload = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["json_payload"] as AnyObject?)
            instance.signature = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["signature"] as AnyObject?)
            return instance
        }


        // Decoder for [GrantTypeResource]
        Decoders.addDecoder(clazz: [GrantTypeResource].self) { (source: AnyObject) -> [GrantTypeResource] in
            return Decoders.decode(clazz: [GrantTypeResource].self, source: source)
        }
        // Decoder for GrantTypeResource
        Decoders.addDecoder(clazz: GrantTypeResource.self) { (source: AnyObject) -> GrantTypeResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = GrantTypeResource()
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [Group]
        Decoders.addDecoder(clazz: [Group].self) { (source: AnyObject) -> [Group] in
            return Decoders.decode(clazz: [Group].self, source: source)
        }
        // Decoder for Group
        Decoders.addDecoder(clazz: Group.self) { (source: AnyObject) -> Group in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Group()
            instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.memberCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["member_count"] as AnyObject?)
            instance.messageOfTheDay = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message_of_the_day"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.parent = Decoders.decodeOptional(clazz: Group.self, source: sourceDictionary["parent"] as AnyObject?)
            instance.propertiesString = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["properties_string"] as AnyObject?)
            if let status = sourceDictionary["status"] as? String { 
                instance.status = Group.Status(rawValue: (status))
            }
            
            instance.subMemberCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sub_member_count"] as AnyObject?)
            instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            instance.uniqueName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_name"] as AnyObject?)
            return instance
        }


        // Decoder for [GroupMember]
        Decoders.addDecoder(clazz: [GroupMember].self) { (source: AnyObject) -> [GroupMember] in
            return Decoders.decode(clazz: [GroupMember].self, source: source)
        }
        // Decoder for GroupMember
        Decoders.addDecoder(clazz: GroupMember.self) { (source: AnyObject) -> GroupMember in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = GroupMember()
            instance.group = Decoders.decodeOptional(clazz: Group.self, source: sourceDictionary["group"] as AnyObject?)
            instance.secondary = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["secondary"] as AnyObject?)
            if let status = sourceDictionary["status"] as? String { 
                instance.status = GroupMember.Status(rawValue: (status))
            }
            
            instance.user = Decoders.decodeOptional(clazz: User.self, source: sourceDictionary["user"] as AnyObject?)
            return instance
        }


        // Decoder for [GroupMemberResource]
        Decoders.addDecoder(clazz: [GroupMemberResource].self) { (source: AnyObject) -> [GroupMemberResource] in
            return Decoders.decode(clazz: [GroupMemberResource].self, source: source)
        }
        // Decoder for GroupMemberResource
        Decoders.addDecoder(clazz: GroupMemberResource.self) { (source: AnyObject) -> GroupMemberResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = GroupMemberResource()
            instance.avatarUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["avatar_url"] as AnyObject?)
            instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["display_name"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            if let status = sourceDictionary["status"] as? String { 
                instance.status = GroupMemberResource.Status(rawValue: (status))
            }
            
            instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"] as AnyObject?)
            return instance
        }


        // Decoder for [GroupResource]
        Decoders.addDecoder(clazz: [GroupResource].self) { (source: AnyObject) -> [GroupResource] in
            return Decoders.decode(clazz: [GroupResource].self, source: source)
        }
        // Decoder for GroupResource
        Decoders.addDecoder(clazz: GroupResource.self) { (source: AnyObject) -> GroupResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = GroupResource()
            instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.memberCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["member_count"] as AnyObject?)
            instance.messageOfTheDay = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message_of_the_day"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.parent = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["parent"] as AnyObject?)
            if let status = sourceDictionary["status"] as? String { 
                instance.status = GroupResource.Status(rawValue: (status))
            }
            
            instance.subMemberCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sub_member_count"] as AnyObject?)
            instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            instance.uniqueName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_name"] as AnyObject?)
            return instance
        }


        // Decoder for [ImportJobOutputResource]
        Decoders.addDecoder(clazz: [ImportJobOutputResource].self) { (source: AnyObject) -> [ImportJobOutputResource] in
            return Decoders.decode(clazz: [ImportJobOutputResource].self, source: source)
        }
        // Decoder for ImportJobOutputResource
        Decoders.addDecoder(clazz: ImportJobOutputResource.self) { (source: AnyObject) -> ImportJobOutputResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ImportJobOutputResource()
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.lineNumber = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["line_number"] as AnyObject?)
            return instance
        }


        // Decoder for [ImportJobResource]
        Decoders.addDecoder(clazz: [ImportJobResource].self) { (source: AnyObject) -> [ImportJobResource] in
            return Decoders.decode(clazz: [ImportJobResource].self, source: source)
        }
        // Decoder for ImportJobResource
        Decoders.addDecoder(clazz: ImportJobResource.self) { (source: AnyObject) -> ImportJobResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ImportJobResource()
            instance.categoryId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category_id"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.output = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["output"] as AnyObject?)
            instance.recordCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["record_count"] as AnyObject?)
            if let status = sourceDictionary["status"] as? String { 
                instance.status = ImportJobResource.Status(rawValue: (status))
            }
            
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?)
            instance.vendor = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vendor"] as AnyObject?)
            return instance
        }


        // Decoder for [InventorySubscriptionResource]
        Decoders.addDecoder(clazz: [InventorySubscriptionResource].self) { (source: AnyObject) -> [InventorySubscriptionResource] in
            return Decoders.decode(clazz: [InventorySubscriptionResource].self, source: source)
        }
        // Decoder for InventorySubscriptionResource
        Decoders.addDecoder(clazz: InventorySubscriptionResource.self) { (source: AnyObject) -> InventorySubscriptionResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = InventorySubscriptionResource()
            instance.billDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["bill_date"] as AnyObject?)
            instance.credit = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["credit"] as AnyObject?)
            instance.creditLog = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["credit_log"] as AnyObject?)
            instance.graceEnd = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["grace_end"] as AnyObject?)
            instance.inventoryId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["inventory_id"] as AnyObject?)
            if let inventoryStatus = sourceDictionary["inventory_status"] as? String { 
                instance.inventoryStatus = InventorySubscriptionResource.InventoryStatus(rawValue: (inventoryStatus))
            }
            
            instance.itemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["item_id"] as AnyObject?)
            instance.paymentMethod = Decoders.decodeOptional(clazz: PaymentMethodResource.self, source: sourceDictionary["payment_method"] as AnyObject?)
            instance.recurringPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["recurring_price"] as AnyObject?)
            instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"] as AnyObject?)
            instance.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["start_date"] as AnyObject?)
            instance.subscriptionStatus = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["subscription_status"] as AnyObject?)
            instance.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"] as AnyObject?)
            return instance
        }


        // Decoder for [InvoiceCreateRequest]
        Decoders.addDecoder(clazz: [InvoiceCreateRequest].self) { (source: AnyObject) -> [InvoiceCreateRequest] in
            return Decoders.decode(clazz: [InvoiceCreateRequest].self, source: source)
        }
        // Decoder for InvoiceCreateRequest
        Decoders.addDecoder(clazz: InvoiceCreateRequest.self) { (source: AnyObject) -> InvoiceCreateRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = InvoiceCreateRequest()
            instance.cartGuid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cart_guid"] as AnyObject?)
            return instance
        }


        // Decoder for [InvoiceItemResource]
        Decoders.addDecoder(clazz: [InvoiceItemResource].self) { (source: AnyObject) -> [InvoiceItemResource] in
            return Decoders.decode(clazz: [InvoiceItemResource].self, source: source)
        }
        // Decoder for InvoiceItemResource
        Decoders.addDecoder(clazz: InvoiceItemResource.self) { (source: AnyObject) -> InvoiceItemResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = InvoiceItemResource()
            instance.affiliateId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["affiliate_id"] as AnyObject?)
            instance.bundleSku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_sku"] as AnyObject?)
            instance.currentFulfillmentStatus = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["current_fulfillment_status"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"] as AnyObject?)
            instance.itemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["item_id"] as AnyObject?)
            instance.itemName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["item_name"] as AnyObject?)
            instance.originalTotalPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["original_total_price"] as AnyObject?)
            instance.originalUnitPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["original_unit_price"] as AnyObject?)
            instance.qty = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["qty"] as AnyObject?)
            instance.saleName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sale_name"] as AnyObject?)
            instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"] as AnyObject?)
            instance.skuDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku_description"] as AnyObject?)
            instance.systemPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["system_price"] as AnyObject?)
            instance.totalPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["total_price"] as AnyObject?)
            instance.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"] as AnyObject?)
            instance.unitPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["unit_price"] as AnyObject?)
            return instance
        }


        // Decoder for [InvoiceLogEntry]
        Decoders.addDecoder(clazz: [InvoiceLogEntry].self) { (source: AnyObject) -> [InvoiceLogEntry] in
            return Decoders.decode(clazz: [InvoiceLogEntry].self, source: source)
        }
        // Decoder for InvoiceLogEntry
        Decoders.addDecoder(clazz: InvoiceLogEntry.self) { (source: AnyObject) -> InvoiceLogEntry in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = InvoiceLogEntry()
            instance.date = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["date"] as AnyObject?)
            instance.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"] as AnyObject?)
            instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"] as AnyObject?)
            instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return instance
        }


        // Decoder for [InvoicePaymentStatusRequest]
        Decoders.addDecoder(clazz: [InvoicePaymentStatusRequest].self) { (source: AnyObject) -> [InvoicePaymentStatusRequest] in
            return Decoders.decode(clazz: [InvoicePaymentStatusRequest].self, source: source)
        }
        // Decoder for InvoicePaymentStatusRequest
        Decoders.addDecoder(clazz: InvoicePaymentStatusRequest.self) { (source: AnyObject) -> InvoicePaymentStatusRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = InvoicePaymentStatusRequest()
            instance.paymentMethodId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["payment_method_id"] as AnyObject?)
            instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"] as AnyObject?)
            return instance
        }


        // Decoder for [InvoiceResource]
        Decoders.addDecoder(clazz: [InvoiceResource].self) { (source: AnyObject) -> [InvoiceResource] in
            return Decoders.decode(clazz: [InvoiceResource].self, source: source)
        }
        // Decoder for InvoiceResource
        Decoders.addDecoder(clazz: InvoiceResource.self) { (source: AnyObject) -> InvoiceResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = InvoiceResource()
            instance.billingAddress1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billing_address1"] as AnyObject?)
            instance.billingAddress2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billing_address2"] as AnyObject?)
            instance.billingCityName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billing_city_name"] as AnyObject?)
            instance.billingCountryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billing_country_name"] as AnyObject?)
            instance.billingFullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billing_full_name"] as AnyObject?)
            instance.billingPostalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billing_postal_code"] as AnyObject?)
            instance.billingStateName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billing_state_name"] as AnyObject?)
            instance.cartId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cart_id"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.currency = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency"] as AnyObject?)
            instance.currentFulfillmentStatus = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["current_fulfillment_status"] as AnyObject?)
            instance.currentPaymentStatus = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["current_payment_status"] as AnyObject?)
            instance.discount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["discount"] as AnyObject?)
            instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"] as AnyObject?)
            instance.fedTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["fed_tax"] as AnyObject?)
            instance.grandTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["grand_total"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.invoiceNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["invoice_number"] as AnyObject?)
            instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"] as AnyObject?)
            instance.namePrefix = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name_prefix"] as AnyObject?)
            instance.orderNotes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["order_notes"] as AnyObject?)
            instance.parentInvoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["parent_invoice_id"] as AnyObject?)
            instance.paymentMethodId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["payment_method_id"] as AnyObject?)
            instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"] as AnyObject?)
            instance.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone_number"] as AnyObject?)
            instance.shipping = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["shipping"] as AnyObject?)
            instance.shippingAddress1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipping_address1"] as AnyObject?)
            instance.shippingAddress2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipping_address2"] as AnyObject?)
            instance.shippingCityName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipping_city_name"] as AnyObject?)
            instance.shippingCountryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipping_country_name"] as AnyObject?)
            instance.shippingFullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipping_full_name"] as AnyObject?)
            instance.shippingPostalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipping_postal_code"] as AnyObject?)
            instance.shippingStateName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipping_state_name"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.stateTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["state_tax"] as AnyObject?)
            instance.subtotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["subtotal"] as AnyObject?)
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            instance.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"] as AnyObject?)
            instance.vendorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vendor_id"] as AnyObject?)
            instance.vendorName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vendor_name"] as AnyObject?)
            return instance
        }


        // Decoder for [ItemBehaviorDefinitionResource]
        Decoders.addDecoder(clazz: [ItemBehaviorDefinitionResource].self) { (source: AnyObject) -> [ItemBehaviorDefinitionResource] in
            return Decoders.decode(clazz: [ItemBehaviorDefinitionResource].self, source: source)
        }
        // Decoder for ItemBehaviorDefinitionResource
        Decoders.addDecoder(clazz: ItemBehaviorDefinitionResource.self) { (source: AnyObject) -> ItemBehaviorDefinitionResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ItemBehaviorDefinitionResource()
            instance.behavior = Decoders.decodeOptional(clazz: Behavior.self, source: sourceDictionary["behavior"] as AnyObject?)
            instance.modifiable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["modifiable"] as AnyObject?)
            instance._required = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["required"] as AnyObject?)
            return instance
        }


        // Decoder for [ItemTemplateResource]
        Decoders.addDecoder(clazz: [ItemTemplateResource].self) { (source: AnyObject) -> [ItemTemplateResource] in
            return Decoders.decode(clazz: [ItemTemplateResource].self, source: source)
        }
        // Decoder for ItemTemplateResource
        Decoders.addDecoder(clazz: ItemTemplateResource.self) { (source: AnyObject) -> ItemTemplateResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ItemTemplateResource()
            instance.behaviors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["behaviors"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"] as AnyObject?)
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return instance
        }


        // Decoder for [KeyValuePairstringstring]
        Decoders.addDecoder(clazz: [KeyValuePairstringstring].self) { (source: AnyObject) -> [KeyValuePairstringstring] in
            return Decoders.decode(clazz: [KeyValuePairstringstring].self, source: source)
        }
        // Decoder for KeyValuePairstringstring
        Decoders.addDecoder(clazz: KeyValuePairstringstring.self) { (source: AnyObject) -> KeyValuePairstringstring in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = KeyValuePairstringstring()
            instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"] as AnyObject?)
            instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"] as AnyObject?)
            return instance
        }


        // Decoder for [Language]
        Decoders.addDecoder(clazz: [Language].self) { (source: AnyObject) -> [Language] in
            return Decoders.decode(clazz: [Language].self, source: source)
        }
        // Decoder for Language
        Decoders.addDecoder(clazz: Language.self) { (source: AnyObject) -> Language in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Language()
            instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            instance.dateCreated = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["date_created"] as AnyObject?)
            instance.dateUpdated = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["date_updated"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.direction = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["direction"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.isPrimary = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_primary"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [LeaderboardEntryResource]
        Decoders.addDecoder(clazz: [LeaderboardEntryResource].self) { (source: AnyObject) -> [LeaderboardEntryResource] in
            return Decoders.decode(clazz: [LeaderboardEntryResource].self, source: source)
        }
        // Decoder for LeaderboardEntryResource
        Decoders.addDecoder(clazz: LeaderboardEntryResource.self) { (source: AnyObject) -> LeaderboardEntryResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = LeaderboardEntryResource()
            instance.rank = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["rank"] as AnyObject?)
            instance.score = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["score"] as AnyObject?)
            instance.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"] as AnyObject?)
            return instance
        }


        // Decoder for [LeaderboardResource]
        Decoders.addDecoder(clazz: [LeaderboardResource].self) { (source: AnyObject) -> [LeaderboardResource] in
            return Decoders.decode(clazz: [LeaderboardResource].self, source: source)
        }
        // Decoder for LeaderboardResource
        Decoders.addDecoder(clazz: LeaderboardResource.self) { (source: AnyObject) -> LeaderboardResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = LeaderboardResource()
            instance.entries = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entries"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.strategy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["strategy"] as AnyObject?)
            return instance
        }


        // Decoder for [LevelingResource]
        Decoders.addDecoder(clazz: [LevelingResource].self) { (source: AnyObject) -> [LevelingResource] in
            return Decoders.decode(clazz: [LevelingResource].self, source: source)
        }
        // Decoder for LevelingResource
        Decoders.addDecoder(clazz: LevelingResource.self) { (source: AnyObject) -> LevelingResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = LevelingResource()
            instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.tiers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tiers"] as AnyObject?)
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return instance
        }


        // Decoder for [Localizer]
        Decoders.addDecoder(clazz: [Localizer].self) { (source: AnyObject) -> [Localizer] in
            return Decoders.decode(clazz: [Localizer].self, source: source)
        }
        // Decoder for Localizer
        Decoders.addDecoder(clazz: Localizer.self) { (source: AnyObject) -> Localizer in
            if let source = source as? Any {
                return source
            }
            fatalError("Source \(source) is not convertible to typealias Localizer: Maybe swagger file is insufficient")
        }


        // Decoder for [LocationLogResource]
        Decoders.addDecoder(clazz: [LocationLogResource].self) { (source: AnyObject) -> [LocationLogResource] in
            return Decoders.decode(clazz: [LocationLogResource].self, source: source)
        }
        // Decoder for LocationLogResource
        Decoders.addDecoder(clazz: LocationLogResource.self) { (source: AnyObject) -> LocationLogResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = LocationLogResource()
            instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"] as AnyObject?)
            instance.ip = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ip"] as AnyObject?)
            instance.time = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["time"] as AnyObject?)
            return instance
        }


        // Decoder for [LookupTypeResource]
        Decoders.addDecoder(clazz: [LookupTypeResource].self) { (source: AnyObject) -> [LookupTypeResource] in
            return Decoders.decode(clazz: [LookupTypeResource].self, source: source)
        }
        // Decoder for LookupTypeResource
        Decoders.addDecoder(clazz: LookupTypeResource.self) { (source: AnyObject) -> LookupTypeResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = LookupTypeResource()
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.keyType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key_type"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.valueType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value_type"] as AnyObject?)
            return instance
        }


        // Decoder for [Maintenance]
        Decoders.addDecoder(clazz: [Maintenance].self) { (source: AnyObject) -> [Maintenance] in
            return Decoders.decode(clazz: [Maintenance].self, source: source)
        }
        // Decoder for Maintenance
        Decoders.addDecoder(clazz: Maintenance.self) { (source: AnyObject) -> Maintenance in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Maintenance()
            instance.accessLocked = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["access_locked"] as AnyObject?)
            instance.details = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["details"] as AnyObject?)
            instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"] as AnyObject?)
            return instance
        }


        // Decoder for [Mapstringobject]
        Decoders.addDecoder(clazz: [Mapstringobject].self) { (source: AnyObject) -> [Mapstringobject] in
            return Decoders.decode(clazz: [Mapstringobject].self, source: source)
        }
        // Decoder for Mapstringobject
        Decoders.addDecoder(clazz: Mapstringobject.self) { (source: AnyObject) -> Mapstringobject in
            if let source = source as? Any {
                return source
            }
            fatalError("Source \(source) is not convertible to typealias Mapstringobject: Maybe swagger file is insufficient")
        }


        // Decoder for [MetricResource]
        Decoders.addDecoder(clazz: [MetricResource].self) { (source: AnyObject) -> [MetricResource] in
            return Decoders.decode(clazz: [MetricResource].self, source: source)
        }
        // Decoder for MetricResource
        Decoders.addDecoder(clazz: MetricResource.self) { (source: AnyObject) -> MetricResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = MetricResource()
            instance.activityOccurenceId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["activity_occurence_id"] as AnyObject?)
            instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            instance.value = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["value"] as AnyObject?)
            return instance
        }


        // Decoder for [MongoDatabaseConfig]
        Decoders.addDecoder(clazz: [MongoDatabaseConfig].self) { (source: AnyObject) -> [MongoDatabaseConfig] in
            return Decoders.decode(clazz: [MongoDatabaseConfig].self, source: source)
        }
        // Decoder for MongoDatabaseConfig
        Decoders.addDecoder(clazz: MongoDatabaseConfig.self) { (source: AnyObject) -> MongoDatabaseConfig in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = MongoDatabaseConfig()
            instance.dbName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["db_name"] as AnyObject?)
            instance.options = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["options"] as AnyObject?)
            instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"] as AnyObject?)
            instance.servers = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["servers"] as AnyObject?)
            instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"] as AnyObject?)
            return instance
        }


        // Decoder for [NestedCategory]
        Decoders.addDecoder(clazz: [NestedCategory].self) { (source: AnyObject) -> [NestedCategory] in
            return Decoders.decode(clazz: [NestedCategory].self, source: source)
        }
        // Decoder for NestedCategory
        Decoders.addDecoder(clazz: NestedCategory.self) { (source: AnyObject) -> NestedCategory in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = NestedCategory()
            instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [NewPasswordRequest]
        Decoders.addDecoder(clazz: [NewPasswordRequest].self) { (source: AnyObject) -> [NewPasswordRequest] in
            return Decoders.decode(clazz: [NewPasswordRequest].self, source: source)
        }
        // Decoder for NewPasswordRequest
        Decoders.addDecoder(clazz: NewPasswordRequest.self) { (source: AnyObject) -> NewPasswordRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = NewPasswordRequest()
            instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"] as AnyObject?)
            instance.secret = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["secret"] as AnyObject?)
            return instance
        }


        // Decoder for [OauthAccessTokenResource]
        Decoders.addDecoder(clazz: [OauthAccessTokenResource].self) { (source: AnyObject) -> [OauthAccessTokenResource] in
            return Decoders.decode(clazz: [OauthAccessTokenResource].self, source: source)
        }
        // Decoder for OauthAccessTokenResource
        Decoders.addDecoder(clazz: OauthAccessTokenResource.self) { (source: AnyObject) -> OauthAccessTokenResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = OauthAccessTokenResource()
            instance.clientId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["client_id"] as AnyObject?)
            instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"] as AnyObject?)
            instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"] as AnyObject?)
            return instance
        }


        // Decoder for [Operator]
        Decoders.addDecoder(clazz: [Operator].self) { (source: AnyObject) -> [Operator] in
            return Decoders.decode(clazz: [Operator].self, source: source)
        }
        // Decoder for Operator
        Decoders.addDecoder(clazz: Operator.self) { (source: AnyObject) -> Operator in
            if let source = source as? Any {
                return source
            }
            fatalError("Source \(source) is not convertible to typealias Operator: Maybe swagger file is insufficient")
        }


        // Decoder for [OptimalPaymentRequest]
        Decoders.addDecoder(clazz: [OptimalPaymentRequest].self) { (source: AnyObject) -> [OptimalPaymentRequest] in
            return Decoders.decode(clazz: [OptimalPaymentRequest].self, source: source)
        }
        // Decoder for OptimalPaymentRequest
        Decoders.addDecoder(clazz: OptimalPaymentRequest.self) { (source: AnyObject) -> OptimalPaymentRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = OptimalPaymentRequest()
            instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"] as AnyObject?)
            instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["first_name"] as AnyObject?)
            instance.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"] as AnyObject?)
            instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last_name"] as AnyObject?)
            instance.onDecline = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["on_decline"] as AnyObject?)
            instance.onError = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["on_error"] as AnyObject?)
            instance.onSuccess = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["on_success"] as AnyObject?)
            return instance
        }


        // Decoder for [Order]
        Decoders.addDecoder(clazz: [Order].self) { (source: AnyObject) -> [Order] in
            return Decoders.decode(clazz: [Order].self, source: source)
        }
        // Decoder for Order
        Decoders.addDecoder(clazz: Order.self) { (source: AnyObject) -> Order in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Order()
            instance.ascending = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ascending"] as AnyObject?)
            if let direction = sourceDictionary["direction"] as? String { 
                instance.direction = Order.Direction(rawValue: (direction))
            }
            
            instance.ignoreCase = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ignore_case"] as AnyObject?)
            if let nullHandling = sourceDictionary["null_handling"] as? String { 
                instance.nullHandling = Order.NullHandling(rawValue: (nullHandling))
            }
            
            instance.property = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["property"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceAchievementDefinitionResource]
        Decoders.addDecoder(clazz: [PageResourceAchievementDefinitionResource].self) { (source: AnyObject) -> [PageResourceAchievementDefinitionResource] in
            return Decoders.decode(clazz: [PageResourceAchievementDefinitionResource].self, source: source)
        }
        // Decoder for PageResourceAchievementDefinitionResource
        Decoders.addDecoder(clazz: PageResourceAchievementDefinitionResource.self) { (source: AnyObject) -> PageResourceAchievementDefinitionResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceAchievementDefinitionResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceAggregateCountResource]
        Decoders.addDecoder(clazz: [PageResourceAggregateCountResource].self) { (source: AnyObject) -> [PageResourceAggregateCountResource] in
            return Decoders.decode(clazz: [PageResourceAggregateCountResource].self, source: source)
        }
        // Decoder for PageResourceAggregateCountResource
        Decoders.addDecoder(clazz: PageResourceAggregateCountResource.self) { (source: AnyObject) -> PageResourceAggregateCountResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceAggregateCountResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceAggregateInvoiceReportResource]
        Decoders.addDecoder(clazz: [PageResourceAggregateInvoiceReportResource].self) { (source: AnyObject) -> [PageResourceAggregateInvoiceReportResource] in
            return Decoders.decode(clazz: [PageResourceAggregateInvoiceReportResource].self, source: source)
        }
        // Decoder for PageResourceAggregateInvoiceReportResource
        Decoders.addDecoder(clazz: PageResourceAggregateInvoiceReportResource.self) { (source: AnyObject) -> PageResourceAggregateInvoiceReportResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceAggregateInvoiceReportResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceArticleResource]
        Decoders.addDecoder(clazz: [PageResourceArticleResource].self) { (source: AnyObject) -> [PageResourceArticleResource] in
            return Decoders.decode(clazz: [PageResourceArticleResource].self, source: source)
        }
        // Decoder for PageResourceArticleResource
        Decoders.addDecoder(clazz: PageResourceArticleResource.self) { (source: AnyObject) -> PageResourceArticleResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceArticleResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceArtistResource]
        Decoders.addDecoder(clazz: [PageResourceArtistResource].self) { (source: AnyObject) -> [PageResourceArtistResource] in
            return Decoders.decode(clazz: [PageResourceArtistResource].self, source: source)
        }
        // Decoder for PageResourceArtistResource
        Decoders.addDecoder(clazz: PageResourceArtistResource.self) { (source: AnyObject) -> PageResourceArtistResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceArtistResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceBareActivityResource]
        Decoders.addDecoder(clazz: [PageResourceBareActivityResource].self) { (source: AnyObject) -> [PageResourceBareActivityResource] in
            return Decoders.decode(clazz: [PageResourceBareActivityResource].self, source: source)
        }
        // Decoder for PageResourceBareActivityResource
        Decoders.addDecoder(clazz: PageResourceBareActivityResource.self) { (source: AnyObject) -> PageResourceBareActivityResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceBareActivityResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceBareChallengeActivityResource]
        Decoders.addDecoder(clazz: [PageResourceBareChallengeActivityResource].self) { (source: AnyObject) -> [PageResourceBareChallengeActivityResource] in
            return Decoders.decode(clazz: [PageResourceBareChallengeActivityResource].self, source: source)
        }
        // Decoder for PageResourceBareChallengeActivityResource
        Decoders.addDecoder(clazz: PageResourceBareChallengeActivityResource.self) { (source: AnyObject) -> PageResourceBareChallengeActivityResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceBareChallengeActivityResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceBillingReport]
        Decoders.addDecoder(clazz: [PageResourceBillingReport].self) { (source: AnyObject) -> [PageResourceBillingReport] in
            return Decoders.decode(clazz: [PageResourceBillingReport].self, source: source)
        }
        // Decoder for PageResourceBillingReport
        Decoders.addDecoder(clazz: PageResourceBillingReport.self) { (source: AnyObject) -> PageResourceBillingReport in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceBillingReport()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceBreCategoryResource]
        Decoders.addDecoder(clazz: [PageResourceBreCategoryResource].self) { (source: AnyObject) -> [PageResourceBreCategoryResource] in
            return Decoders.decode(clazz: [PageResourceBreCategoryResource].self, source: source)
        }
        // Decoder for PageResourceBreCategoryResource
        Decoders.addDecoder(clazz: PageResourceBreCategoryResource.self) { (source: AnyObject) -> PageResourceBreCategoryResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceBreCategoryResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceBreEventLog]
        Decoders.addDecoder(clazz: [PageResourceBreEventLog].self) { (source: AnyObject) -> [PageResourceBreEventLog] in
            return Decoders.decode(clazz: [PageResourceBreEventLog].self, source: source)
        }
        // Decoder for PageResourceBreEventLog
        Decoders.addDecoder(clazz: PageResourceBreEventLog.self) { (source: AnyObject) -> PageResourceBreEventLog in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceBreEventLog()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceBreGlobalResource]
        Decoders.addDecoder(clazz: [PageResourceBreGlobalResource].self) { (source: AnyObject) -> [PageResourceBreGlobalResource] in
            return Decoders.decode(clazz: [PageResourceBreGlobalResource].self, source: source)
        }
        // Decoder for PageResourceBreGlobalResource
        Decoders.addDecoder(clazz: PageResourceBreGlobalResource.self) { (source: AnyObject) -> PageResourceBreGlobalResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceBreGlobalResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceBreRule]
        Decoders.addDecoder(clazz: [PageResourceBreRule].self) { (source: AnyObject) -> [PageResourceBreRule] in
            return Decoders.decode(clazz: [PageResourceBreRule].self, source: source)
        }
        // Decoder for PageResourceBreRule
        Decoders.addDecoder(clazz: PageResourceBreRule.self) { (source: AnyObject) -> PageResourceBreRule in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceBreRule()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceBreTriggerResource]
        Decoders.addDecoder(clazz: [PageResourceBreTriggerResource].self) { (source: AnyObject) -> [PageResourceBreTriggerResource] in
            return Decoders.decode(clazz: [PageResourceBreTriggerResource].self, source: source)
        }
        // Decoder for PageResourceBreTriggerResource
        Decoders.addDecoder(clazz: PageResourceBreTriggerResource.self) { (source: AnyObject) -> PageResourceBreTriggerResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceBreTriggerResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceCampaignResource]
        Decoders.addDecoder(clazz: [PageResourceCampaignResource].self) { (source: AnyObject) -> [PageResourceCampaignResource] in
            return Decoders.decode(clazz: [PageResourceCampaignResource].self, source: source)
        }
        // Decoder for PageResourceCampaignResource
        Decoders.addDecoder(clazz: PageResourceCampaignResource.self) { (source: AnyObject) -> PageResourceCampaignResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceCampaignResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceCartSummary]
        Decoders.addDecoder(clazz: [PageResourceCartSummary].self) { (source: AnyObject) -> [PageResourceCartSummary] in
            return Decoders.decode(clazz: [PageResourceCartSummary].self, source: source)
        }
        // Decoder for PageResourceCartSummary
        Decoders.addDecoder(clazz: PageResourceCartSummary.self) { (source: AnyObject) -> PageResourceCartSummary in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceCartSummary()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceCatalogSale]
        Decoders.addDecoder(clazz: [PageResourceCatalogSale].self) { (source: AnyObject) -> [PageResourceCatalogSale] in
            return Decoders.decode(clazz: [PageResourceCatalogSale].self, source: source)
        }
        // Decoder for PageResourceCatalogSale
        Decoders.addDecoder(clazz: PageResourceCatalogSale.self) { (source: AnyObject) -> PageResourceCatalogSale in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceCatalogSale()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceCategoryResource]
        Decoders.addDecoder(clazz: [PageResourceCategoryResource].self) { (source: AnyObject) -> [PageResourceCategoryResource] in
            return Decoders.decode(clazz: [PageResourceCategoryResource].self, source: source)
        }
        // Decoder for PageResourceCategoryResource
        Decoders.addDecoder(clazz: PageResourceCategoryResource.self) { (source: AnyObject) -> PageResourceCategoryResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceCategoryResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceChallengeEventParticipantResource]
        Decoders.addDecoder(clazz: [PageResourceChallengeEventParticipantResource].self) { (source: AnyObject) -> [PageResourceChallengeEventParticipantResource] in
            return Decoders.decode(clazz: [PageResourceChallengeEventParticipantResource].self, source: source)
        }
        // Decoder for PageResourceChallengeEventParticipantResource
        Decoders.addDecoder(clazz: PageResourceChallengeEventParticipantResource.self) { (source: AnyObject) -> PageResourceChallengeEventParticipantResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceChallengeEventParticipantResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceChallengeEventResource]
        Decoders.addDecoder(clazz: [PageResourceChallengeEventResource].self) { (source: AnyObject) -> [PageResourceChallengeEventResource] in
            return Decoders.decode(clazz: [PageResourceChallengeEventResource].self, source: source)
        }
        // Decoder for PageResourceChallengeEventResource
        Decoders.addDecoder(clazz: PageResourceChallengeEventResource.self) { (source: AnyObject) -> PageResourceChallengeEventResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceChallengeEventResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceChallengeResource]
        Decoders.addDecoder(clazz: [PageResourceChallengeResource].self) { (source: AnyObject) -> [PageResourceChallengeResource] in
            return Decoders.decode(clazz: [PageResourceChallengeResource].self, source: source)
        }
        // Decoder for PageResourceChallengeResource
        Decoders.addDecoder(clazz: PageResourceChallengeResource.self) { (source: AnyObject) -> PageResourceChallengeResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceChallengeResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceClientResource]
        Decoders.addDecoder(clazz: [PageResourceClientResource].self) { (source: AnyObject) -> [PageResourceClientResource] in
            return Decoders.decode(clazz: [PageResourceClientResource].self, source: source)
        }
        // Decoder for PageResourceClientResource
        Decoders.addDecoder(clazz: PageResourceClientResource.self) { (source: AnyObject) -> PageResourceClientResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceClientResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceCommentResource]
        Decoders.addDecoder(clazz: [PageResourceCommentResource].self) { (source: AnyObject) -> [PageResourceCommentResource] in
            return Decoders.decode(clazz: [PageResourceCommentResource].self, source: source)
        }
        // Decoder for PageResourceCommentResource
        Decoders.addDecoder(clazz: PageResourceCommentResource.self) { (source: AnyObject) -> PageResourceCommentResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceCommentResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceConfig]
        Decoders.addDecoder(clazz: [PageResourceConfig].self) { (source: AnyObject) -> [PageResourceConfig] in
            return Decoders.decode(clazz: [PageResourceConfig].self, source: source)
        }
        // Decoder for PageResourceConfig
        Decoders.addDecoder(clazz: PageResourceConfig.self) { (source: AnyObject) -> PageResourceConfig in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceConfig()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceCountryTaxResource]
        Decoders.addDecoder(clazz: [PageResourceCountryTaxResource].self) { (source: AnyObject) -> [PageResourceCountryTaxResource] in
            return Decoders.decode(clazz: [PageResourceCountryTaxResource].self, source: source)
        }
        // Decoder for PageResourceCountryTaxResource
        Decoders.addDecoder(clazz: PageResourceCountryTaxResource.self) { (source: AnyObject) -> PageResourceCountryTaxResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceCountryTaxResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceCurrencyResource]
        Decoders.addDecoder(clazz: [PageResourceCurrencyResource].self) { (source: AnyObject) -> [PageResourceCurrencyResource] in
            return Decoders.decode(clazz: [PageResourceCurrencyResource].self, source: source)
        }
        // Decoder for PageResourceCurrencyResource
        Decoders.addDecoder(clazz: PageResourceCurrencyResource.self) { (source: AnyObject) -> PageResourceCurrencyResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceCurrencyResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceDeviceResource]
        Decoders.addDecoder(clazz: [PageResourceDeviceResource].self) { (source: AnyObject) -> [PageResourceDeviceResource] in
            return Decoders.decode(clazz: [PageResourceDeviceResource].self, source: source)
        }
        // Decoder for PageResourceDeviceResource
        Decoders.addDecoder(clazz: PageResourceDeviceResource.self) { (source: AnyObject) -> PageResourceDeviceResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceDeviceResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceDispositionResource]
        Decoders.addDecoder(clazz: [PageResourceDispositionResource].self) { (source: AnyObject) -> [PageResourceDispositionResource] in
            return Decoders.decode(clazz: [PageResourceDispositionResource].self, source: source)
        }
        // Decoder for PageResourceDispositionResource
        Decoders.addDecoder(clazz: PageResourceDispositionResource.self) { (source: AnyObject) -> PageResourceDispositionResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceDispositionResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceEntitlementItem]
        Decoders.addDecoder(clazz: [PageResourceEntitlementItem].self) { (source: AnyObject) -> [PageResourceEntitlementItem] in
            return Decoders.decode(clazz: [PageResourceEntitlementItem].self, source: source)
        }
        // Decoder for PageResourceEntitlementItem
        Decoders.addDecoder(clazz: PageResourceEntitlementItem.self) { (source: AnyObject) -> PageResourceEntitlementItem in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceEntitlementItem()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceFlagReportResource]
        Decoders.addDecoder(clazz: [PageResourceFlagReportResource].self) { (source: AnyObject) -> [PageResourceFlagReportResource] in
            return Decoders.decode(clazz: [PageResourceFlagReportResource].self, source: source)
        }
        // Decoder for PageResourceFlagReportResource
        Decoders.addDecoder(clazz: PageResourceFlagReportResource.self) { (source: AnyObject) -> PageResourceFlagReportResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceFlagReportResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceForwardLog]
        Decoders.addDecoder(clazz: [PageResourceForwardLog].self) { (source: AnyObject) -> [PageResourceForwardLog] in
            return Decoders.decode(clazz: [PageResourceForwardLog].self, source: source)
        }
        // Decoder for PageResourceForwardLog
        Decoders.addDecoder(clazz: PageResourceForwardLog.self) { (source: AnyObject) -> PageResourceForwardLog in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceForwardLog()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceFulfillmentType]
        Decoders.addDecoder(clazz: [PageResourceFulfillmentType].self) { (source: AnyObject) -> [PageResourceFulfillmentType] in
            return Decoders.decode(clazz: [PageResourceFulfillmentType].self, source: source)
        }
        // Decoder for PageResourceFulfillmentType
        Decoders.addDecoder(clazz: PageResourceFulfillmentType.self) { (source: AnyObject) -> PageResourceFulfillmentType in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceFulfillmentType()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceGroupMemberResource]
        Decoders.addDecoder(clazz: [PageResourceGroupMemberResource].self) { (source: AnyObject) -> [PageResourceGroupMemberResource] in
            return Decoders.decode(clazz: [PageResourceGroupMemberResource].self, source: source)
        }
        // Decoder for PageResourceGroupMemberResource
        Decoders.addDecoder(clazz: PageResourceGroupMemberResource.self) { (source: AnyObject) -> PageResourceGroupMemberResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceGroupMemberResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceGroupResource]
        Decoders.addDecoder(clazz: [PageResourceGroupResource].self) { (source: AnyObject) -> [PageResourceGroupResource] in
            return Decoders.decode(clazz: [PageResourceGroupResource].self, source: source)
        }
        // Decoder for PageResourceGroupResource
        Decoders.addDecoder(clazz: PageResourceGroupResource.self) { (source: AnyObject) -> PageResourceGroupResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceGroupResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceImportJobResource]
        Decoders.addDecoder(clazz: [PageResourceImportJobResource].self) { (source: AnyObject) -> [PageResourceImportJobResource] in
            return Decoders.decode(clazz: [PageResourceImportJobResource].self, source: source)
        }
        // Decoder for PageResourceImportJobResource
        Decoders.addDecoder(clazz: PageResourceImportJobResource.self) { (source: AnyObject) -> PageResourceImportJobResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceImportJobResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceInvoiceLogEntry]
        Decoders.addDecoder(clazz: [PageResourceInvoiceLogEntry].self) { (source: AnyObject) -> [PageResourceInvoiceLogEntry] in
            return Decoders.decode(clazz: [PageResourceInvoiceLogEntry].self, source: source)
        }
        // Decoder for PageResourceInvoiceLogEntry
        Decoders.addDecoder(clazz: PageResourceInvoiceLogEntry.self) { (source: AnyObject) -> PageResourceInvoiceLogEntry in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceInvoiceLogEntry()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceInvoiceResource]
        Decoders.addDecoder(clazz: [PageResourceInvoiceResource].self) { (source: AnyObject) -> [PageResourceInvoiceResource] in
            return Decoders.decode(clazz: [PageResourceInvoiceResource].self, source: source)
        }
        // Decoder for PageResourceInvoiceResource
        Decoders.addDecoder(clazz: PageResourceInvoiceResource.self) { (source: AnyObject) -> PageResourceInvoiceResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceInvoiceResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceItemTemplateResource]
        Decoders.addDecoder(clazz: [PageResourceItemTemplateResource].self) { (source: AnyObject) -> [PageResourceItemTemplateResource] in
            return Decoders.decode(clazz: [PageResourceItemTemplateResource].self, source: source)
        }
        // Decoder for PageResourceItemTemplateResource
        Decoders.addDecoder(clazz: PageResourceItemTemplateResource.self) { (source: AnyObject) -> PageResourceItemTemplateResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceItemTemplateResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceLevelingResource]
        Decoders.addDecoder(clazz: [PageResourceLevelingResource].self) { (source: AnyObject) -> [PageResourceLevelingResource] in
            return Decoders.decode(clazz: [PageResourceLevelingResource].self, source: source)
        }
        // Decoder for PageResourceLevelingResource
        Decoders.addDecoder(clazz: PageResourceLevelingResource.self) { (source: AnyObject) -> PageResourceLevelingResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceLevelingResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceLocationLogResource]
        Decoders.addDecoder(clazz: [PageResourceLocationLogResource].self) { (source: AnyObject) -> [PageResourceLocationLogResource] in
            return Decoders.decode(clazz: [PageResourceLocationLogResource].self, source: source)
        }
        // Decoder for PageResourceLocationLogResource
        Decoders.addDecoder(clazz: PageResourceLocationLogResource.self) { (source: AnyObject) -> PageResourceLocationLogResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceLocationLogResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceMapstringobject]
        Decoders.addDecoder(clazz: [PageResourceMapstringobject].self) { (source: AnyObject) -> [PageResourceMapstringobject] in
            return Decoders.decode(clazz: [PageResourceMapstringobject].self, source: source)
        }
        // Decoder for PageResourceMapstringobject
        Decoders.addDecoder(clazz: PageResourceMapstringobject.self) { (source: AnyObject) -> PageResourceMapstringobject in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceMapstringobject()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceOauthAccessTokenResource]
        Decoders.addDecoder(clazz: [PageResourceOauthAccessTokenResource].self) { (source: AnyObject) -> [PageResourceOauthAccessTokenResource] in
            return Decoders.decode(clazz: [PageResourceOauthAccessTokenResource].self, source: source)
        }
        // Decoder for PageResourceOauthAccessTokenResource
        Decoders.addDecoder(clazz: PageResourceOauthAccessTokenResource.self) { (source: AnyObject) -> PageResourceOauthAccessTokenResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceOauthAccessTokenResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourcePermissionResource]
        Decoders.addDecoder(clazz: [PageResourcePermissionResource].self) { (source: AnyObject) -> [PageResourcePermissionResource] in
            return Decoders.decode(clazz: [PageResourcePermissionResource].self, source: source)
        }
        // Decoder for PageResourcePermissionResource
        Decoders.addDecoder(clazz: PageResourcePermissionResource.self) { (source: AnyObject) -> PageResourcePermissionResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourcePermissionResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourcePollResource]
        Decoders.addDecoder(clazz: [PageResourcePollResource].self) { (source: AnyObject) -> [PageResourcePollResource] in
            return Decoders.decode(clazz: [PageResourcePollResource].self, source: source)
        }
        // Decoder for PageResourcePollResource
        Decoders.addDecoder(clazz: PageResourcePollResource.self) { (source: AnyObject) -> PageResourcePollResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourcePollResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceQuestionResource]
        Decoders.addDecoder(clazz: [PageResourceQuestionResource].self) { (source: AnyObject) -> [PageResourceQuestionResource] in
            return Decoders.decode(clazz: [PageResourceQuestionResource].self, source: source)
        }
        // Decoder for PageResourceQuestionResource
        Decoders.addDecoder(clazz: PageResourceQuestionResource.self) { (source: AnyObject) -> PageResourceQuestionResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceQuestionResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceQuestionTemplateResource]
        Decoders.addDecoder(clazz: [PageResourceQuestionTemplateResource].self) { (source: AnyObject) -> [PageResourceQuestionTemplateResource] in
            return Decoders.decode(clazz: [PageResourceQuestionTemplateResource].self, source: source)
        }
        // Decoder for PageResourceQuestionTemplateResource
        Decoders.addDecoder(clazz: PageResourceQuestionTemplateResource.self) { (source: AnyObject) -> PageResourceQuestionTemplateResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceQuestionTemplateResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceRevenueCountryReportResource]
        Decoders.addDecoder(clazz: [PageResourceRevenueCountryReportResource].self) { (source: AnyObject) -> [PageResourceRevenueCountryReportResource] in
            return Decoders.decode(clazz: [PageResourceRevenueCountryReportResource].self, source: source)
        }
        // Decoder for PageResourceRevenueCountryReportResource
        Decoders.addDecoder(clazz: PageResourceRevenueCountryReportResource.self) { (source: AnyObject) -> PageResourceRevenueCountryReportResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceRevenueCountryReportResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceRevenueProductReportResource]
        Decoders.addDecoder(clazz: [PageResourceRevenueProductReportResource].self) { (source: AnyObject) -> [PageResourceRevenueProductReportResource] in
            return Decoders.decode(clazz: [PageResourceRevenueProductReportResource].self, source: source)
        }
        // Decoder for PageResourceRevenueProductReportResource
        Decoders.addDecoder(clazz: PageResourceRevenueProductReportResource.self) { (source: AnyObject) -> PageResourceRevenueProductReportResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceRevenueProductReportResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceRewardSetResource]
        Decoders.addDecoder(clazz: [PageResourceRewardSetResource].self) { (source: AnyObject) -> [PageResourceRewardSetResource] in
            return Decoders.decode(clazz: [PageResourceRewardSetResource].self, source: source)
        }
        // Decoder for PageResourceRewardSetResource
        Decoders.addDecoder(clazz: PageResourceRewardSetResource.self) { (source: AnyObject) -> PageResourceRewardSetResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceRewardSetResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceRoleResource]
        Decoders.addDecoder(clazz: [PageResourceRoleResource].self) { (source: AnyObject) -> [PageResourceRoleResource] in
            return Decoders.decode(clazz: [PageResourceRoleResource].self, source: source)
        }
        // Decoder for PageResourceRoleResource
        Decoders.addDecoder(clazz: PageResourceRoleResource.self) { (source: AnyObject) -> PageResourceRoleResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceRoleResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceSavedAddressResource]
        Decoders.addDecoder(clazz: [PageResourceSavedAddressResource].self) { (source: AnyObject) -> [PageResourceSavedAddressResource] in
            return Decoders.decode(clazz: [PageResourceSavedAddressResource].self, source: source)
        }
        // Decoder for PageResourceSavedAddressResource
        Decoders.addDecoder(clazz: PageResourceSavedAddressResource.self) { (source: AnyObject) -> PageResourceSavedAddressResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceSavedAddressResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceSimpleUserResource]
        Decoders.addDecoder(clazz: [PageResourceSimpleUserResource].self) { (source: AnyObject) -> [PageResourceSimpleUserResource] in
            return Decoders.decode(clazz: [PageResourceSimpleUserResource].self, source: source)
        }
        // Decoder for PageResourceSimpleUserResource
        Decoders.addDecoder(clazz: PageResourceSimpleUserResource.self) { (source: AnyObject) -> PageResourceSimpleUserResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceSimpleUserResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceSimpleWallet]
        Decoders.addDecoder(clazz: [PageResourceSimpleWallet].self) { (source: AnyObject) -> [PageResourceSimpleWallet] in
            return Decoders.decode(clazz: [PageResourceSimpleWallet].self, source: source)
        }
        // Decoder for PageResourceSimpleWallet
        Decoders.addDecoder(clazz: PageResourceSimpleWallet.self) { (source: AnyObject) -> PageResourceSimpleWallet in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceSimpleWallet()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceStateTaxResource]
        Decoders.addDecoder(clazz: [PageResourceStateTaxResource].self) { (source: AnyObject) -> [PageResourceStateTaxResource] in
            return Decoders.decode(clazz: [PageResourceStateTaxResource].self, source: source)
        }
        // Decoder for PageResourceStateTaxResource
        Decoders.addDecoder(clazz: PageResourceStateTaxResource.self) { (source: AnyObject) -> PageResourceStateTaxResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceStateTaxResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceStoreItem]
        Decoders.addDecoder(clazz: [PageResourceStoreItem].self) { (source: AnyObject) -> [PageResourceStoreItem] in
            return Decoders.decode(clazz: [PageResourceStoreItem].self, source: source)
        }
        // Decoder for PageResourceStoreItem
        Decoders.addDecoder(clazz: PageResourceStoreItem.self) { (source: AnyObject) -> PageResourceStoreItem in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceStoreItem()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceStoreItemTemplateResource]
        Decoders.addDecoder(clazz: [PageResourceStoreItemTemplateResource].self) { (source: AnyObject) -> [PageResourceStoreItemTemplateResource] in
            return Decoders.decode(clazz: [PageResourceStoreItemTemplateResource].self, source: source)
        }
        // Decoder for PageResourceStoreItemTemplateResource
        Decoders.addDecoder(clazz: PageResourceStoreItemTemplateResource.self) { (source: AnyObject) -> PageResourceStoreItemTemplateResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceStoreItemTemplateResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceSubscriptionResource]
        Decoders.addDecoder(clazz: [PageResourceSubscriptionResource].self) { (source: AnyObject) -> [PageResourceSubscriptionResource] in
            return Decoders.decode(clazz: [PageResourceSubscriptionResource].self, source: source)
        }
        // Decoder for PageResourceSubscriptionResource
        Decoders.addDecoder(clazz: PageResourceSubscriptionResource.self) { (source: AnyObject) -> PageResourceSubscriptionResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceSubscriptionResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceSubscriptionTemplateResource]
        Decoders.addDecoder(clazz: [PageResourceSubscriptionTemplateResource].self) { (source: AnyObject) -> [PageResourceSubscriptionTemplateResource] in
            return Decoders.decode(clazz: [PageResourceSubscriptionTemplateResource].self, source: source)
        }
        // Decoder for PageResourceSubscriptionTemplateResource
        Decoders.addDecoder(clazz: PageResourceSubscriptionTemplateResource.self) { (source: AnyObject) -> PageResourceSubscriptionTemplateResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceSubscriptionTemplateResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceTemplateResource]
        Decoders.addDecoder(clazz: [PageResourceTemplateResource].self) { (source: AnyObject) -> [PageResourceTemplateResource] in
            return Decoders.decode(clazz: [PageResourceTemplateResource].self, source: source)
        }
        // Decoder for PageResourceTemplateResource
        Decoders.addDecoder(clazz: PageResourceTemplateResource.self) { (source: AnyObject) -> PageResourceTemplateResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceTemplateResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceTransactionResource]
        Decoders.addDecoder(clazz: [PageResourceTransactionResource].self) { (source: AnyObject) -> [PageResourceTransactionResource] in
            return Decoders.decode(clazz: [PageResourceTransactionResource].self, source: source)
        }
        // Decoder for PageResourceTransactionResource
        Decoders.addDecoder(clazz: PageResourceTransactionResource.self) { (source: AnyObject) -> PageResourceTransactionResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceTransactionResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceUsageInfo]
        Decoders.addDecoder(clazz: [PageResourceUsageInfo].self) { (source: AnyObject) -> [PageResourceUsageInfo] in
            return Decoders.decode(clazz: [PageResourceUsageInfo].self, source: source)
        }
        // Decoder for PageResourceUsageInfo
        Decoders.addDecoder(clazz: PageResourceUsageInfo.self) { (source: AnyObject) -> PageResourceUsageInfo in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceUsageInfo()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceUserAchievementGroupResource]
        Decoders.addDecoder(clazz: [PageResourceUserAchievementGroupResource].self) { (source: AnyObject) -> [PageResourceUserAchievementGroupResource] in
            return Decoders.decode(clazz: [PageResourceUserAchievementGroupResource].self, source: source)
        }
        // Decoder for PageResourceUserAchievementGroupResource
        Decoders.addDecoder(clazz: PageResourceUserAchievementGroupResource.self) { (source: AnyObject) -> PageResourceUserAchievementGroupResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceUserAchievementGroupResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceUserActionLog]
        Decoders.addDecoder(clazz: [PageResourceUserActionLog].self) { (source: AnyObject) -> [PageResourceUserActionLog] in
            return Decoders.decode(clazz: [PageResourceUserActionLog].self, source: source)
        }
        // Decoder for PageResourceUserActionLog
        Decoders.addDecoder(clazz: PageResourceUserActionLog.self) { (source: AnyObject) -> PageResourceUserActionLog in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceUserActionLog()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceUserBaseResource]
        Decoders.addDecoder(clazz: [PageResourceUserBaseResource].self) { (source: AnyObject) -> [PageResourceUserBaseResource] in
            return Decoders.decode(clazz: [PageResourceUserBaseResource].self, source: source)
        }
        // Decoder for PageResourceUserBaseResource
        Decoders.addDecoder(clazz: PageResourceUserBaseResource.self) { (source: AnyObject) -> PageResourceUserBaseResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceUserBaseResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceUserInventoryResource]
        Decoders.addDecoder(clazz: [PageResourceUserInventoryResource].self) { (source: AnyObject) -> [PageResourceUserInventoryResource] in
            return Decoders.decode(clazz: [PageResourceUserInventoryResource].self, source: source)
        }
        // Decoder for PageResourceUserInventoryResource
        Decoders.addDecoder(clazz: PageResourceUserInventoryResource.self) { (source: AnyObject) -> PageResourceUserInventoryResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceUserInventoryResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceUserItemLogResource]
        Decoders.addDecoder(clazz: [PageResourceUserItemLogResource].self) { (source: AnyObject) -> [PageResourceUserItemLogResource] in
            return Decoders.decode(clazz: [PageResourceUserItemLogResource].self, source: source)
        }
        // Decoder for PageResourceUserItemLogResource
        Decoders.addDecoder(clazz: PageResourceUserItemLogResource.self) { (source: AnyObject) -> PageResourceUserItemLogResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceUserItemLogResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceUserLevelingResource]
        Decoders.addDecoder(clazz: [PageResourceUserLevelingResource].self) { (source: AnyObject) -> [PageResourceUserLevelingResource] in
            return Decoders.decode(clazz: [PageResourceUserLevelingResource].self, source: source)
        }
        // Decoder for PageResourceUserLevelingResource
        Decoders.addDecoder(clazz: PageResourceUserLevelingResource.self) { (source: AnyObject) -> PageResourceUserLevelingResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceUserLevelingResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceUserRelationshipResource]
        Decoders.addDecoder(clazz: [PageResourceUserRelationshipResource].self) { (source: AnyObject) -> [PageResourceUserRelationshipResource] in
            return Decoders.decode(clazz: [PageResourceUserRelationshipResource].self, source: source)
        }
        // Decoder for PageResourceUserRelationshipResource
        Decoders.addDecoder(clazz: PageResourceUserRelationshipResource.self) { (source: AnyObject) -> PageResourceUserRelationshipResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceUserRelationshipResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceVendorResource]
        Decoders.addDecoder(clazz: [PageResourceVendorResource].self) { (source: AnyObject) -> [PageResourceVendorResource] in
            return Decoders.decode(clazz: [PageResourceVendorResource].self, source: source)
        }
        // Decoder for PageResourceVendorResource
        Decoders.addDecoder(clazz: PageResourceVendorResource.self) { (source: AnyObject) -> PageResourceVendorResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceVendorResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceVideoRelationshipResource]
        Decoders.addDecoder(clazz: [PageResourceVideoRelationshipResource].self) { (source: AnyObject) -> [PageResourceVideoRelationshipResource] in
            return Decoders.decode(clazz: [PageResourceVideoRelationshipResource].self, source: source)
        }
        // Decoder for PageResourceVideoRelationshipResource
        Decoders.addDecoder(clazz: PageResourceVideoRelationshipResource.self) { (source: AnyObject) -> PageResourceVideoRelationshipResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceVideoRelationshipResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceVideoResource]
        Decoders.addDecoder(clazz: [PageResourceVideoResource].self) { (source: AnyObject) -> [PageResourceVideoResource] in
            return Decoders.decode(clazz: [PageResourceVideoResource].self, source: source)
        }
        // Decoder for PageResourceVideoResource
        Decoders.addDecoder(clazz: PageResourceVideoResource.self) { (source: AnyObject) -> PageResourceVideoResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceVideoResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceWalletTotalResponse]
        Decoders.addDecoder(clazz: [PageResourceWalletTotalResponse].self) { (source: AnyObject) -> [PageResourceWalletTotalResponse] in
            return Decoders.decode(clazz: [PageResourceWalletTotalResponse].self, source: source)
        }
        // Decoder for PageResourceWalletTotalResponse
        Decoders.addDecoder(clazz: PageResourceWalletTotalResponse.self) { (source: AnyObject) -> PageResourceWalletTotalResponse in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceWalletTotalResponse()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourceWalletTransactionResource]
        Decoders.addDecoder(clazz: [PageResourceWalletTransactionResource].self) { (source: AnyObject) -> [PageResourceWalletTransactionResource] in
            return Decoders.decode(clazz: [PageResourceWalletTransactionResource].self, source: source)
        }
        // Decoder for PageResourceWalletTransactionResource
        Decoders.addDecoder(clazz: PageResourceWalletTransactionResource.self) { (source: AnyObject) -> PageResourceWalletTransactionResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourceWalletTransactionResource()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PageResourcestring]
        Decoders.addDecoder(clazz: [PageResourcestring].self) { (source: AnyObject) -> [PageResourcestring] in
            return Decoders.decode(clazz: [PageResourcestring].self, source: source)
        }
        // Decoder for PageResourcestring
        Decoders.addDecoder(clazz: PageResourcestring.self) { (source: AnyObject) -> PageResourcestring in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PageResourcestring()
            instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"] as AnyObject?)
            instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"] as AnyObject?)
            instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            instance.numberOfElements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_elements"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.totalElements = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_elements"] as AnyObject?)
            instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_pages"] as AnyObject?)
            return instance
        }


        // Decoder for [PayBySavedMethodRequest]
        Decoders.addDecoder(clazz: [PayBySavedMethodRequest].self) { (source: AnyObject) -> [PayBySavedMethodRequest] in
            return Decoders.decode(clazz: [PayBySavedMethodRequest].self, source: source)
        }
        // Decoder for PayBySavedMethodRequest
        Decoders.addDecoder(clazz: PayBySavedMethodRequest.self) { (source: AnyObject) -> PayBySavedMethodRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PayBySavedMethodRequest()
            instance.paymentMethod = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["payment_method"] as AnyObject?)
            return instance
        }


        // Decoder for [PaymentAuthorizationResource]
        Decoders.addDecoder(clazz: [PaymentAuthorizationResource].self) { (source: AnyObject) -> [PaymentAuthorizationResource] in
            return Decoders.decode(clazz: [PaymentAuthorizationResource].self, source: source)
        }
        // Decoder for PaymentAuthorizationResource
        Decoders.addDecoder(clazz: PaymentAuthorizationResource.self) { (source: AnyObject) -> PaymentAuthorizationResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PaymentAuthorizationResource()
            instance.captured = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["captured"] as AnyObject?)
            instance.created = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created"] as AnyObject?)
            instance.details = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["details"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.invoice = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice"] as AnyObject?)
            instance.paymentType = Decoders.decodeOptional(clazz: SimpleReferenceResourceint.self, source: sourceDictionary["payment_type"] as AnyObject?)
            return instance
        }


        // Decoder for [PaymentMethodResource]
        Decoders.addDecoder(clazz: [PaymentMethodResource].self) { (source: AnyObject) -> [PaymentMethodResource] in
            return Decoders.decode(clazz: [PaymentMethodResource].self, source: source)
        }
        // Decoder for PaymentMethodResource
        Decoders.addDecoder(clazz: PaymentMethodResource.self) { (source: AnyObject) -> PaymentMethodResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PaymentMethodResource()
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance._default = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["default"] as AnyObject?)
            instance.disabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["disabled"] as AnyObject?)
            instance.expirationDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["expiration_date"] as AnyObject?)
            instance.expirationMonth = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["expiration_month"] as AnyObject?)
            instance.expirationYear = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["expiration_year"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.last4 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last4"] as AnyObject?)
            instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.paymentMethodType = Decoders.decodeOptional(clazz: PaymentMethodTypeResource.self, source: sourceDictionary["payment_method_type"] as AnyObject?)
            if let paymentType = sourceDictionary["payment_type"] as? String { 
                instance.paymentType = PaymentMethodResource.PaymentType(rawValue: (paymentType))
            }
            
            instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"] as AnyObject?)
            instance.uniqueKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_key"] as AnyObject?)
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            instance.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"] as AnyObject?)
            instance.verified = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["verified"] as AnyObject?)
            return instance
        }


        // Decoder for [PaymentMethodTypeResource]
        Decoders.addDecoder(clazz: [PaymentMethodTypeResource].self) { (source: AnyObject) -> [PaymentMethodTypeResource] in
            return Decoders.decode(clazz: [PaymentMethodTypeResource].self, source: source)
        }
        // Decoder for PaymentMethodTypeResource
        Decoders.addDecoder(clazz: PaymentMethodTypeResource.self) { (source: AnyObject) -> PaymentMethodTypeResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PaymentMethodTypeResource()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [Permission]
        Decoders.addDecoder(clazz: [Permission].self) { (source: AnyObject) -> [Permission] in
            return Decoders.decode(clazz: [Permission].self, source: source)
        }
        // Decoder for Permission
        Decoders.addDecoder(clazz: Permission.self) { (source: AnyObject) -> Permission in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Permission()
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.locked = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["locked"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.parent = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["parent"] as AnyObject?)
            instance.permission = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["permission"] as AnyObject?)
            instance.permissionRole = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["permission_role"] as AnyObject?)
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return instance
        }


        // Decoder for [PermissionResource]
        Decoders.addDecoder(clazz: [PermissionResource].self) { (source: AnyObject) -> [PermissionResource] in
            return Decoders.decode(clazz: [PermissionResource].self, source: source)
        }
        // Decoder for PermissionResource
        Decoders.addDecoder(clazz: PermissionResource.self) { (source: AnyObject) -> PermissionResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PermissionResource()
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.locked = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["locked"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.parent = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["parent"] as AnyObject?)
            instance.permission = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["permission"] as AnyObject?)
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return instance
        }


        // Decoder for [PollAnswerResource]
        Decoders.addDecoder(clazz: [PollAnswerResource].self) { (source: AnyObject) -> [PollAnswerResource] in
            return Decoders.decode(clazz: [PollAnswerResource].self, source: source)
        }
        // Decoder for PollAnswerResource
        Decoders.addDecoder(clazz: PollAnswerResource.self) { (source: AnyObject) -> PollAnswerResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PollAnswerResource()
            instance.count = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["count"] as AnyObject?)
            instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"] as AnyObject?)
            instance.text = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["text"] as AnyObject?)
            return instance
        }


        // Decoder for [PollResource]
        Decoders.addDecoder(clazz: [PollResource].self) { (source: AnyObject) -> [PollResource] in
            return Decoders.decode(clazz: [PollResource].self, source: source)
        }
        // Decoder for PollResource
        Decoders.addDecoder(clazz: PollResource.self) { (source: AnyObject) -> PollResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PollResource()
            instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"] as AnyObject?)
            instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            instance.answers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["answers"] as AnyObject?)
            instance.category = Decoders.decodeOptional(clazz: NestedCategory.self, source: sourceDictionary["category"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            instance.text = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["text"] as AnyObject?)
            if let type = sourceDictionary["type"] as? String { 
                instance.type = PollResource.ModelType(rawValue: (type))
            }
            
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return instance
        }


        // Decoder for [PollResponseResource]
        Decoders.addDecoder(clazz: [PollResponseResource].self) { (source: AnyObject) -> [PollResponseResource] in
            return Decoders.decode(clazz: [PollResponseResource].self, source: source)
        }
        // Decoder for PollResponseResource
        Decoders.addDecoder(clazz: PollResponseResource.self) { (source: AnyObject) -> PollResponseResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PollResponseResource()
            instance.answer = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["answer"] as AnyObject?)
            instance.answeredDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["answered_date"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.pollId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["poll_id"] as AnyObject?)
            instance.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"] as AnyObject?)
            return instance
        }


        // Decoder for [PredicateOperation]
        Decoders.addDecoder(clazz: [PredicateOperation].self) { (source: AnyObject) -> [PredicateOperation] in
            return Decoders.decode(clazz: [PredicateOperation].self, source: source)
        }
        // Decoder for PredicateOperation
        Decoders.addDecoder(clazz: PredicateOperation.self) { (source: AnyObject) -> PredicateOperation in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PredicateOperation()
            instance.args = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["args"] as AnyObject?)
            instance._operator = Decoders.decodeOptional(clazz: Operator.self, source: sourceDictionary["operator"] as AnyObject?)
            return instance
        }


        // Decoder for [Property]
        Decoders.addDecoder(clazz: [Property].self) { (source: AnyObject) -> [Property] in
            return Decoders.decode(clazz: [Property].self, source: source)
        }
        // Decoder for Property
        Decoders.addDecoder(clazz: Property.self) { (source: AnyObject) -> Property in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Property()
            instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return instance
        }


        // Decoder for [PropertyDefinitionResource]
        Decoders.addDecoder(clazz: [PropertyDefinitionResource].self) { (source: AnyObject) -> [PropertyDefinitionResource] in
            return Decoders.decode(clazz: [PropertyDefinitionResource].self, source: source)
        }
        // Decoder for PropertyDefinitionResource
        Decoders.addDecoder(clazz: PropertyDefinitionResource.self) { (source: AnyObject) -> PropertyDefinitionResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PropertyDefinitionResource()
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance._required = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["required"] as AnyObject?)
            instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return instance
        }


        // Decoder for [QuestionResource]
        Decoders.addDecoder(clazz: [QuestionResource].self) { (source: AnyObject) -> [QuestionResource] in
            return Decoders.decode(clazz: [QuestionResource].self, source: source)
        }
        // Decoder for QuestionResource
        Decoders.addDecoder(clazz: QuestionResource.self) { (source: AnyObject) -> QuestionResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = QuestionResource()
            instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            instance.answers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["answers"] as AnyObject?)
            instance.category = Decoders.decodeOptional(clazz: NestedCategory.self, source: sourceDictionary["category"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.difficulty = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["difficulty"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.importId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["import_id"] as AnyObject?)
            instance.publishedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["published_date"] as AnyObject?)
            instance.question = Decoders.decodeOptional(clazz: Property.self, source: sourceDictionary["question"] as AnyObject?)
            instance.source1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["source1"] as AnyObject?)
            instance.source2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["source2"] as AnyObject?)
            instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            instance.vendor = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vendor"] as AnyObject?)
            return instance
        }


        // Decoder for [QuestionTemplateResource]
        Decoders.addDecoder(clazz: [QuestionTemplateResource].self) { (source: AnyObject) -> [QuestionTemplateResource] in
            return Decoders.decode(clazz: [QuestionTemplateResource].self, source: source)
        }
        // Decoder for QuestionTemplateResource
        Decoders.addDecoder(clazz: QuestionTemplateResource.self) { (source: AnyObject) -> QuestionTemplateResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = QuestionTemplateResource()
            instance.answerProperty = Decoders.decodeOptional(clazz: PropertyDefinitionResource.self, source: sourceDictionary["answer_property"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"] as AnyObject?)
            instance.questionProperty = Decoders.decodeOptional(clazz: PropertyDefinitionResource.self, source: sourceDictionary["question_property"] as AnyObject?)
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return instance
        }


        // Decoder for [RawEmailResource]
        Decoders.addDecoder(clazz: [RawEmailResource].self) { (source: AnyObject) -> [RawEmailResource] in
            return Decoders.decode(clazz: [RawEmailResource].self, source: source)
        }
        // Decoder for RawEmailResource
        Decoders.addDecoder(clazz: RawEmailResource.self) { (source: AnyObject) -> RawEmailResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = RawEmailResource()
            instance.body = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["body"] as AnyObject?)
            instance.from = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["from"] as AnyObject?)
            instance.html = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["html"] as AnyObject?)
            instance.recipients = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["recipients"] as AnyObject?)
            instance.subject = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subject"] as AnyObject?)
            return instance
        }


        // Decoder for [RawSMSResource]
        Decoders.addDecoder(clazz: [RawSMSResource].self) { (source: AnyObject) -> [RawSMSResource] in
            return Decoders.decode(clazz: [RawSMSResource].self, source: source)
        }
        // Decoder for RawSMSResource
        Decoders.addDecoder(clazz: RawSMSResource.self) { (source: AnyObject) -> RawSMSResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = RawSMSResource()
            instance.from = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["from"] as AnyObject?)
            instance.recipients = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["recipients"] as AnyObject?)
            instance.text = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["text"] as AnyObject?)
            return instance
        }


        // Decoder for [ReactivateSubscriptionRequest]
        Decoders.addDecoder(clazz: [ReactivateSubscriptionRequest].self) { (source: AnyObject) -> [ReactivateSubscriptionRequest] in
            return Decoders.decode(clazz: [ReactivateSubscriptionRequest].self, source: source)
        }
        // Decoder for ReactivateSubscriptionRequest
        Decoders.addDecoder(clazz: ReactivateSubscriptionRequest.self) { (source: AnyObject) -> ReactivateSubscriptionRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ReactivateSubscriptionRequest()
            instance.inventoryId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["inventory_id"] as AnyObject?)
            instance.reactivationFee = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["reactivation_fee"] as AnyObject?)
            return instance
        }


        // Decoder for [RefundRequest]
        Decoders.addDecoder(clazz: [RefundRequest].self) { (source: AnyObject) -> [RefundRequest] in
            return Decoders.decode(clazz: [RefundRequest].self, source: source)
        }
        // Decoder for RefundRequest
        Decoders.addDecoder(clazz: RefundRequest.self) { (source: AnyObject) -> RefundRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = RefundRequest()
            instance.amount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["amount"] as AnyObject?)
            instance.notes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["notes"] as AnyObject?)
            instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"] as AnyObject?)
            return instance
        }


        // Decoder for [RefundResource]
        Decoders.addDecoder(clazz: [RefundResource].self) { (source: AnyObject) -> [RefundResource] in
            return Decoders.decode(clazz: [RefundResource].self, source: source)
        }
        // Decoder for RefundResource
        Decoders.addDecoder(clazz: RefundResource.self) { (source: AnyObject) -> RefundResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = RefundResource()
            instance.amount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["amount"] as AnyObject?)
            instance.refundTransactionId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["refund_transaction_id"] as AnyObject?)
            instance.transactionId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["transaction_id"] as AnyObject?)
            return instance
        }


        // Decoder for [Result]
        Decoders.addDecoder(clazz: [Result].self) { (source: AnyObject) -> [Result] in
            return Decoders.decode(clazz: [Result].self, source: source)
        }
        // Decoder for Result
        Decoders.addDecoder(clazz: Result.self) { (source: AnyObject) -> Result in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Result()
            instance.code = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["code"] as AnyObject?)
            instance.requestId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["request_id"] as AnyObject?)
            instance.result = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["result"] as AnyObject?)
            return instance
        }


        // Decoder for [RevenueCountryReportResource]
        Decoders.addDecoder(clazz: [RevenueCountryReportResource].self) { (source: AnyObject) -> [RevenueCountryReportResource] in
            return Decoders.decode(clazz: [RevenueCountryReportResource].self, source: source)
        }
        // Decoder for RevenueCountryReportResource
        Decoders.addDecoder(clazz: RevenueCountryReportResource.self) { (source: AnyObject) -> RevenueCountryReportResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = RevenueCountryReportResource()
            instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"] as AnyObject?)
            instance.revenue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["revenue"] as AnyObject?)
            instance.volume = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["volume"] as AnyObject?)
            return instance
        }


        // Decoder for [RevenueProductReportResource]
        Decoders.addDecoder(clazz: [RevenueProductReportResource].self) { (source: AnyObject) -> [RevenueProductReportResource] in
            return Decoders.decode(clazz: [RevenueProductReportResource].self, source: source)
        }
        // Decoder for RevenueProductReportResource
        Decoders.addDecoder(clazz: RevenueProductReportResource.self) { (source: AnyObject) -> RevenueProductReportResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = RevenueProductReportResource()
            instance.itemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["item_id"] as AnyObject?)
            instance.itemName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["item_name"] as AnyObject?)
            instance.revenue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["revenue"] as AnyObject?)
            instance.volume = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["volume"] as AnyObject?)
            return instance
        }


        // Decoder for [RevenueReportResource]
        Decoders.addDecoder(clazz: [RevenueReportResource].self) { (source: AnyObject) -> [RevenueReportResource] in
            return Decoders.decode(clazz: [RevenueReportResource].self, source: source)
        }
        // Decoder for RevenueReportResource
        Decoders.addDecoder(clazz: RevenueReportResource.self) { (source: AnyObject) -> RevenueReportResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = RevenueReportResource()
            instance.customerCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["customer_count"] as AnyObject?)
            instance.saleCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["sale_count"] as AnyObject?)
            instance.salesAverage = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["sales_average"] as AnyObject?)
            instance.salesTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["sales_total"] as AnyObject?)
            return instance
        }


        // Decoder for [RewardCurrencyResource]
        Decoders.addDecoder(clazz: [RewardCurrencyResource].self) { (source: AnyObject) -> [RewardCurrencyResource] in
            return Decoders.decode(clazz: [RewardCurrencyResource].self, source: source)
        }
        // Decoder for RewardCurrencyResource
        Decoders.addDecoder(clazz: RewardCurrencyResource.self) { (source: AnyObject) -> RewardCurrencyResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = RewardCurrencyResource()
            instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"] as AnyObject?)
            instance.currencyName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_name"] as AnyObject?)
            instance.maxRank = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_rank"] as AnyObject?)
            instance.minRank = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min_rank"] as AnyObject?)
            instance.percent = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["percent"] as AnyObject?)
            instance.value = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"] as AnyObject?)
            return instance
        }


        // Decoder for [RewardItemResource]
        Decoders.addDecoder(clazz: [RewardItemResource].self) { (source: AnyObject) -> [RewardItemResource] in
            return Decoders.decode(clazz: [RewardItemResource].self, source: source)
        }
        // Decoder for RewardItemResource
        Decoders.addDecoder(clazz: RewardItemResource.self) { (source: AnyObject) -> RewardItemResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = RewardItemResource()
            instance.itemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["item_id"] as AnyObject?)
            instance.itemName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["item_name"] as AnyObject?)
            instance.maxRank = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_rank"] as AnyObject?)
            instance.minRank = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min_rank"] as AnyObject?)
            instance.quantity = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["quantity"] as AnyObject?)
            return instance
        }


        // Decoder for [RewardSetResource]
        Decoders.addDecoder(clazz: [RewardSetResource].self) { (source: AnyObject) -> [RewardSetResource] in
            return Decoders.decode(clazz: [RewardSetResource].self, source: source)
        }
        // Decoder for RewardSetResource
        Decoders.addDecoder(clazz: RewardSetResource.self) { (source: AnyObject) -> RewardSetResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = RewardSetResource()
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.currencyRewards = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["currency_rewards"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.itemRewards = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["item_rewards"] as AnyObject?)
            instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"] as AnyObject?)
            instance.maxPlacing = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_placing"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"] as AnyObject?)
            instance.uniqueKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_key"] as AnyObject?)
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return instance
        }


        // Decoder for [Role]
        Decoders.addDecoder(clazz: [Role].self) { (source: AnyObject) -> [Role] in
            return Decoders.decode(clazz: [Role].self, source: source)
        }
        // Decoder for Role
        Decoders.addDecoder(clazz: Role.self) { (source: AnyObject) -> Role in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Role()
            instance.clientCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["client_count"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.locked = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["locked"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.role = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["role"] as AnyObject?)
            instance.rolePermission = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["role_permission"] as AnyObject?)
            instance.userCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_count"] as AnyObject?)
            return instance
        }


        // Decoder for [RoleResource]
        Decoders.addDecoder(clazz: [RoleResource].self) { (source: AnyObject) -> [RoleResource] in
            return Decoders.decode(clazz: [RoleResource].self, source: source)
        }
        // Decoder for RoleResource
        Decoders.addDecoder(clazz: RoleResource.self) { (source: AnyObject) -> RoleResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = RoleResource()
            instance.clientCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["client_count"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.locked = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["locked"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.role = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["role"] as AnyObject?)
            instance.rolePermission = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["role_permission"] as AnyObject?)
            instance.userCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_count"] as AnyObject?)
            return instance
        }


        // Decoder for [SampleCountriesResponse]
        Decoders.addDecoder(clazz: [SampleCountriesResponse].self) { (source: AnyObject) -> [SampleCountriesResponse] in
            return Decoders.decode(clazz: [SampleCountriesResponse].self, source: source)
        }
        // Decoder for SampleCountriesResponse
        Decoders.addDecoder(clazz: SampleCountriesResponse.self) { (source: AnyObject) -> SampleCountriesResponse in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SampleCountriesResponse()
            instance.vendorId1 = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["vendor_id1"] as AnyObject?)
            instance.vendorId2 = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["vendor_id2"] as AnyObject?)
            return instance
        }


        // Decoder for [SavedAddressResource]
        Decoders.addDecoder(clazz: [SavedAddressResource].self) { (source: AnyObject) -> [SavedAddressResource] in
            return Decoders.decode(clazz: [SavedAddressResource].self, source: source)
        }
        // Decoder for SavedAddressResource
        Decoders.addDecoder(clazz: SavedAddressResource.self) { (source: AnyObject) -> SavedAddressResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SavedAddressResource()
            instance.address1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address1"] as AnyObject?)
            instance.address2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address2"] as AnyObject?)
            instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"] as AnyObject?)
            instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_code"] as AnyObject?)
            instance._default = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["default"] as AnyObject?)
            instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["first_name"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last_name"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.phone1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone1"] as AnyObject?)
            instance.phone2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone2"] as AnyObject?)
            instance.postalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["postal_code"] as AnyObject?)
            instance.stateCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state_code"] as AnyObject?)
            return instance
        }


        // Decoder for [Schedule]
        Decoders.addDecoder(clazz: [Schedule].self) { (source: AnyObject) -> [Schedule] in
            return Decoders.decode(clazz: [Schedule].self, source: source)
        }
        // Decoder for Schedule
        Decoders.addDecoder(clazz: Schedule.self) { (source: AnyObject) -> Schedule in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Schedule()
            instance.duration = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["duration"] as AnyObject?)
            if let durationUnit = sourceDictionary["duration_unit"] as? String { 
                instance.durationUnit = Schedule.DurationUnit(rawValue: (durationUnit))
            }
            
            if let repeat = sourceDictionary["repeat"] as? String { 
                instance.repeat = Schedule.Repeat(rawValue: (repeat))
            }
            
            return instance
        }


        // Decoder for [SearchReferenceMapping]
        Decoders.addDecoder(clazz: [SearchReferenceMapping].self) { (source: AnyObject) -> [SearchReferenceMapping] in
            return Decoders.decode(clazz: [SearchReferenceMapping].self, source: source)
        }
        // Decoder for SearchReferenceMapping
        Decoders.addDecoder(clazz: SearchReferenceMapping.self) { (source: AnyObject) -> SearchReferenceMapping in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SearchReferenceMapping()
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.refIdField = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ref_id_field"] as AnyObject?)
            instance.refType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ref_type"] as AnyObject?)
            instance.sourceFieldToDestinationField = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["source_field_to_destination_field"] as AnyObject?)
            instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return instance
        }


        // Decoder for [SelectedSettingResource]
        Decoders.addDecoder(clazz: [SelectedSettingResource].self) { (source: AnyObject) -> [SelectedSettingResource] in
            return Decoders.decode(clazz: [SelectedSettingResource].self, source: source)
        }
        // Decoder for SelectedSettingResource
        Decoders.addDecoder(clazz: SelectedSettingResource.self) { (source: AnyObject) -> SelectedSettingResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SelectedSettingResource()
            instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"] as AnyObject?)
            instance.keyName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key_name"] as AnyObject?)
            instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"] as AnyObject?)
            instance.valueName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value_name"] as AnyObject?)
            return instance
        }


        // Decoder for [SettingOption]
        Decoders.addDecoder(clazz: [SettingOption].self) { (source: AnyObject) -> [SettingOption] in
            return Decoders.decode(clazz: [SettingOption].self, source: source)
        }
        // Decoder for SettingOption
        Decoders.addDecoder(clazz: SettingOption.self) { (source: AnyObject) -> SettingOption in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SettingOption()
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"] as AnyObject?)
            return instance
        }


        // Decoder for [ShippingItem]
        Decoders.addDecoder(clazz: [ShippingItem].self) { (source: AnyObject) -> [ShippingItem] in
            return Decoders.decode(clazz: [ShippingItem].self, source: source)
        }
        // Decoder for ShippingItem
        Decoders.addDecoder(clazz: ShippingItem.self) { (source: AnyObject) -> ShippingItem in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ShippingItem()
            instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            instance.behaviors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["behaviors"] as AnyObject?)
            instance.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"] as AnyObject?)
            instance.countries = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["countries"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.displayable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["displayable"] as AnyObject?)
            instance.geoCountryList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["geo_country_list"] as AnyObject?)
            if let geoPolicyType = sourceDictionary["geo_policy_type"] as? String { 
                instance.geoPolicyType = ShippingItem.GeoPolicyType(rawValue: (geoPolicyType))
            }
            
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"] as AnyObject?)
            instance.maxTierTotal = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_tier_total"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.shippingTier = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["shipping_tier"] as AnyObject?)
            instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"] as AnyObject?)
            instance.skus = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["skus"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.storeEnd = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["store_end"] as AnyObject?)
            instance.storeStart = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["store_start"] as AnyObject?)
            instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            instance.taxable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["taxable"] as AnyObject?)
            instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            instance.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"] as AnyObject?)
            instance.uniqueKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_key"] as AnyObject?)
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            instance.vendorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vendor_id"] as AnyObject?)
            return instance
        }


        // Decoder for [SimpleReferenceResourceint]
        Decoders.addDecoder(clazz: [SimpleReferenceResourceint].self) { (source: AnyObject) -> [SimpleReferenceResourceint] in
            return Decoders.decode(clazz: [SimpleReferenceResourceint].self, source: source)
        }
        // Decoder for SimpleReferenceResourceint
        Decoders.addDecoder(clazz: SimpleReferenceResourceint.self) { (source: AnyObject) -> SimpleReferenceResourceint in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SimpleReferenceResourceint()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [SimpleReferenceResourcelong]
        Decoders.addDecoder(clazz: [SimpleReferenceResourcelong].self) { (source: AnyObject) -> [SimpleReferenceResourcelong] in
            return Decoders.decode(clazz: [SimpleReferenceResourcelong].self, source: source)
        }
        // Decoder for SimpleReferenceResourcelong
        Decoders.addDecoder(clazz: SimpleReferenceResourcelong.self) { (source: AnyObject) -> SimpleReferenceResourcelong in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SimpleReferenceResourcelong()
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [SimpleReferenceResourcestring]
        Decoders.addDecoder(clazz: [SimpleReferenceResourcestring].self) { (source: AnyObject) -> [SimpleReferenceResourcestring] in
            return Decoders.decode(clazz: [SimpleReferenceResourcestring].self, source: source)
        }
        // Decoder for SimpleReferenceResourcestring
        Decoders.addDecoder(clazz: SimpleReferenceResourcestring.self) { (source: AnyObject) -> SimpleReferenceResourcestring in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SimpleReferenceResourcestring()
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [SimpleUserResource]
        Decoders.addDecoder(clazz: [SimpleUserResource].self) { (source: AnyObject) -> [SimpleUserResource] in
            return Decoders.decode(clazz: [SimpleUserResource].self, source: source)
        }
        // Decoder for SimpleUserResource
        Decoders.addDecoder(clazz: SimpleUserResource.self) { (source: AnyObject) -> SimpleUserResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SimpleUserResource()
            instance.avatarUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["avatar_url"] as AnyObject?)
            instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["display_name"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"] as AnyObject?)
            return instance
        }


        // Decoder for [SimpleWallet]
        Decoders.addDecoder(clazz: [SimpleWallet].self) { (source: AnyObject) -> [SimpleWallet] in
            return Decoders.decode(clazz: [SimpleWallet].self, source: source)
        }
        // Decoder for SimpleWallet
        Decoders.addDecoder(clazz: SimpleWallet.self) { (source: AnyObject) -> SimpleWallet in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SimpleWallet()
            instance.balance = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["balance"] as AnyObject?)
            instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            instance.currencyName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_name"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"] as AnyObject?)
            return instance
        }


        // Decoder for [Sku]
        Decoders.addDecoder(clazz: [Sku].self) { (source: AnyObject) -> [Sku] in
            return Decoders.decode(clazz: [Sku].self, source: source)
        }
        // Decoder for Sku
        Decoders.addDecoder(clazz: Sku.self) { (source: AnyObject) -> Sku in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Sku()
            instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.inventory = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["inventory"] as AnyObject?)
            instance.minInventoryThreshold = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min_inventory_threshold"] as AnyObject?)
            instance.originalPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["original_price"] as AnyObject?)
            instance.price = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price"] as AnyObject?)
            instance.published = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["published"] as AnyObject?)
            instance.saleId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sale_id"] as AnyObject?)
            instance.saleName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sale_name"] as AnyObject?)
            instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"] as AnyObject?)
            instance.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["start_date"] as AnyObject?)
            instance.stopDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["stop_date"] as AnyObject?)
            return instance
        }


        // Decoder for [SkuRequest]
        Decoders.addDecoder(clazz: [SkuRequest].self) { (source: AnyObject) -> [SkuRequest] in
            return Decoders.decode(clazz: [SkuRequest].self, source: source)
        }
        // Decoder for SkuRequest
        Decoders.addDecoder(clazz: SkuRequest.self) { (source: AnyObject) -> SkuRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SkuRequest()
            instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"] as AnyObject?)
            return instance
        }


        // Decoder for [SqlDatabaseConfig]
        Decoders.addDecoder(clazz: [SqlDatabaseConfig].self) { (source: AnyObject) -> [SqlDatabaseConfig] in
            return Decoders.decode(clazz: [SqlDatabaseConfig].self, source: source)
        }
        // Decoder for SqlDatabaseConfig
        Decoders.addDecoder(clazz: SqlDatabaseConfig.self) { (source: AnyObject) -> SqlDatabaseConfig in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SqlDatabaseConfig()
            instance.connectionPoolSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["connection_pool_size"] as AnyObject?)
            instance.connectionString = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["connection_string"] as AnyObject?)
            instance.dbName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["db_name"] as AnyObject?)
            instance.hostname = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["hostname"] as AnyObject?)
            instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"] as AnyObject?)
            instance.port = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["port"] as AnyObject?)
            instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"] as AnyObject?)
            return instance
        }


        // Decoder for [StateResource]
        Decoders.addDecoder(clazz: [StateResource].self) { (source: AnyObject) -> [StateResource] in
            return Decoders.decode(clazz: [StateResource].self, source: source)
        }
        // Decoder for StateResource
        Decoders.addDecoder(clazz: StateResource.self) { (source: AnyObject) -> StateResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = StateResource()
            instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            instance.countryCodeIso3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_code_iso3"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [StateTaxResource]
        Decoders.addDecoder(clazz: [StateTaxResource].self) { (source: AnyObject) -> [StateTaxResource] in
            return Decoders.decode(clazz: [StateTaxResource].self, source: source)
        }
        // Decoder for StateTaxResource
        Decoders.addDecoder(clazz: StateTaxResource.self) { (source: AnyObject) -> StateTaxResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = StateTaxResource()
            instance.countryIso3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_iso3"] as AnyObject?)
            instance.federallyExempt = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["federally_exempt"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.rate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rate"] as AnyObject?)
            instance.stateCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state_code"] as AnyObject?)
            instance.taxShipping = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["tax_shipping"] as AnyObject?)
            return instance
        }


        // Decoder for [StoreItem]
        Decoders.addDecoder(clazz: [StoreItem].self) { (source: AnyObject) -> [StoreItem] in
            return Decoders.decode(clazz: [StoreItem].self, source: source)
        }
        // Decoder for StoreItem
        Decoders.addDecoder(clazz: StoreItem.self) { (source: AnyObject) -> StoreItem in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = StoreItem()
            instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            instance.behaviors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["behaviors"] as AnyObject?)
            instance.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.displayable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["displayable"] as AnyObject?)
            instance.geoCountryList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["geo_country_list"] as AnyObject?)
            if let geoPolicyType = sourceDictionary["geo_policy_type"] as? String { 
                instance.geoPolicyType = StoreItem.GeoPolicyType(rawValue: (geoPolicyType))
            }
            
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.shippingTier = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["shipping_tier"] as AnyObject?)
            instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"] as AnyObject?)
            instance.skus = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["skus"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.storeEnd = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["store_end"] as AnyObject?)
            instance.storeStart = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["store_start"] as AnyObject?)
            instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            instance.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"] as AnyObject?)
            instance.uniqueKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_key"] as AnyObject?)
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            instance.vendorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vendor_id"] as AnyObject?)
            return instance
        }


        // Decoder for [StoreItemTemplateResource]
        Decoders.addDecoder(clazz: [StoreItemTemplateResource].self) { (source: AnyObject) -> [StoreItemTemplateResource] in
            return Decoders.decode(clazz: [StoreItemTemplateResource].self, source: source)
        }
        // Decoder for StoreItemTemplateResource
        Decoders.addDecoder(clazz: StoreItemTemplateResource.self) { (source: AnyObject) -> StoreItemTemplateResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = StoreItemTemplateResource()
            instance.behaviors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["behaviors"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"] as AnyObject?)
            instance.skuTemplate = Decoders.decodeOptional(clazz: TemplateResource.self, source: sourceDictionary["sku_template"] as AnyObject?)
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return instance
        }


        // Decoder for [StripeCreatePaymentMethod]
        Decoders.addDecoder(clazz: [StripeCreatePaymentMethod].self) { (source: AnyObject) -> [StripeCreatePaymentMethod] in
            return Decoders.decode(clazz: [StripeCreatePaymentMethod].self, source: source)
        }
        // Decoder for StripeCreatePaymentMethod
        Decoders.addDecoder(clazz: StripeCreatePaymentMethod.self) { (source: AnyObject) -> StripeCreatePaymentMethod in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = StripeCreatePaymentMethod()
            instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"] as AnyObject?)
            instance.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"] as AnyObject?)
            return instance
        }


        // Decoder for [StripePaymentRequest]
        Decoders.addDecoder(clazz: [StripePaymentRequest].self) { (source: AnyObject) -> [StripePaymentRequest] in
            return Decoders.decode(clazz: [StripePaymentRequest].self, source: source)
        }
        // Decoder for StripePaymentRequest
        Decoders.addDecoder(clazz: StripePaymentRequest.self) { (source: AnyObject) -> StripePaymentRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = StripePaymentRequest()
            instance.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"] as AnyObject?)
            instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"] as AnyObject?)
            return instance
        }


        // Decoder for [SubscriptionCreditResource]
        Decoders.addDecoder(clazz: [SubscriptionCreditResource].self) { (source: AnyObject) -> [SubscriptionCreditResource] in
            return Decoders.decode(clazz: [SubscriptionCreditResource].self, source: source)
        }
        // Decoder for SubscriptionCreditResource
        Decoders.addDecoder(clazz: SubscriptionCreditResource.self) { (source: AnyObject) -> SubscriptionCreditResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SubscriptionCreditResource()
            instance.amount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["amount"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.inventoryId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["inventory_id"] as AnyObject?)
            instance.reason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reason"] as AnyObject?)
            return instance
        }


        // Decoder for [SubscriptionPlanResource]
        Decoders.addDecoder(clazz: [SubscriptionPlanResource].self) { (source: AnyObject) -> [SubscriptionPlanResource] in
            return Decoders.decode(clazz: [SubscriptionPlanResource].self, source: source)
        }
        // Decoder for SubscriptionPlanResource
        Decoders.addDecoder(clazz: SubscriptionPlanResource.self) { (source: AnyObject) -> SubscriptionPlanResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SubscriptionPlanResource()
            instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            instance.billingCycleLength = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["billing_cycle_length"] as AnyObject?)
            if let billingCycleUnit = sourceDictionary["billing_cycle_unit"] as? String { 
                instance.billingCycleUnit = SubscriptionPlanResource.BillingCycleUnit(rawValue: (billingCycleUnit))
            }
            
            instance.consolidated = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["consolidated"] as AnyObject?)
            instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"] as AnyObject?)
            instance.endDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["end_date"] as AnyObject?)
            instance.firstBillingCycleLength = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["first_billing_cycle_length"] as AnyObject?)
            if let firstBillingCycleUnit = sourceDictionary["first_billing_cycle_unit"] as? String { 
                instance.firstBillingCycleUnit = SubscriptionPlanResource.FirstBillingCycleUnit(rawValue: (firstBillingCycleUnit))
            }
            
            instance.gracePeriod = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["grace_period"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.initialFee = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["initial_fee"] as AnyObject?)
            instance.initialSku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["initial_sku"] as AnyObject?)
            instance.latePaymentFee = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["late_payment_fee"] as AnyObject?)
            instance.latePaymentSku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["late_payment_sku"] as AnyObject?)
            instance.locked = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["locked"] as AnyObject?)
            instance.maxBillAttempts = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_bill_attempts"] as AnyObject?)
            instance.maxCycles = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_cycles"] as AnyObject?)
            instance.migrateToPlan = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["migrate_to_plan"] as AnyObject?)
            instance.minCycles = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min_cycles"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.published = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["published"] as AnyObject?)
            instance.reactivationFee = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["reactivation_fee"] as AnyObject?)
            instance.reactivationSku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reactivation_sku"] as AnyObject?)
            instance.recurringFee = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["recurring_fee"] as AnyObject?)
            instance.recurringSku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["recurring_sku"] as AnyObject?)
            instance.startDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["start_date"] as AnyObject?)
            return instance
        }


        // Decoder for [SubscriptionResource]
        Decoders.addDecoder(clazz: [SubscriptionResource].self) { (source: AnyObject) -> [SubscriptionResource] in
            return Decoders.decode(clazz: [SubscriptionResource].self, source: source)
        }
        // Decoder for SubscriptionResource
        Decoders.addDecoder(clazz: SubscriptionResource.self) { (source: AnyObject) -> SubscriptionResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SubscriptionResource()
            instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            if let availability = sourceDictionary["availability"] as? String { 
                instance.availability = SubscriptionResource.Availability(rawValue: (availability))
            }
            
            instance.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"] as AnyObject?)
            instance.consolidationDayOfMonth = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["consolidation_day_of_month"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.geoCountryList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["geo_country_list"] as AnyObject?)
            if let geoPolicyType = sourceDictionary["geo_policy_type"] as? String { 
                instance.geoPolicyType = SubscriptionResource.GeoPolicyType(rawValue: (geoPolicyType))
            }
            
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.plans = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["plans"] as AnyObject?)
            instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.storeEnd = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["store_end"] as AnyObject?)
            instance.storeStart = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["store_start"] as AnyObject?)
            instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            instance.uniqueKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unique_key"] as AnyObject?)
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            instance.vendorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vendor_id"] as AnyObject?)
            return instance
        }


        // Decoder for [SubscriptionTemplateResource]
        Decoders.addDecoder(clazz: [SubscriptionTemplateResource].self) { (source: AnyObject) -> [SubscriptionTemplateResource] in
            return Decoders.decode(clazz: [SubscriptionTemplateResource].self, source: source)
        }
        // Decoder for SubscriptionTemplateResource
        Decoders.addDecoder(clazz: SubscriptionTemplateResource.self) { (source: AnyObject) -> SubscriptionTemplateResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SubscriptionTemplateResource()
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.planTemplate = Decoders.decodeOptional(clazz: TemplateResource.self, source: sourceDictionary["plan_template"] as AnyObject?)
            instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"] as AnyObject?)
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return instance
        }


        // Decoder for [TemplateEmailResource]
        Decoders.addDecoder(clazz: [TemplateEmailResource].self) { (source: AnyObject) -> [TemplateEmailResource] in
            return Decoders.decode(clazz: [TemplateEmailResource].self, source: source)
        }
        // Decoder for TemplateEmailResource
        Decoders.addDecoder(clazz: TemplateEmailResource.self) { (source: AnyObject) -> TemplateEmailResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = TemplateEmailResource()
            instance.from = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["from"] as AnyObject?)
            instance.recipients = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["recipients"] as AnyObject?)
            instance.templateKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template_key"] as AnyObject?)
            instance.templateVars = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["template_vars"] as AnyObject?)
            return instance
        }


        // Decoder for [TemplateResource]
        Decoders.addDecoder(clazz: [TemplateResource].self) { (source: AnyObject) -> [TemplateResource] in
            return Decoders.decode(clazz: [TemplateResource].self, source: source)
        }
        // Decoder for TemplateResource
        Decoders.addDecoder(clazz: TemplateResource.self) { (source: AnyObject) -> TemplateResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = TemplateResource()
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"] as AnyObject?)
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return instance
        }


        // Decoder for [TemplateSMSResource]
        Decoders.addDecoder(clazz: [TemplateSMSResource].self) { (source: AnyObject) -> [TemplateSMSResource] in
            return Decoders.decode(clazz: [TemplateSMSResource].self, source: source)
        }
        // Decoder for TemplateSMSResource
        Decoders.addDecoder(clazz: TemplateSMSResource.self) { (source: AnyObject) -> TemplateSMSResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = TemplateSMSResource()
            instance.from = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["from"] as AnyObject?)
            instance.localizer = Decoders.decodeOptional(clazz: Localizer.self, source: sourceDictionary["localizer"] as AnyObject?)
            instance.recipients = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["recipients"] as AnyObject?)
            instance.templateKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template_key"] as AnyObject?)
            instance.templateVars = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["template_vars"] as AnyObject?)
            return instance
        }


        // Decoder for [TierResource]
        Decoders.addDecoder(clazz: [TierResource].self) { (source: AnyObject) -> [TierResource] in
            return Decoders.decode(clazz: [TierResource].self, source: source)
        }
        // Decoder for TierResource
        Decoders.addDecoder(clazz: TierResource.self) { (source: AnyObject) -> TierResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = TierResource()
            instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.requiredProgress = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["required_progress"] as AnyObject?)
            instance.triggerEventName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trigger_event_name"] as AnyObject?)
            return instance
        }


        // Decoder for [Timezone]
        Decoders.addDecoder(clazz: [Timezone].self) { (source: AnyObject) -> [Timezone] in
            return Decoders.decode(clazz: [Timezone].self, source: source)
        }
        // Decoder for Timezone
        Decoders.addDecoder(clazz: Timezone.self) { (source: AnyObject) -> Timezone in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Timezone()
            instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.offset = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["offset"] as AnyObject?)
            return instance
        }


        // Decoder for [TokenDetailsResource]
        Decoders.addDecoder(clazz: [TokenDetailsResource].self) { (source: AnyObject) -> [TokenDetailsResource] in
            return Decoders.decode(clazz: [TokenDetailsResource].self, source: source)
        }
        // Decoder for TokenDetailsResource
        Decoders.addDecoder(clazz: TokenDetailsResource.self) { (source: AnyObject) -> TokenDetailsResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = TokenDetailsResource()
            instance.roles = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["roles"] as AnyObject?)
            instance.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"] as AnyObject?)
            return instance
        }


        // Decoder for [TransactionResource]
        Decoders.addDecoder(clazz: [TransactionResource].self) { (source: AnyObject) -> [TransactionResource] in
            return Decoders.decode(clazz: [TransactionResource].self, source: source)
        }
        // Decoder for TransactionResource
        Decoders.addDecoder(clazz: TransactionResource.self) { (source: AnyObject) -> TransactionResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = TransactionResource()
            instance.createDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["create_date"] as AnyObject?)
            instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"] as AnyObject?)
            instance.details = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["details"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"] as AnyObject?)
            instance.isRefunded = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_refunded"] as AnyObject?)
            instance.response = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["response"] as AnyObject?)
            if let source = sourceDictionary["source"] as? String { 
                instance.source = TransactionResource.Source(rawValue: (source))
            }
            
            instance.successful = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["successful"] as AnyObject?)
            instance.transactionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["transaction_id"] as AnyObject?)
            instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            instance.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"] as AnyObject?)
            instance.value = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"] as AnyObject?)
            return instance
        }


        // Decoder for [UsageInfo]
        Decoders.addDecoder(clazz: [UsageInfo].self) { (source: AnyObject) -> [UsageInfo] in
            return Decoders.decode(clazz: [UsageInfo].self, source: source)
        }
        // Decoder for UsageInfo
        Decoders.addDecoder(clazz: UsageInfo.self) { (source: AnyObject) -> UsageInfo in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = UsageInfo()
            instance.count = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["count"] as AnyObject?)
            instance.date = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["date"] as AnyObject?)
            instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"] as AnyObject?)
            instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?)
            return instance
        }


        // Decoder for [User]
        Decoders.addDecoder(clazz: [User].self) { (source: AnyObject) -> [User] in
            return Decoders.decode(clazz: [User].self, source: source)
        }
        // Decoder for User
        Decoders.addDecoder(clazz: User.self) { (source: AnyObject) -> User in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = User()
            instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"] as AnyObject?)
            instance.address2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address2"] as AnyObject?)
            instance.affiliate = Decoders.decodeOptional(clazz: Affiliate.self, source: sourceDictionary["affiliate"] as AnyObject?)
            instance.avatarUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["avatar_url"] as AnyObject?)
            instance.children = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["children"] as AnyObject?)
            instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"] as AnyObject?)
            instance.country = Decoders.decodeOptional(clazz: Country.self, source: sourceDictionary["country"] as AnyObject?)
            instance.currency = Decoders.decodeOptional(clazz: Currency.self, source: sourceDictionary["currency"] as AnyObject?)
            instance.dateCreated = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["date_created"] as AnyObject?)
            instance.dateOfBirth = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["date_of_birth"] as AnyObject?)
            instance.dateUpdated = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["date_updated"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["display_name"] as AnyObject?)
            instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"] as AnyObject?)
            instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["first_name"] as AnyObject?)
            instance.fullname = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullname"] as AnyObject?)
            instance.gender = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gender"] as AnyObject?)
            instance.groups = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["groups"] as AnyObject?)
            instance.guest = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["guest"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.inviteToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["invite_token"] as AnyObject?)
            instance.lang = Decoders.decodeOptional(clazz: Language.self, source: sourceDictionary["lang"] as AnyObject?)
            instance.lastActivity = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["last_activity"] as AnyObject?)
            instance.lastLogin = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["last_login"] as AnyObject?)
            instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last_name"] as AnyObject?)
            instance.lockoutAttempts = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["lockout_attempts"] as AnyObject?)
            instance.lockoutDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["lockout_date"] as AnyObject?)
            instance.mobileNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mobile_number"] as AnyObject?)
            instance.oldId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["old_id"] as AnyObject?)
            instance.parents = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["parents"] as AnyObject?)
            instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"] as AnyObject?)
            instance.postalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["postal_code"] as AnyObject?)
            instance.propertiesString = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["properties_string"] as AnyObject?)
            instance.roles = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["roles"] as AnyObject?)
            instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"] as AnyObject?)
            instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"] as AnyObject?)
            instance.tagStrings = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tag_strings"] as AnyObject?)
            instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            instance.timezone = Decoders.decodeOptional(clazz: Timezone.self, source: sourceDictionary["timezone"] as AnyObject?)
            instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"] as AnyObject?)
            instance.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"] as AnyObject?)
            instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"] as AnyObject?)
            return instance
        }


        // Decoder for [UserAchievementGroupResource]
        Decoders.addDecoder(clazz: [UserAchievementGroupResource].self) { (source: AnyObject) -> [UserAchievementGroupResource] in
            return Decoders.decode(clazz: [UserAchievementGroupResource].self, source: source)
        }
        // Decoder for UserAchievementGroupResource
        Decoders.addDecoder(clazz: UserAchievementGroupResource.self) { (source: AnyObject) -> UserAchievementGroupResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = UserAchievementGroupResource()
            instance.achievements = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["achievements"] as AnyObject?)
            instance.groupName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["group_name"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.progress = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["progress"] as AnyObject?)
            instance.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"] as AnyObject?)
            return instance
        }


        // Decoder for [UserAchievementResource]
        Decoders.addDecoder(clazz: [UserAchievementResource].self) { (source: AnyObject) -> [UserAchievementResource] in
            return Decoders.decode(clazz: [UserAchievementResource].self, source: source)
        }
        // Decoder for UserAchievementResource
        Decoders.addDecoder(clazz: UserAchievementResource.self) { (source: AnyObject) -> UserAchievementResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = UserAchievementResource()
            instance.achieved = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["achieved"] as AnyObject?)
            instance.achievementName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["achievement_name"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.earnedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["earned_date"] as AnyObject?)
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            return instance
        }


        // Decoder for [UserActionLog]
        Decoders.addDecoder(clazz: [UserActionLog].self) { (source: AnyObject) -> [UserActionLog] in
            return Decoders.decode(clazz: [UserActionLog].self, source: source)
        }
        // Decoder for UserActionLog
        Decoders.addDecoder(clazz: UserActionLog.self) { (source: AnyObject) -> UserActionLog in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = UserActionLog()
            instance.actionDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["action_description"] as AnyObject?)
            instance.actionName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["action_name"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.details = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["details"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.requestId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["request_id"] as AnyObject?)
            instance.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"] as AnyObject?)
            return instance
        }


        // Decoder for [UserActivityResultsResource]
        Decoders.addDecoder(clazz: [UserActivityResultsResource].self) { (source: AnyObject) -> [UserActivityResultsResource] in
            return Decoders.decode(clazz: [UserActivityResultsResource].self, source: source)
        }
        // Decoder for UserActivityResultsResource
        Decoders.addDecoder(clazz: UserActivityResultsResource.self) { (source: AnyObject) -> UserActivityResultsResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = UserActivityResultsResource()
            instance.currencyRewards = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["currency_rewards"] as AnyObject?)
            instance.itemRewards = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["item_rewards"] as AnyObject?)
            instance.rank = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["rank"] as AnyObject?)
            instance.score = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["score"] as AnyObject?)
            instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            instance.ties = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ties"] as AnyObject?)
            instance.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"] as AnyObject?)
            return instance
        }


        // Decoder for [UserBaseResource]
        Decoders.addDecoder(clazz: [UserBaseResource].self) { (source: AnyObject) -> [UserBaseResource] in
            return Decoders.decode(clazz: [UserBaseResource].self, source: source)
        }
        // Decoder for UserBaseResource
        Decoders.addDecoder(clazz: UserBaseResource.self) { (source: AnyObject) -> UserBaseResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = UserBaseResource()
            instance.avatarUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["avatar_url"] as AnyObject?)
            instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["display_name"] as AnyObject?)
            instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"] as AnyObject?)
            instance.fullname = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullname"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"] as AnyObject?)
            return instance
        }


        // Decoder for [UserInventoryAddRequest]
        Decoders.addDecoder(clazz: [UserInventoryAddRequest].self) { (source: AnyObject) -> [UserInventoryAddRequest] in
            return Decoders.decode(clazz: [UserInventoryAddRequest].self, source: source)
        }
        // Decoder for UserInventoryAddRequest
        Decoders.addDecoder(clazz: UserInventoryAddRequest.self) { (source: AnyObject) -> UserInventoryAddRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = UserInventoryAddRequest()
            instance.note = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["note"] as AnyObject?)
            instance.overrides = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["overrides"] as AnyObject?)
            instance.skipInvoice = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["skip_invoice"] as AnyObject?)
            instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"] as AnyObject?)
            return instance
        }


        // Decoder for [UserInventoryResource]
        Decoders.addDecoder(clazz: [UserInventoryResource].self) { (source: AnyObject) -> [UserInventoryResource] in
            return Decoders.decode(clazz: [UserInventoryResource].self, source: source)
        }
        // Decoder for UserInventoryResource
        Decoders.addDecoder(clazz: UserInventoryResource.self) { (source: AnyObject) -> UserInventoryResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = UserInventoryResource()
            instance.behaviorData = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["behavior_data"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.expires = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["expires"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"] as AnyObject?)
            instance.itemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["item_id"] as AnyObject?)
            instance.itemName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["item_name"] as AnyObject?)
            instance.itemTypeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["item_type_hint"] as AnyObject?)
            if let status = sourceDictionary["status"] as? String { 
                instance.status = UserInventoryResource.Status(rawValue: (status))
            }
            
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            instance.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"] as AnyObject?)
            return instance
        }


        // Decoder for [UserItemLogResource]
        Decoders.addDecoder(clazz: [UserItemLogResource].self) { (source: AnyObject) -> [UserItemLogResource] in
            return Decoders.decode(clazz: [UserItemLogResource].self, source: source)
        }
        // Decoder for UserItemLogResource
        Decoders.addDecoder(clazz: UserItemLogResource.self) { (source: AnyObject) -> UserItemLogResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = UserItemLogResource()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.info = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["info"] as AnyObject?)
            instance.item = Decoders.decodeOptional(clazz: SimpleReferenceResourceint.self, source: sourceDictionary["item"] as AnyObject?)
            instance.logDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["log_date"] as AnyObject?)
            instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            instance.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"] as AnyObject?)
            instance.userInventory = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_inventory"] as AnyObject?)
            return instance
        }


        // Decoder for [UserLevelingResource]
        Decoders.addDecoder(clazz: [UserLevelingResource].self) { (source: AnyObject) -> [UserLevelingResource] in
            return Decoders.decode(clazz: [UserLevelingResource].self, source: source)
        }
        // Decoder for UserLevelingResource
        Decoders.addDecoder(clazz: UserLevelingResource.self) { (source: AnyObject) -> UserLevelingResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = UserLevelingResource()
            instance.lastTierName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last_tier_name"] as AnyObject?)
            instance.lastTierProgress = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["last_tier_progress"] as AnyObject?)
            instance.levelName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["level_name"] as AnyObject?)
            instance.nextTierName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["next_tier_name"] as AnyObject?)
            instance.nextTierProgress = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["next_tier_progress"] as AnyObject?)
            instance.progress = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["progress"] as AnyObject?)
            instance.tierNames = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tier_names"] as AnyObject?)
            instance.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["user_id"] as AnyObject?)
            return instance
        }


        // Decoder for [UserRelationship]
        Decoders.addDecoder(clazz: [UserRelationship].self) { (source: AnyObject) -> [UserRelationship] in
            return Decoders.decode(clazz: [UserRelationship].self, source: source)
        }
        // Decoder for UserRelationship
        Decoders.addDecoder(clazz: UserRelationship.self) { (source: AnyObject) -> UserRelationship in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = UserRelationship()
            instance.child = Decoders.decodeOptional(clazz: User.self, source: sourceDictionary["child"] as AnyObject?)
            instance.context = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.parent = Decoders.decodeOptional(clazz: User.self, source: sourceDictionary["parent"] as AnyObject?)
            return instance
        }


        // Decoder for [UserRelationshipReferenceResource]
        Decoders.addDecoder(clazz: [UserRelationshipReferenceResource].self) { (source: AnyObject) -> [UserRelationshipReferenceResource] in
            return Decoders.decode(clazz: [UserRelationshipReferenceResource].self, source: source)
        }
        // Decoder for UserRelationshipReferenceResource
        Decoders.addDecoder(clazz: UserRelationshipReferenceResource.self) { (source: AnyObject) -> UserRelationshipReferenceResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = UserRelationshipReferenceResource()
            instance.avatarUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["avatar_url"] as AnyObject?)
            instance.context = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context"] as AnyObject?)
            instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["display_name"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.relationshipId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["relationship_id"] as AnyObject?)
            instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"] as AnyObject?)
            return instance
        }


        // Decoder for [UserRelationshipResource]
        Decoders.addDecoder(clazz: [UserRelationshipResource].self) { (source: AnyObject) -> [UserRelationshipResource] in
            return Decoders.decode(clazz: [UserRelationshipResource].self, source: source)
        }
        // Decoder for UserRelationshipResource
        Decoders.addDecoder(clazz: UserRelationshipResource.self) { (source: AnyObject) -> UserRelationshipResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = UserRelationshipResource()
            instance.child = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["child"] as AnyObject?)
            instance.context = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.parent = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["parent"] as AnyObject?)
            return instance
        }


        // Decoder for [UserResource]
        Decoders.addDecoder(clazz: [UserResource].self) { (source: AnyObject) -> [UserResource] in
            return Decoders.decode(clazz: [UserResource].self, source: source)
        }
        // Decoder for UserResource
        Decoders.addDecoder(clazz: UserResource.self) { (source: AnyObject) -> UserResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = UserResource()
            instance.additionalProperties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_properties"] as AnyObject?)
            instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"] as AnyObject?)
            instance.address2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address2"] as AnyObject?)
            instance.avatarUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["avatar_url"] as AnyObject?)
            instance.children = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["children"] as AnyObject?)
            instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"] as AnyObject?)
            instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_code"] as AnyObject?)
            instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"] as AnyObject?)
            instance.dateOfBirth = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["date_of_birth"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["display_name"] as AnyObject?)
            instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"] as AnyObject?)
            instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["first_name"] as AnyObject?)
            instance.fullname = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullname"] as AnyObject?)
            instance.gender = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gender"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.languageCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["language_code"] as AnyObject?)
            instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last_name"] as AnyObject?)
            instance.mobileNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mobile_number"] as AnyObject?)
            instance.parents = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["parents"] as AnyObject?)
            instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"] as AnyObject?)
            instance.postalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["postal_code"] as AnyObject?)
            instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"] as AnyObject?)
            instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            instance.template = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["template"] as AnyObject?)
            instance.timezoneCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timezone_code"] as AnyObject?)
            instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"] as AnyObject?)
            return instance
        }


        // Decoder for [UserTag]
        Decoders.addDecoder(clazz: [UserTag].self) { (source: AnyObject) -> [UserTag] in
            return Decoders.decode(clazz: [UserTag].self, source: source)
        }
        // Decoder for UserTag
        Decoders.addDecoder(clazz: UserTag.self) { (source: AnyObject) -> UserTag in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = UserTag()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.tag = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tag"] as AnyObject?)
            instance.user = Decoders.decodeOptional(clazz: User.self, source: sourceDictionary["user"] as AnyObject?)
            return instance
        }


        // Decoder for [VariableTypeResource]
        Decoders.addDecoder(clazz: [VariableTypeResource].self) { (source: AnyObject) -> [VariableTypeResource] in
            return Decoders.decode(clazz: [VariableTypeResource].self, source: source)
        }
        // Decoder for VariableTypeResource
        Decoders.addDecoder(clazz: VariableTypeResource.self) { (source: AnyObject) -> VariableTypeResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = VariableTypeResource()
            if let base = sourceDictionary["base"] as? String { 
                instance.base = VariableTypeResource.Base(rawValue: (base))
            }
            
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [VendorResource]
        Decoders.addDecoder(clazz: [VendorResource].self) { (source: AnyObject) -> [VendorResource] in
            return Decoders.decode(clazz: [VendorResource].self, source: source)
        }
        // Decoder for VendorResource
        Decoders.addDecoder(clazz: VendorResource.self) { (source: AnyObject) -> VendorResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = VendorResource()
            instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"] as AnyObject?)
            instance.createDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["create_date"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.imageUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["image_url"] as AnyObject?)
            instance.manualApproval = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["manual_approval"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.primaryContactEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["primary_contact_email"] as AnyObject?)
            instance.primaryContactName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["primary_contact_name"] as AnyObject?)
            instance.primaryContactPhone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["primary_contact_phone"] as AnyObject?)
            instance.salesEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sales_email"] as AnyObject?)
            instance.supportEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["support_email"] as AnyObject?)
            instance.updateDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["update_date"] as AnyObject?)
            instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?)
            return instance
        }


        // Decoder for [Video]
        Decoders.addDecoder(clazz: [Video].self) { (source: AnyObject) -> [Video] in
            return Decoders.decode(clazz: [Video].self, source: source)
        }
        // Decoder for Video
        Decoders.addDecoder(clazz: Video.self) { (source: AnyObject) -> Video in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Video()
            instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"] as AnyObject?)
            instance.author = Decoders.decodeOptional(clazz: Artist.self, source: sourceDictionary["author"] as AnyObject?)
            instance.authored = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["authored"] as AnyObject?)
            instance.banned = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["banned"] as AnyObject?)
            instance.categoryId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category_id"] as AnyObject?)
            instance.categoryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category_name"] as AnyObject?)
            instance.contributors = Decoders.decodeOptional(clazz: CollectionVideoContribution.self, source: sourceDictionary["contributors"] as AnyObject?)
            instance.created = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created"] as AnyObject?)
            instance.embed = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["embed"] as AnyObject?)
            instance._extension = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["extension"] as AnyObject?)
            instance.height = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["height"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.length = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["length"] as AnyObject?)
            instance.location = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["location"] as AnyObject?)
            instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"] as AnyObject?)
            instance.mimeType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mime_type"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.priority = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["priority"] as AnyObject?)
            if let privacy = sourceDictionary["privacy"] as? String { 
                instance.privacy = Video.Privacy(rawValue: (privacy))
            }
            
            instance.published = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["published"] as AnyObject?)
            instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["size"] as AnyObject?)
            instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            instance.thumbnail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["thumbnail"] as AnyObject?)
            instance.updated = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated"] as AnyObject?)
            instance.uploader = Decoders.decodeOptional(clazz: User.self, source: sourceDictionary["uploader"] as AnyObject?)
            instance.views = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["views"] as AnyObject?)
            instance.whitelist = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["whitelist"] as AnyObject?)
            instance.width = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["width"] as AnyObject?)
            return instance
        }


        // Decoder for [VideoContribution]
        Decoders.addDecoder(clazz: [VideoContribution].self) { (source: AnyObject) -> [VideoContribution] in
            return Decoders.decode(clazz: [VideoContribution].self, source: source)
        }
        // Decoder for VideoContribution
        Decoders.addDecoder(clazz: VideoContribution.self) { (source: AnyObject) -> VideoContribution in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = VideoContribution()
            instance.artist = Decoders.decodeOptional(clazz: Artist.self, source: sourceDictionary["artist"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.media = Decoders.decodeOptional(clazz: Video.self, source: sourceDictionary["media"] as AnyObject?)
            instance.role = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["role"] as AnyObject?)
            return instance
        }


        // Decoder for [VideoRelationshipResource]
        Decoders.addDecoder(clazz: [VideoRelationshipResource].self) { (source: AnyObject) -> [VideoRelationshipResource] in
            return Decoders.decode(clazz: [VideoRelationshipResource].self, source: source)
        }
        // Decoder for VideoRelationshipResource
        Decoders.addDecoder(clazz: VideoRelationshipResource.self) { (source: AnyObject) -> VideoRelationshipResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = VideoRelationshipResource()
            instance.from = Decoders.decodeOptional(clazz: SimpleReferenceResourcelong.self, source: sourceDictionary["from"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.relationshipDetails = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["relationship_details"] as AnyObject?)
            instance.to = Decoders.decodeOptional(clazz: SimpleReferenceResourcelong.self, source: sourceDictionary["to"] as AnyObject?)
            return instance
        }


        // Decoder for [VideoResource]
        Decoders.addDecoder(clazz: [VideoResource].self) { (source: AnyObject) -> [VideoResource] in
            return Decoders.decode(clazz: [VideoResource].self, source: source)
        }
        // Decoder for VideoResource
        Decoders.addDecoder(clazz: VideoResource.self) { (source: AnyObject) -> VideoResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = VideoResource()
            instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"] as AnyObject?)
            instance.author = Decoders.decodeOptional(clazz: SimpleReferenceResourcelong.self, source: sourceDictionary["author"] as AnyObject?)
            instance.authored = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["authored"] as AnyObject?)
            instance.banned = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["banned"] as AnyObject?)
            instance.category = Decoders.decodeOptional(clazz: SimpleReferenceResourcestring.self, source: sourceDictionary["category"] as AnyObject?)
            instance.comments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["comments"] as AnyObject?)
            instance.contributors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["contributors"] as AnyObject?)
            instance.createdDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["created_date"] as AnyObject?)
            instance.embed = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["embed"] as AnyObject?)
            instance._extension = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["extension"] as AnyObject?)
            instance.height = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["height"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.length = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["length"] as AnyObject?)
            instance.location = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["location"] as AnyObject?)
            instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"] as AnyObject?)
            instance.mimeType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mime_type"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.priority = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["priority"] as AnyObject?)
            if let privacy = sourceDictionary["privacy"] as? String { 
                instance.privacy = VideoResource.Privacy(rawValue: (privacy))
            }
            
            instance.published = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["published"] as AnyObject?)
            instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"] as AnyObject?)
            instance.size = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["size"] as AnyObject?)
            instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            instance.thumbnail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["thumbnail"] as AnyObject?)
            instance.updatedDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updated_date"] as AnyObject?)
            instance.uploader = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["uploader"] as AnyObject?)
            instance.views = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["views"] as AnyObject?)
            instance.width = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["width"] as AnyObject?)
            return instance
        }


        // Decoder for [VideoTag]
        Decoders.addDecoder(clazz: [VideoTag].self) { (source: AnyObject) -> [VideoTag] in
            return Decoders.decode(clazz: [VideoTag].self, source: source)
        }
        // Decoder for VideoTag
        Decoders.addDecoder(clazz: VideoTag.self) { (source: AnyObject) -> VideoTag in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = VideoTag()
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.tag = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tag"] as AnyObject?)
            instance.video = Decoders.decodeOptional(clazz: Video.self, source: sourceDictionary["video"] as AnyObject?)
            return instance
        }


        // Decoder for [WalletAlterRequest]
        Decoders.addDecoder(clazz: [WalletAlterRequest].self) { (source: AnyObject) -> [WalletAlterRequest] in
            return Decoders.decode(clazz: [WalletAlterRequest].self, source: source)
        }
        // Decoder for WalletAlterRequest
        Decoders.addDecoder(clazz: WalletAlterRequest.self) { (source: AnyObject) -> WalletAlterRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = WalletAlterRequest()
            instance.delta = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["delta"] as AnyObject?)
            instance.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"] as AnyObject?)
            instance.reason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reason"] as AnyObject?)
            instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return instance
        }


        // Decoder for [WalletTotalResponse]
        Decoders.addDecoder(clazz: [WalletTotalResponse].self) { (source: AnyObject) -> [WalletTotalResponse] in
            return Decoders.decode(clazz: [WalletTotalResponse].self, source: source)
        }
        // Decoder for WalletTotalResponse
        Decoders.addDecoder(clazz: WalletTotalResponse.self) { (source: AnyObject) -> WalletTotalResponse in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = WalletTotalResponse()
            instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"] as AnyObject?)
            instance.total = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["total"] as AnyObject?)
            return instance
        }


        // Decoder for [WalletTransactionResource]
        Decoders.addDecoder(clazz: [WalletTransactionResource].self) { (source: AnyObject) -> [WalletTransactionResource] in
            return Decoders.decode(clazz: [WalletTransactionResource].self, source: source)
        }
        // Decoder for WalletTransactionResource
        Decoders.addDecoder(clazz: WalletTransactionResource.self) { (source: AnyObject) -> WalletTransactionResource in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = WalletTransactionResource()
            instance.balance = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["balance"] as AnyObject?)
            instance.createDate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["create_date"] as AnyObject?)
            instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"] as AnyObject?)
            instance.details = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["details"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"] as AnyObject?)
            instance.isRefunded = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_refunded"] as AnyObject?)
            instance.response = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["response"] as AnyObject?)
            if let source = sourceDictionary["source"] as? String { 
                instance.source = WalletTransactionResource.Source(rawValue: (source))
            }
            
            instance.successful = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["successful"] as AnyObject?)
            instance.transactionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["transaction_id"] as AnyObject?)
            instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            instance.typeHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_hint"] as AnyObject?)
            instance.user = Decoders.decodeOptional(clazz: SimpleUserResource.self, source: sourceDictionary["user"] as AnyObject?)
            instance.value = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"] as AnyObject?)
            instance.walletId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["wallet_id"] as AnyObject?)
            return instance
        }


        // Decoder for [XsollaPaymentRequest]
        Decoders.addDecoder(clazz: [XsollaPaymentRequest].self) { (source: AnyObject) -> [XsollaPaymentRequest] in
            return Decoders.decode(clazz: [XsollaPaymentRequest].self, source: source)
        }
        // Decoder for XsollaPaymentRequest
        Decoders.addDecoder(clazz: XsollaPaymentRequest.self) { (source: AnyObject) -> XsollaPaymentRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = XsollaPaymentRequest()
            instance.invoiceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoice_id"] as AnyObject?)
            instance.returnUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["return_url"] as AnyObject?)
            return instance
        }
    }()

    static fileprivate func initialize() {
        _ = Decoders.__once
    }
}
