//
// CouponDefinition.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class CouponDefinition: JSONEncodable {
    public enum DiscountType: String { 
        case value = "value"
        case percentage = "percentage"
    }
    public enum ModelType: String { 
        case cart = "coupon_cart"
        case singleItem = "coupon_single_item"
        case voucher = "coupon_voucher"
        case vendor = "coupon_vendor"
        case tag = "coupon_tag"
    }
    public var code: String?
    public var description: String?
    public var discountType: DiscountType?
    public var exclusive: Bool?
    public var maxDiscount: Double?
    public var maxQuantity: Int32?
    public var minCartTotal: Double?
    public var name: String?
    public var targetItemId: Int32?
    public var type: ModelType?
    public var validForTags: [String]?
    public var value: Double?
    public var vendorId: Int32?

    public init() {}

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["code"] = self.code
        nillableDictionary["description"] = self.description
        nillableDictionary["discount_type"] = self.discountType?.rawValue
        nillableDictionary["exclusive"] = self.exclusive
        nillableDictionary["max_discount"] = self.maxDiscount
        nillableDictionary["max_quantity"] = self.maxQuantity?.encodeToJSON()
        nillableDictionary["min_cart_total"] = self.minCartTotal
        nillableDictionary["name"] = self.name
        nillableDictionary["target_item_id"] = self.targetItemId?.encodeToJSON()
        nillableDictionary["type"] = self.type?.rawValue
        nillableDictionary["valid_for_tags"] = self.validForTags?.encodeToJSON()
        nillableDictionary["value"] = self.value
        nillableDictionary["vendor_id"] = self.vendorId?.encodeToJSON()
        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
