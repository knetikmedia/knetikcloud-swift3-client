//
// CampaignsChallengesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class CampaignsChallengesAPI: APIBase {
    /**
     Create a challenge
     
     - parameter challengeResource: (body) The challenge resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createChallenge(challengeResource: ChallengeResource? = nil, completion: @escaping ((_ data: ChallengeResource?,_ error: Error?) -> Void)) {
        createChallengeWithRequestBuilder(challengeResource: challengeResource).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create a challenge
     - POST /challenges
     - Challenges do not run on their own.  They must be added to a campaign before events will spawn.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "end_date" : 0,
  "template" : "aeiou",
  "reward_set" : {
    "short_description" : "aeiou",
    "unique_key" : "aeiou",
    "currency_rewards" : [ {
      "currency_name" : "aeiou",
      "max_rank" : 3,
      "min_rank" : 0,
      "percent" : false,
      "value" : 2.8864396218352093,
      "currency_code" : "aeiou"
    } ],
    "name" : "aeiou",
    "created_date" : 5,
    "id" : 1,
    "long_description" : "aeiou",
    "max_placing" : 6,
    "updated_date" : 8,
    "item_rewards" : [ {
      "quantity" : 6,
      "item_id" : 4,
      "max_rank" : 9,
      "item_name" : "aeiou",
      "min_rank" : 8
    } ]
  },
  "short_description" : "aeiou",
  "next_event_date" : 2,
  "long_description" : "aeiou",
  "reward_lag_minutes" : 5,
  "leaderboard_strategy" : "aeiou",
  "schedule" : {
    "duration" : 0,
    "repeat" : "DAILY",
    "duration_unit" : "millisecond"
  },
  "copy_of" : 8,
  "activities" : 5,
  "name" : "aeiou",
  "additional_properties" : {
    "key" : {
      "type" : "aeiou"
    }
  },
  "created_date" : 8,
  "id" : 5,
  "updated_date" : 5,
  "campaign_id" : 9,
  "start_date" : 3
}}]
     
     - parameter challengeResource: (body) The challenge resource object (optional)

     - returns: RequestBuilder<ChallengeResource> 
     */
    open class func createChallengeWithRequestBuilder(challengeResource: ChallengeResource? = nil) -> RequestBuilder<ChallengeResource> {
        let path = "/challenges"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = challengeResource?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ChallengeResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a challenge activity
     
     - parameter challengeId: (path) The challenge id 
     - parameter challengeActivityResource: (body) The challenge activity resource object (optional)
     - parameter validateSettings: (query) Whether to validate the settings being sent against the available settings on the base activity. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createChallengeActivity(challengeId: Int64, challengeActivityResource: ChallengeActivityResource? = nil, validateSettings: Bool? = nil, completion: @escaping ((_ data: ChallengeActivityResource?,_ error: Error?) -> Void)) {
        createChallengeActivityWithRequestBuilder(challengeId: challengeId, challengeActivityResource: challengeActivityResource, validateSettings: validateSettings).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create a challenge activity
     - POST /challenges/{challengeId}/activities
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "reward_set" : {
    "short_description" : "aeiou",
    "unique_key" : "aeiou",
    "currency_rewards" : [ {
      "currency_name" : "aeiou",
      "max_rank" : 9,
      "min_rank" : 7,
      "percent" : false,
      "value" : 0.08612338993107649,
      "currency_code" : "aeiou"
    } ],
    "name" : "aeiou",
    "created_date" : 6,
    "id" : 2,
    "long_description" : "aeiou",
    "max_placing" : 3,
    "updated_date" : 9,
    "item_rewards" : [ {
      "quantity" : 0,
      "item_id" : 1,
      "max_rank" : 0,
      "item_name" : "aeiou",
      "min_rank" : 6
    } ]
  },
  "settings" : [ {
    "key_name" : "aeiou",
    "value" : "aeiou",
    "key" : "aeiou",
    "value_name" : "aeiou"
  } ],
  "challenge_id" : 4,
  "activity_id" : 6,
  "entitlement" : {
    "item_id" : 9,
    "price" : 0.8569804805476811,
    "name" : "aeiou",
    "sku" : "aeiou",
    "currency_code" : "aeiou"
  },
  "id" : 6
}}]
     
     - parameter challengeId: (path) The challenge id 
     - parameter challengeActivityResource: (body) The challenge activity resource object (optional)
     - parameter validateSettings: (query) Whether to validate the settings being sent against the available settings on the base activity. (optional, default to false)

     - returns: RequestBuilder<ChallengeActivityResource> 
     */
    open class func createChallengeActivityWithRequestBuilder(challengeId: Int64, challengeActivityResource: ChallengeActivityResource? = nil, validateSettings: Bool? = nil) -> RequestBuilder<ChallengeActivityResource> {
        var path = "/challenges/{challengeId}/activities"
        path = path.replacingOccurrences(of: "{challenge_id}", with: "\(challengeId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = challengeActivityResource?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "validateSettings": validateSettings
        ])
        

        let requestBuilder: RequestBuilder<ChallengeActivityResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a challenge template
     
     - parameter challengeTemplateResource: (body) The challenge template resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createChallengeTemplate(challengeTemplateResource: TemplateResource? = nil, completion: @escaping ((_ data: TemplateResource?,_ error: Error?) -> Void)) {
        createChallengeTemplateWithRequestBuilder(challengeTemplateResource: challengeTemplateResource).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create a challenge template
     - POST /challenges/templates
     - Challenge Templates define a type of challenge and the properties they have
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "created_date" : 6,
  "id" : "aeiou",
  "updated_date" : 1,
  "properties" : [ {
    "name" : "aeiou",
    "type" : "aeiou",
    "required" : false
  } ]
}}]
     
     - parameter challengeTemplateResource: (body) The challenge template resource object (optional)

     - returns: RequestBuilder<TemplateResource> 
     */
    open class func createChallengeTemplateWithRequestBuilder(challengeTemplateResource: TemplateResource? = nil) -> RequestBuilder<TemplateResource> {
        let path = "/challenges/templates"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = challengeTemplateResource?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<TemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a challenge
     
     - parameter id: (path) The challenge id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteChallenge(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteChallengeWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete a challenge
     - DELETE /challenges/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The challenge id 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteChallengeWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/challenges/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a challenge activity
     
     - parameter activityId: (path) The activity id 
     - parameter challengeId: (path) The challenge id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteChallengeActivity(activityId: Int64, challengeId: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteChallengeActivityWithRequestBuilder(activityId: activityId, challengeId: challengeId).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete a challenge activity
     - DELETE /challenges/{challengeId}/activities/{activityId}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter activityId: (path) The activity id 
     - parameter challengeId: (path) The challenge id 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteChallengeActivityWithRequestBuilder(activityId: Int64, challengeId: Int64) -> RequestBuilder<Void> {
        var path = "/challenges/{challengeId}/activities/{activityId}"
        path = path.replacingOccurrences(of: "{activity_id}", with: "\(activityId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{challenge_id}", with: "\(challengeId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a challenge event
     
     - parameter id: (path) The challenge event id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteChallengeEvent(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteChallengeEventWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete a challenge event
     - DELETE /challenges/events/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The challenge event id 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteChallengeEventWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/challenges/events/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a challenge template
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) The value needed to delete used templates (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteChallengeTemplate(id: String, cascade: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteChallengeTemplateWithRequestBuilder(id: id, cascade: cascade).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete a challenge template
     - DELETE /challenges/templates/{id}
     - If cascade = 'detach', it will force delete the template even if it's attached to other objects
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) The value needed to delete used templates (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteChallengeTemplateWithRequestBuilder(id: String, cascade: String? = nil) -> RequestBuilder<Void> {
        var path = "/challenges/templates/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "cascade": cascade
        ])
        

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieve a challenge
     
     - parameter id: (path) The challenge id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChallenge(id: Int64, completion: @escaping ((_ data: ChallengeResource?,_ error: Error?) -> Void)) {
        getChallengeWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Retrieve a challenge
     - GET /challenges/{id}
     - examples: [{contentType=application/json, example={
  "end_date" : 4,
  "template" : "aeiou",
  "reward_set" : {
    "short_description" : "aeiou",
    "unique_key" : "aeiou",
    "currency_rewards" : [ {
      "currency_name" : "aeiou",
      "max_rank" : 1,
      "min_rank" : 1,
      "percent" : false,
      "value" : 1.9912948007668918,
      "currency_code" : "aeiou"
    } ],
    "name" : "aeiou",
    "created_date" : 6,
    "id" : 3,
    "long_description" : "aeiou",
    "max_placing" : 0,
    "updated_date" : 5,
    "item_rewards" : [ {
      "quantity" : 5,
      "item_id" : 9,
      "max_rank" : 1,
      "item_name" : "aeiou",
      "min_rank" : 5
    } ]
  },
  "short_description" : "aeiou",
  "next_event_date" : 9,
  "long_description" : "aeiou",
  "reward_lag_minutes" : 3,
  "leaderboard_strategy" : "aeiou",
  "schedule" : {
    "duration" : 7,
    "repeat" : "DAILY",
    "duration_unit" : "millisecond"
  },
  "copy_of" : 4,
  "activities" : 8,
  "name" : "aeiou",
  "additional_properties" : {
    "key" : {
      "type" : "aeiou"
    }
  },
  "created_date" : 4,
  "id" : 7,
  "updated_date" : 8,
  "campaign_id" : 0,
  "start_date" : 7
}}]
     
     - parameter id: (path) The challenge id 

     - returns: RequestBuilder<ChallengeResource> 
     */
    open class func getChallengeWithRequestBuilder(id: Int64) -> RequestBuilder<ChallengeResource> {
        var path = "/challenges/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ChallengeResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List and search challenge activities
     
     - parameter challengeId: (path) The challenge id 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChallengeActivities(challengeId: Int64, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: PageResourceBareChallengeActivityResource?,_ error: Error?) -> Void)) {
        getChallengeActivitiesWithRequestBuilder(challengeId: challengeId, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List and search challenge activities
     - GET /challenges/{challengeId}/activities
     - examples: [{contentType=application/json, example={
  "number" : 3,
  "last" : true,
  "size" : 6,
  "total_elements" : 4,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 2,
  "number_of_elements" : 4,
  "content" : [ {
    "challenge_id" : 0,
    "activity_id" : 2,
    "id" : 5
  } ],
  "first" : true
}}]
     
     - parameter challengeId: (path) The challenge id 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)

     - returns: RequestBuilder<PageResourceBareChallengeActivityResource> 
     */
    open class func getChallengeActivitiesWithRequestBuilder(challengeId: Int64, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceBareChallengeActivityResource> {
        var path = "/challenges/{challengeId}/activities"
        path = path.replacingOccurrences(of: "{challenge_id}", with: "\(challengeId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "size": size?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "order": order
        ])
        

        let requestBuilder: RequestBuilder<PageResourceBareChallengeActivityResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a single challenge activity
     
     - parameter activityId: (path) The activity id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChallengeActivity(activityId: Int64, completion: @escaping ((_ data: ChallengeActivityResource?,_ error: Error?) -> Void)) {
        getChallengeActivityWithRequestBuilder(activityId: activityId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get a single challenge activity
     - GET /challenges/{challengeId}/activities/{activityId}
     - examples: [{contentType=application/json, example={
  "reward_set" : {
    "short_description" : "aeiou",
    "unique_key" : "aeiou",
    "currency_rewards" : [ {
      "currency_name" : "aeiou",
      "max_rank" : 5,
      "min_rank" : 2,
      "percent" : false,
      "value" : 7.3596601339556065,
      "currency_code" : "aeiou"
    } ],
    "name" : "aeiou",
    "created_date" : 9,
    "id" : 8,
    "long_description" : "aeiou",
    "max_placing" : 8,
    "updated_date" : 0,
    "item_rewards" : [ {
      "quantity" : 7,
      "item_id" : 7,
      "max_rank" : 4,
      "item_name" : "aeiou",
      "min_rank" : 6
    } ]
  },
  "settings" : [ {
    "key_name" : "aeiou",
    "value" : "aeiou",
    "key" : "aeiou",
    "value_name" : "aeiou"
  } ],
  "challenge_id" : 7,
  "activity_id" : 5,
  "entitlement" : {
    "item_id" : 1,
    "price" : 9.559352727969866,
    "name" : "aeiou",
    "sku" : "aeiou",
    "currency_code" : "aeiou"
  },
  "id" : 3
}}]
     
     - parameter activityId: (path) The activity id 

     - returns: RequestBuilder<ChallengeActivityResource> 
     */
    open class func getChallengeActivityWithRequestBuilder(activityId: Int64) -> RequestBuilder<ChallengeActivityResource> {
        var path = "/challenges/{challengeId}/activities/{activityId}"
        path = path.replacingOccurrences(of: "{activity_id}", with: "\(activityId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ChallengeActivityResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieve a single challenge event details
     
     - parameter id: (path) The challenge event id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChallengeEvent(id: Int64, completion: @escaping ((_ data: ChallengeEventResource?,_ error: Error?) -> Void)) {
        getChallengeEventWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Retrieve a single challenge event details
     - GET /challenges/events/{id}
     - examples: [{contentType=application/json, example={
  "end_date" : 4,
  "challenge_id" : 1,
  "id" : 9,
  "reward_status" : "pending",
  "start_date" : 6
}}]
     
     - parameter id: (path) The challenge event id 

     - returns: RequestBuilder<ChallengeEventResource> 
     */
    open class func getChallengeEventWithRequestBuilder(id: Int64) -> RequestBuilder<ChallengeEventResource> {
        var path = "/challenges/events/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ChallengeEventResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieve a list of challenge events
     
     - parameter filterStartDate: (query) A comma separated string without spaces.  First value is the operator to search on, second value is the event start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
     - parameter filterEndDate: (query) A comma separated string without spaces.  First value is the operator to search on, second value is the event end date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
     - parameter filterCampaigns: (query) check only for events from currently running campaigns (optional)
     - parameter filterChallenge: (query) check only for events from the challenge specified by id (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChallengeEvents(filterStartDate: String? = nil, filterEndDate: String? = nil, filterCampaigns: Bool? = nil, filterChallenge: Int64? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: PageResourceChallengeEventResource?,_ error: Error?) -> Void)) {
        getChallengeEventsWithRequestBuilder(filterStartDate: filterStartDate, filterEndDate: filterEndDate, filterCampaigns: filterCampaigns, filterChallenge: filterChallenge, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Retrieve a list of challenge events
     - GET /challenges/events
     - examples: [{contentType=application/json, example={
  "number" : 7,
  "last" : true,
  "size" : 5,
  "total_elements" : 2,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 1,
  "number_of_elements" : 6,
  "content" : [ {
    "end_date" : 5,
    "challenge_id" : 5,
    "id" : 5,
    "reward_status" : "pending",
    "start_date" : 3
  } ],
  "first" : true
}}]
     
     - parameter filterStartDate: (query) A comma separated string without spaces.  First value is the operator to search on, second value is the event start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
     - parameter filterEndDate: (query) A comma separated string without spaces.  First value is the operator to search on, second value is the event end date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
     - parameter filterCampaigns: (query) check only for events from currently running campaigns (optional)
     - parameter filterChallenge: (query) check only for events from the challenge specified by id (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)

     - returns: RequestBuilder<PageResourceChallengeEventResource> 
     */
    open class func getChallengeEventsWithRequestBuilder(filterStartDate: String? = nil, filterEndDate: String? = nil, filterCampaigns: Bool? = nil, filterChallenge: Int64? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceChallengeEventResource> {
        let path = "/challenges/events"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter_start_date": filterStartDate, 
            "filter_end_date": filterEndDate, 
            "filter_campaigns": filterCampaigns, 
            "filter_challenge": filterChallenge?.encodeToJSON(), 
            "size": size?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "order": order
        ])
        

        let requestBuilder: RequestBuilder<PageResourceChallengeEventResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a single challenge template
     
     - parameter id: (path) The id of the template 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChallengeTemplate(id: String, completion: @escaping ((_ data: TemplateResource?,_ error: Error?) -> Void)) {
        getChallengeTemplateWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get a single challenge template
     - GET /challenges/templates/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "created_date" : 8,
  "id" : "aeiou",
  "updated_date" : 0,
  "properties" : [ {
    "name" : "aeiou",
    "type" : "aeiou",
    "required" : false
  } ]
}}]
     
     - parameter id: (path) The id of the template 

     - returns: RequestBuilder<TemplateResource> 
     */
    open class func getChallengeTemplateWithRequestBuilder(id: String) -> RequestBuilder<TemplateResource> {
        var path = "/challenges/templates/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<TemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List and search challenge templates
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChallengeTemplates(size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: PageResourceTemplateResource?,_ error: Error?) -> Void)) {
        getChallengeTemplatesWithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List and search challenge templates
     - GET /challenges/templates
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 5,
  "last" : true,
  "size" : 5,
  "total_elements" : 3,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 8,
  "number_of_elements" : 5,
  "content" : [ {
    "name" : "aeiou",
    "created_date" : 7,
    "id" : "aeiou",
    "updated_date" : 2,
    "properties" : [ {
      "name" : "aeiou",
      "type" : "aeiou",
      "required" : false
    } ]
  } ],
  "first" : true
}}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)

     - returns: RequestBuilder<PageResourceTemplateResource> 
     */
    open class func getChallengeTemplatesWithRequestBuilder(size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceTemplateResource> {
        let path = "/challenges/templates"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "size": size?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "order": order
        ])
        

        let requestBuilder: RequestBuilder<PageResourceTemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieve a list of challenges
     
     - parameter filterTemplate: (query) Filter for challenges that are not tied to campaigns (templates) (optional)
     - parameter filterActiveCampaign: (query) Filter for challenges that are tied to active campaigns (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChallenges(filterTemplate: Bool? = nil, filterActiveCampaign: Bool? = nil, completion: @escaping ((_ data: PageResourceChallengeResource?,_ error: Error?) -> Void)) {
        getChallengesWithRequestBuilder(filterTemplate: filterTemplate, filterActiveCampaign: filterActiveCampaign).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Retrieve a list of challenges
     - GET /challenges
     - examples: [{contentType=application/json, example={
  "number" : 4,
  "last" : true,
  "size" : 1,
  "total_elements" : 7,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 6,
  "number_of_elements" : 0,
  "content" : [ {
    "end_date" : 3,
    "template" : "aeiou",
    "reward_set" : {
      "short_description" : "aeiou",
      "unique_key" : "aeiou",
      "currency_rewards" : [ {
        "currency_name" : "aeiou",
        "max_rank" : 6,
        "min_rank" : 4,
        "percent" : false,
        "value" : 2.828849180238875,
        "currency_code" : "aeiou"
      } ],
      "name" : "aeiou",
      "created_date" : 1,
      "id" : 4,
      "long_description" : "aeiou",
      "max_placing" : 2,
      "updated_date" : 6,
      "item_rewards" : [ {
        "quantity" : 4,
        "item_id" : 9,
        "max_rank" : 4,
        "item_name" : "aeiou",
        "min_rank" : 7
      } ]
    },
    "short_description" : "aeiou",
    "next_event_date" : 0,
    "long_description" : "aeiou",
    "reward_lag_minutes" : 2,
    "leaderboard_strategy" : "aeiou",
    "schedule" : {
      "duration" : 1,
      "repeat" : "DAILY",
      "duration_unit" : "millisecond"
    },
    "copy_of" : 5,
    "activities" : 1,
    "name" : "aeiou",
    "additional_properties" : {
      "key" : {
        "type" : "aeiou"
      }
    },
    "created_date" : 5,
    "id" : 5,
    "updated_date" : 2,
    "campaign_id" : 6,
    "start_date" : 6
  } ],
  "first" : true
}}]
     
     - parameter filterTemplate: (query) Filter for challenges that are not tied to campaigns (templates) (optional)
     - parameter filterActiveCampaign: (query) Filter for challenges that are tied to active campaigns (optional)

     - returns: RequestBuilder<PageResourceChallengeResource> 
     */
    open class func getChallengesWithRequestBuilder(filterTemplate: Bool? = nil, filterActiveCampaign: Bool? = nil) -> RequestBuilder<PageResourceChallengeResource> {
        let path = "/challenges"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter_template": filterTemplate, 
            "filter_active_campaign": filterActiveCampaign
        ])
        

        let requestBuilder: RequestBuilder<PageResourceChallengeResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update a challenge
     
     - parameter id: (path) The challenge id 
     - parameter challengeResource: (body) The challenge resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateChallenge(id: Int64, challengeResource: ChallengeResource? = nil, completion: @escaping ((_ data: ChallengeResource?,_ error: Error?) -> Void)) {
        updateChallengeWithRequestBuilder(id: id, challengeResource: challengeResource).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Update a challenge
     - PUT /challenges/{id}
     - If the challenge is a copy, changes will propagate to all the related challenges
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "end_date" : 1,
  "template" : "aeiou",
  "reward_set" : {
    "short_description" : "aeiou",
    "unique_key" : "aeiou",
    "currency_rewards" : [ {
      "currency_name" : "aeiou",
      "max_rank" : 0,
      "min_rank" : 8,
      "percent" : false,
      "value" : 9.861600380883766,
      "currency_code" : "aeiou"
    } ],
    "name" : "aeiou",
    "created_date" : 1,
    "id" : 4,
    "long_description" : "aeiou",
    "max_placing" : 4,
    "updated_date" : 8,
    "item_rewards" : [ {
      "quantity" : 9,
      "item_id" : 2,
      "max_rank" : 8,
      "item_name" : "aeiou",
      "min_rank" : 2
    } ]
  },
  "short_description" : "aeiou",
  "next_event_date" : 7,
  "long_description" : "aeiou",
  "reward_lag_minutes" : 7,
  "leaderboard_strategy" : "aeiou",
  "schedule" : {
    "duration" : 1,
    "repeat" : "DAILY",
    "duration_unit" : "millisecond"
  },
  "copy_of" : 1,
  "activities" : 6,
  "name" : "aeiou",
  "additional_properties" : {
    "key" : {
      "type" : "aeiou"
    }
  },
  "created_date" : 5,
  "id" : 5,
  "updated_date" : 7,
  "campaign_id" : 7,
  "start_date" : 3
}}]
     
     - parameter id: (path) The challenge id 
     - parameter challengeResource: (body) The challenge resource object (optional)

     - returns: RequestBuilder<ChallengeResource> 
     */
    open class func updateChallengeWithRequestBuilder(id: Int64, challengeResource: ChallengeResource? = nil) -> RequestBuilder<ChallengeResource> {
        var path = "/challenges/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = challengeResource?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ChallengeResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a challenge activity
     
     - parameter activityId: (path) The activity id 
     - parameter challengeId: (path) The challenge id 
     - parameter challengeActivityResource: (body) The challenge activity resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateChallengeActivity(activityId: Int64, challengeId: Int64, challengeActivityResource: ChallengeActivityResource? = nil, completion: @escaping ((_ data: ChallengeActivityResource?,_ error: Error?) -> Void)) {
        updateChallengeActivityWithRequestBuilder(activityId: activityId, challengeId: challengeId, challengeActivityResource: challengeActivityResource).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Update a challenge activity
     - PUT /challenges/{challengeId}/activities/{activityId}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "reward_set" : {
    "short_description" : "aeiou",
    "unique_key" : "aeiou",
    "currency_rewards" : [ {
      "currency_name" : "aeiou",
      "max_rank" : 3,
      "min_rank" : 0,
      "percent" : false,
      "value" : 4.708359659091784,
      "currency_code" : "aeiou"
    } ],
    "name" : "aeiou",
    "created_date" : 0,
    "id" : 0,
    "long_description" : "aeiou",
    "max_placing" : 0,
    "updated_date" : 1,
    "item_rewards" : [ {
      "quantity" : 3,
      "item_id" : 8,
      "max_rank" : 6,
      "item_name" : "aeiou",
      "min_rank" : 0
    } ]
  },
  "settings" : [ {
    "key_name" : "aeiou",
    "value" : "aeiou",
    "key" : "aeiou",
    "value_name" : "aeiou"
  } ],
  "challenge_id" : 6,
  "activity_id" : 0,
  "entitlement" : {
    "item_id" : 0,
    "price" : 5.037117449623903,
    "name" : "aeiou",
    "sku" : "aeiou",
    "currency_code" : "aeiou"
  },
  "id" : 6
}}]
     
     - parameter activityId: (path) The activity id 
     - parameter challengeId: (path) The challenge id 
     - parameter challengeActivityResource: (body) The challenge activity resource object (optional)

     - returns: RequestBuilder<ChallengeActivityResource> 
     */
    open class func updateChallengeActivityWithRequestBuilder(activityId: Int64, challengeId: Int64, challengeActivityResource: ChallengeActivityResource? = nil) -> RequestBuilder<ChallengeActivityResource> {
        var path = "/challenges/{challengeId}/activities/{activityId}"
        path = path.replacingOccurrences(of: "{activity_id}", with: "\(activityId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{challenge_id}", with: "\(challengeId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = challengeActivityResource?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ChallengeActivityResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a challenge template
     
     - parameter id: (path) The id of the template 
     - parameter challengeTemplateResource: (body) The challenge template resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateChallengeTemplate(id: String, challengeTemplateResource: TemplateResource? = nil, completion: @escaping ((_ data: TemplateResource?,_ error: Error?) -> Void)) {
        updateChallengeTemplateWithRequestBuilder(id: id, challengeTemplateResource: challengeTemplateResource).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Update a challenge template
     - PUT /challenges/templates/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "created_date" : 3,
  "id" : "aeiou",
  "updated_date" : 3,
  "properties" : [ {
    "name" : "aeiou",
    "type" : "aeiou",
    "required" : false
  } ]
}}]
     
     - parameter id: (path) The id of the template 
     - parameter challengeTemplateResource: (body) The challenge template resource object (optional)

     - returns: RequestBuilder<TemplateResource> 
     */
    open class func updateChallengeTemplateWithRequestBuilder(id: String, challengeTemplateResource: TemplateResource? = nil) -> RequestBuilder<TemplateResource> {
        var path = "/challenges/templates/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = challengeTemplateResource?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<TemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
