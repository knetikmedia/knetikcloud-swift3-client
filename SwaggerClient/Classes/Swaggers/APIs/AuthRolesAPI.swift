//
// AuthRolesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class AuthRolesAPI: APIBase {
    /**
     Set roles for a client
     
     - parameter clientKey: (path) The client key 
     - parameter rolesList: (body) The list of unique roles (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func assignClientRolesUsingPUT(clientKey: String, rolesList: [String]? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        assignClientRolesUsingPUTWithRequestBuilder(clientKey: clientKey, rolesList: rolesList).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Set roles for a client
     - PUT /auth/clients/{clientKey}/roles
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter clientKey: (path) The client key 
     - parameter rolesList: (body) The list of unique roles (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func assignClientRolesUsingPUTWithRequestBuilder(clientKey: String, rolesList: [String]? = nil) -> RequestBuilder<Void> {
        var path = "/auth/clients/{clientKey}/roles"
        path = path.replacingOccurrences(of: "{clientKey}", with: "\(clientKey)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = rolesList?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Set permissions for a role
     
     - parameter role: (path) The role value 
     - parameter permissionsList: (body) The list of unique permissions (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func assignPermissionsUsingPUT(role: String, permissionsList: [String]? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        assignPermissionsUsingPUTWithRequestBuilder(role: role, permissionsList: permissionsList).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Set permissions for a role
     - PUT /auth/roles/{role}/permissions
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter role: (path) The role value 
     - parameter permissionsList: (body) The list of unique permissions (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func assignPermissionsUsingPUTWithRequestBuilder(role: String, permissionsList: [String]? = nil) -> RequestBuilder<Void> {
        var path = "/auth/roles/{role}/permissions"
        path = path.replacingOccurrences(of: "{role}", with: "\(role)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = permissionsList?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Set roles for a user
     
     - parameter userId: (path) The user&#39;s id 
     - parameter rolesList: (body) The list of unique roles (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func assignUserRolesExternalUsingPUT(userId: Int32, rolesList: [String]? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        assignUserRolesExternalUsingPUTWithRequestBuilder(userId: userId, rolesList: rolesList).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Set roles for a user
     - PUT /auth/users/{userId}/roles
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter userId: (path) The user&#39;s id 
     - parameter rolesList: (body) The list of unique roles (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func assignUserRolesExternalUsingPUTWithRequestBuilder(userId: Int32, rolesList: [String]? = nil) -> RequestBuilder<Void> {
        var path = "/auth/users/{userId}/roles"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = rolesList?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a new role
     
     - parameter roleResource: (body) The role resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createRoleUsingPOST(roleResource: RoleResource? = nil, completion: @escaping ((_ data: RoleResource?,_ error: Error?) -> Void)) {
        createRoleUsingPOSTWithRequestBuilder(roleResource: roleResource).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create a new role
     - POST /auth/roles
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "role" : "aeiou",
  "user_count" : 123,
  "name" : "aeiou",
  "role_permission" : [ {
    "parent" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "permission" : "aeiou",
    "created_date" : 123456789,
    "updated_date" : 123456789,
    "locked" : false
  } ],
  "created_date" : 123456789,
  "locked" : false,
  "client_count" : 123
}}]
     
     - parameter roleResource: (body) The role resource object (optional)

     - returns: RequestBuilder<RoleResource> 
     */
    open class func createRoleUsingPOSTWithRequestBuilder(roleResource: RoleResource? = nil) -> RequestBuilder<RoleResource> {
        let path = "/auth/roles"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = roleResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<RoleResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a role
     
     - parameter role: (path) The role value 
     - parameter force: (query) If true, removes role from users/clients (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoleUsingDELETE(role: String, force: Bool? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteRoleUsingDELETEWithRequestBuilder(role: role, force: force).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete a role
     - DELETE /auth/roles/{role}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter role: (path) The role value 
     - parameter force: (query) If true, removes role from users/clients (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoleUsingDELETEWithRequestBuilder(role: String, force: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/auth/roles/{role}"
        path = path.replacingOccurrences(of: "{role}", with: "\(role)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "force": force
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get roles for a client
     
     - parameter clientKey: (path) The client key 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getClientRolesUsingGET(clientKey: String, completion: @escaping ((_ data: [RoleResource]?,_ error: Error?) -> Void)) {
        getClientRolesUsingGETWithRequestBuilder(clientKey: clientKey).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get roles for a client
     - GET /auth/clients/{clientKey}/roles
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example=[ {
  "role" : "aeiou",
  "user_count" : 123,
  "name" : "aeiou",
  "role_permission" : [ {
    "parent" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "permission" : "aeiou",
    "created_date" : 123456789,
    "updated_date" : 123456789,
    "locked" : false
  } ],
  "created_date" : 123456789,
  "locked" : false,
  "client_count" : 123
} ]}]
     
     - parameter clientKey: (path) The client key 

     - returns: RequestBuilder<[RoleResource]> 
     */
    open class func getClientRolesUsingGETWithRequestBuilder(clientKey: String) -> RequestBuilder<[RoleResource]> {
        var path = "/auth/clients/{clientKey}/roles"
        path = path.replacingOccurrences(of: "{clientKey}", with: "\(clientKey)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[RoleResource]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a single role
     
     - parameter role: (path) The role value 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoleUsingGET(role: String, completion: @escaping ((_ data: RoleResource?,_ error: Error?) -> Void)) {
        getRoleUsingGETWithRequestBuilder(role: role).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get a single role
     - GET /auth/roles/{role}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "role" : "aeiou",
  "user_count" : 123,
  "name" : "aeiou",
  "role_permission" : [ {
    "parent" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "permission" : "aeiou",
    "created_date" : 123456789,
    "updated_date" : 123456789,
    "locked" : false
  } ],
  "created_date" : 123456789,
  "locked" : false,
  "client_count" : 123
}}]
     
     - parameter role: (path) The role value 

     - returns: RequestBuilder<RoleResource> 
     */
    open class func getRoleUsingGETWithRequestBuilder(role: String) -> RequestBuilder<RoleResource> {
        var path = "/auth/roles/{role}"
        path = path.replacingOccurrences(of: "{role}", with: "\(role)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<RoleResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List and search roles
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRolesUsingGET(size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: PageResourceRoleResource?,_ error: Error?) -> Void)) {
        getRolesUsingGETWithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List and search roles
     - GET /auth/roles
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 123,
  "last" : true,
  "size" : 123,
  "total_elements" : 123456789,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "aeiou",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "aeiou"
  } ],
  "total_pages" : 123,
  "number_of_elements" : 123,
  "content" : [ {
    "role" : "aeiou",
    "user_count" : 123,
    "name" : "aeiou",
    "role_permission" : [ {
      "parent" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "permission" : "aeiou",
      "created_date" : 123456789,
      "updated_date" : 123456789,
      "locked" : false
    } ],
    "created_date" : 123456789,
    "locked" : false,
    "client_count" : 123
  } ],
  "first" : true
}}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)

     - returns: RequestBuilder<PageResourceRoleResource> 
     */
    open class func getRolesUsingGETWithRequestBuilder(size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceRoleResource> {
        let path = "/auth/roles"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageResourceRoleResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get roles for a user
     
     - parameter userId: (path) The user&#39;s id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserRolesUsingGET(userId: Int32, completion: @escaping ((_ data: [RoleResource]?,_ error: Error?) -> Void)) {
        getUserRolesUsingGETWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get roles for a user
     - GET /auth/users/{userId}/roles
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example=[ {
  "role" : "aeiou",
  "user_count" : 123,
  "name" : "aeiou",
  "role_permission" : [ {
    "parent" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "permission" : "aeiou",
    "created_date" : 123456789,
    "updated_date" : 123456789,
    "locked" : false
  } ],
  "created_date" : 123456789,
  "locked" : false,
  "client_count" : 123
} ]}]
     
     - parameter userId: (path) The user&#39;s id 

     - returns: RequestBuilder<[RoleResource]> 
     */
    open class func getUserRolesUsingGETWithRequestBuilder(userId: Int32) -> RequestBuilder<[RoleResource]> {
        var path = "/auth/users/{userId}/roles"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[RoleResource]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a role
     
     - parameter role: (path) The role value 
     - parameter roleResource: (body) The role resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateRoleUsingPUT(role: String, roleResource: RoleResource? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        updateRoleUsingPUTWithRequestBuilder(role: role, roleResource: roleResource).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update a role
     - PUT /auth/roles/{role}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter role: (path) The role value 
     - parameter roleResource: (body) The role resource object (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateRoleUsingPUTWithRequestBuilder(role: String, roleResource: RoleResource? = nil) -> RequestBuilder<Void> {
        var path = "/auth/roles/{role}"
        path = path.replacingOccurrences(of: "{role}", with: "\(role)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = roleResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
