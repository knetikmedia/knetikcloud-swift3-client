//
// GamificationTriviaAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class GamificationTriviaAPI: APIBase {
    /**
     Add an answer to a question
     
     - parameter questionId: (path) The id of the question 
     - parameter answer: (body) The new answer (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addAnswersUsingPOST(questionId: String, answer: AnswerResource? = nil, completion: @escaping ((_ data: AnswerResource?,_ error: Error?) -> Void)) {
        addAnswersUsingPOSTWithRequestBuilder(questionId: questionId, answer: answer).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Add an answer to a question
     - POST /trivia/questions/{questionId}/answers
     - examples: [{output=none}]
     
     - parameter questionId: (path) The id of the question 
     - parameter answer: (body) The new answer (optional)

     - returns: RequestBuilder<AnswerResource> 
     */
    open class func addAnswersUsingPOSTWithRequestBuilder(questionId: String, answer: AnswerResource? = nil) -> RequestBuilder<AnswerResource> {
        var path = "/trivia/questions/{questionId}/answers"
        path = path.replacingOccurrences(of: "{questionId}", with: "\(questionId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = answer?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnswerResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add a tag to a question
     
     - parameter id: (path) The id of the question 
     - parameter tag: (body) The new tag (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addTagUsingPOST(id: String, tag: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        addTagUsingPOSTWithRequestBuilder(id: id, tag: tag).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Add a tag to a question
     - POST /trivia/questions/{id}/tags
     
     - parameter id: (path) The id of the question 
     - parameter tag: (body) The new tag (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func addTagUsingPOSTWithRequestBuilder(id: String, tag: String? = nil) -> RequestBuilder<Void> {
        var path = "/trivia/questions/{id}/tags"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = tag?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     * enum for parameter filterType
     */
    public enum FilterType_batchAddTagUsingPOST: String { 
        case text = "TEXT"
        case image = "IMAGE"
        case video = "VIDEO"
        case audio = "AUDIO"
    }

    /**
     Add a tag to a batch of questions
     
     - parameter tag: (body) The tag to add (optional)
     - parameter filterSearch: (query) Filter for documents whose question, answers or tags contains provided string (optional)
     - parameter filterIdset: (query) Filter for documents whose id is in the comma separated list provided (optional)
     - parameter filterCategory: (query) Filter for questions with specified category, by id (optional)
     - parameter filterTag: (query) Filter for questions with specified tag (optional)
     - parameter filterTagset: (query) Filter for questions with specified tags (separated by comma) (optional)
     - parameter filterType: (query) Filter for questions with specified type (optional)
     - parameter filterPublished: (query) Filter for questions currenctly published or not (optional)
     - parameter filterImportId: (query) Filter for questions from a specific import job (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func batchAddTagUsingPOST(tag: String? = nil, filterSearch: String? = nil, filterIdset: String? = nil, filterCategory: String? = nil, filterTag: String? = nil, filterTagset: String? = nil, filterType: FilterType_batchAddTagUsingPOST? = nil, filterPublished: Bool? = nil, filterImportId: Int64? = nil, completion: @escaping ((_ data: Int32?,_ error: Error?) -> Void)) {
        batchAddTagUsingPOSTWithRequestBuilder(tag: tag, filterSearch: filterSearch, filterIdset: filterIdset, filterCategory: filterCategory, filterTag: filterTag, filterTagset: filterTagset, filterType: filterType, filterPublished: filterPublished, filterImportId: filterImportId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Add a tag to a batch of questions
     - POST /trivia/questions/tags
     - All questions that dont't have the tag and match filters will have it added. The returned number is the number of questions updated.
     - examples: [{output=none}]
     
     - parameter tag: (body) The tag to add (optional)
     - parameter filterSearch: (query) Filter for documents whose question, answers or tags contains provided string (optional)
     - parameter filterIdset: (query) Filter for documents whose id is in the comma separated list provided (optional)
     - parameter filterCategory: (query) Filter for questions with specified category, by id (optional)
     - parameter filterTag: (query) Filter for questions with specified tag (optional)
     - parameter filterTagset: (query) Filter for questions with specified tags (separated by comma) (optional)
     - parameter filterType: (query) Filter for questions with specified type (optional)
     - parameter filterPublished: (query) Filter for questions currenctly published or not (optional)
     - parameter filterImportId: (query) Filter for questions from a specific import job (optional)

     - returns: RequestBuilder<Int32> 
     */
    open class func batchAddTagUsingPOSTWithRequestBuilder(tag: String? = nil, filterSearch: String? = nil, filterIdset: String? = nil, filterCategory: String? = nil, filterTag: String? = nil, filterTagset: String? = nil, filterType: FilterType_batchAddTagUsingPOST? = nil, filterPublished: Bool? = nil, filterImportId: Int64? = nil) -> RequestBuilder<Int32> {
        let path = "/trivia/questions/tags"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = tag?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Int32>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Remove a tag from a batch of questions
     
     - parameter tag: (path) The tag to remove 
     - parameter filterSearch: (query) Filter for documents whose question, answers or tags contains provided string (optional)
     - parameter filterIdset: (query) Filter for documents whose id is in the comma separated list provided (optional)
     - parameter filterCategory: (query) Filter for questions with specified category, by id (optional)
     - parameter filterTag: (query) Filter for questions with specified tag (optional)
     - parameter filterTagset: (query) Filter for questions with specified tags (separated by comma) (optional)
     - parameter filterType: (query) Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     - parameter filterPublished: (query) Filter for questions currenctly published or not (optional)
     - parameter filterImportId: (query) Filter for questions from a specific import job (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func batchRemoveTagUsingDELETE(tag: String, filterSearch: String? = nil, filterIdset: String? = nil, filterCategory: String? = nil, filterTag: String? = nil, filterTagset: String? = nil, filterType: String? = nil, filterPublished: Bool? = nil, filterImportId: Int64? = nil, completion: @escaping ((_ data: Int32?,_ error: Error?) -> Void)) {
        batchRemoveTagUsingDELETEWithRequestBuilder(tag: tag, filterSearch: filterSearch, filterIdset: filterIdset, filterCategory: filterCategory, filterTag: filterTag, filterTagset: filterTagset, filterType: filterType, filterPublished: filterPublished, filterImportId: filterImportId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Remove a tag from a batch of questions
     - DELETE /trivia/questions/tags/{tag}
     - ll questions that have the tag and match filters will have it removed. The returned number is the number of questions updated.
     - examples: [{output=none}]
     
     - parameter tag: (path) The tag to remove 
     - parameter filterSearch: (query) Filter for documents whose question, answers or tags contains provided string (optional)
     - parameter filterIdset: (query) Filter for documents whose id is in the comma separated list provided (optional)
     - parameter filterCategory: (query) Filter for questions with specified category, by id (optional)
     - parameter filterTag: (query) Filter for questions with specified tag (optional)
     - parameter filterTagset: (query) Filter for questions with specified tags (separated by comma) (optional)
     - parameter filterType: (query) Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     - parameter filterPublished: (query) Filter for questions currenctly published or not (optional)
     - parameter filterImportId: (query) Filter for questions from a specific import job (optional)

     - returns: RequestBuilder<Int32> 
     */
    open class func batchRemoveTagUsingDELETEWithRequestBuilder(tag: String, filterSearch: String? = nil, filterIdset: String? = nil, filterCategory: String? = nil, filterTag: String? = nil, filterTagset: String? = nil, filterType: String? = nil, filterPublished: Bool? = nil, filterImportId: Int64? = nil) -> RequestBuilder<Int32> {
        var path = "/trivia/questions/tags/{tag}"
        path = path.replacingOccurrences(of: "{tag}", with: "\(tag)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "filter_search": filterSearch,
            "filter_idset": filterIdset,
            "filter_category": filterCategory,
            "filter_tag": filterTag,
            "filter_tagset": filterTagset,
            "filter_type": filterType,
            "filter_published": filterPublished,
            "filter_import_id": filterImportId?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Int32>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Bulk update questions
     
     - parameter question: (body) New values for a set of question fields (optional)
     - parameter filterSearch: (query) Filter for documents whose question, answers or tags contains provided string (optional)
     - parameter filterIdset: (query) Filter for documents whose id is in the comma separated list provided (optional)
     - parameter filterCategory: (query) Filter for questions with specified category, by id (optional)
     - parameter filterTagset: (query) Filter for questions with specified tags (separated by comma) (optional)
     - parameter filterType: (query) Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     - parameter filterPublished: (query) Filter for questions currenctly published or not (optional)
     - parameter filterImportId: (query) Filter for questions from a specific import job (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func bulkUpdateUsingPUT(question: QuestionResource? = nil, filterSearch: String? = nil, filterIdset: String? = nil, filterCategory: String? = nil, filterTagset: String? = nil, filterType: String? = nil, filterPublished: Bool? = nil, filterImportId: Int64? = nil, completion: @escaping ((_ data: Int32?,_ error: Error?) -> Void)) {
        bulkUpdateUsingPUTWithRequestBuilder(question: question, filterSearch: filterSearch, filterIdset: filterIdset, filterCategory: filterCategory, filterTagset: filterTagset, filterType: filterType, filterPublished: filterPublished, filterImportId: filterImportId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Bulk update questions
     - PUT /trivia/questions
     - Will update all questions that match filters used (or all questions in system if no filters used). Body should match a question resource with only those properties you wish to set. Null values will be ignored. Returned number is how many were updated.
     - examples: [{output=none}]
     
     - parameter question: (body) New values for a set of question fields (optional)
     - parameter filterSearch: (query) Filter for documents whose question, answers or tags contains provided string (optional)
     - parameter filterIdset: (query) Filter for documents whose id is in the comma separated list provided (optional)
     - parameter filterCategory: (query) Filter for questions with specified category, by id (optional)
     - parameter filterTagset: (query) Filter for questions with specified tags (separated by comma) (optional)
     - parameter filterType: (query) Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     - parameter filterPublished: (query) Filter for questions currenctly published or not (optional)
     - parameter filterImportId: (query) Filter for questions from a specific import job (optional)

     - returns: RequestBuilder<Int32> 
     */
    open class func bulkUpdateUsingPUTWithRequestBuilder(question: QuestionResource? = nil, filterSearch: String? = nil, filterIdset: String? = nil, filterCategory: String? = nil, filterTagset: String? = nil, filterType: String? = nil, filterPublished: Bool? = nil, filterImportId: Int64? = nil) -> RequestBuilder<Int32> {
        let path = "/trivia/questions"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = question?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Int32>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Count questions based on filters.
     
     - parameter filterSearch: (query) Filter for documents whose question, answers or tags contains provided string (optional)
     - parameter filterIdset: (query) Filter for documents whose id is in the comma separated list provided (optional)
     - parameter filterCategory: (query) Filter for questions with specified category, by id (optional)
     - parameter filterTag: (query) Filter for questions with specified tag (optional)
     - parameter filterTagset: (query) Filter for questions with specified tags (separated by comma) (optional)
     - parameter filterType: (query) Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     - parameter filterPublished: (query) Filter for questions currenctly published or not (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func countQuestionsUsingGET(filterSearch: String? = nil, filterIdset: String? = nil, filterCategory: String? = nil, filterTag: String? = nil, filterTagset: String? = nil, filterType: String? = nil, filterPublished: Bool? = nil, completion: @escaping ((_ data: Int64?,_ error: Error?) -> Void)) {
        countQuestionsUsingGETWithRequestBuilder(filterSearch: filterSearch, filterIdset: filterIdset, filterCategory: filterCategory, filterTag: filterTag, filterTagset: filterTagset, filterType: filterType, filterPublished: filterPublished).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Count questions based on filters.
     - GET /trivia/questions/count
     - This is also provided by the list endpoint so you don't need to call this for pagination purposes
     - examples: [{output=none}]
     
     - parameter filterSearch: (query) Filter for documents whose question, answers or tags contains provided string (optional)
     - parameter filterIdset: (query) Filter for documents whose id is in the comma separated list provided (optional)
     - parameter filterCategory: (query) Filter for questions with specified category, by id (optional)
     - parameter filterTag: (query) Filter for questions with specified tag (optional)
     - parameter filterTagset: (query) Filter for questions with specified tags (separated by comma) (optional)
     - parameter filterType: (query) Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     - parameter filterPublished: (query) Filter for questions currenctly published or not (optional)

     - returns: RequestBuilder<Int64> 
     */
    open class func countQuestionsUsingGETWithRequestBuilder(filterSearch: String? = nil, filterIdset: String? = nil, filterCategory: String? = nil, filterTag: String? = nil, filterTagset: String? = nil, filterType: String? = nil, filterPublished: Bool? = nil) -> RequestBuilder<Int64> {
        let path = "/trivia/questions/count"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "filter_search": filterSearch,
            "filter_idset": filterIdset,
            "filter_category": filterCategory,
            "filter_tag": filterTag,
            "filter_tagset": filterTagset,
            "filter_type": filterType,
            "filter_published": filterPublished
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Int64>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Create a question template
     
     - parameter questionTemplateResource: (body) The question template resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createQuestionTemplateUsingPOST(questionTemplateResource: QuestionTemplateResource? = nil, completion: @escaping ((_ data: QuestionTemplateResource?,_ error: Error?) -> Void)) {
        createQuestionTemplateUsingPOSTWithRequestBuilder(questionTemplateResource: questionTemplateResource).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create a question template
     - POST /trivia/questions/templates
     - Question templates define a type of question and the properties they have
     - examples: [{output=none}]
     
     - parameter questionTemplateResource: (body) The question template resource object (optional)

     - returns: RequestBuilder<QuestionTemplateResource> 
     */
    open class func createQuestionTemplateUsingPOSTWithRequestBuilder(questionTemplateResource: QuestionTemplateResource? = nil) -> RequestBuilder<QuestionTemplateResource> {
        let path = "/trivia/questions/templates"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = questionTemplateResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<QuestionTemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a question
     
     - parameter question: (body) The new question (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createQuestionUsingPOST(question: QuestionResource? = nil, completion: @escaping ((_ data: QuestionResource?,_ error: Error?) -> Void)) {
        createQuestionUsingPOSTWithRequestBuilder(question: question).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create a question
     - POST /trivia/questions
     - examples: [{output=none}]
     
     - parameter question: (body) The new question (optional)

     - returns: RequestBuilder<QuestionResource> 
     */
    open class func createQuestionUsingPOSTWithRequestBuilder(question: QuestionResource? = nil) -> RequestBuilder<QuestionResource> {
        let path = "/trivia/questions"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = question?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<QuestionResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create an import job
     
     - parameter request: (body) The new import job (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createUsingPOST(request: ImportJobResource? = nil, completion: @escaping ((_ data: ImportJobResource?,_ error: Error?) -> Void)) {
        createUsingPOSTWithRequestBuilder(request: request).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create an import job
     - POST /trivia/import
     - Set up a job to import a set of trivia questions from a cvs file at a remote url. the file will be validated asynchronously but will not be processed until started manually with the process endpoint.
     - examples: [{output=none}]
     
     - parameter request: (body) The new import job (optional)

     - returns: RequestBuilder<ImportJobResource> 
     */
    open class func createUsingPOSTWithRequestBuilder(request: ImportJobResource? = nil) -> RequestBuilder<ImportJobResource> {
        let path = "/trivia/import"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = request?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ImportJobResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a question template
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) The value needed to delete used templates (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteQuestionTemplateUsingDELETE(id: String, cascade: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteQuestionTemplateUsingDELETEWithRequestBuilder(id: id, cascade: cascade).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete a question template
     - DELETE /trivia/questions/templates/{id}
     - If cascade = 'detach', it will force delete the template even if it's attached to other objects
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) The value needed to delete used templates (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteQuestionTemplateUsingDELETEWithRequestBuilder(id: String, cascade: String? = nil) -> RequestBuilder<Void> {
        var path = "/trivia/questions/templates/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "cascade": cascade
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Delete a question
     
     - parameter id: (path) The id of the question 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteQuestionUsingDELETE(id: String, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteQuestionUsingDELETEWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete a question
     - DELETE /trivia/questions/{id}
     
     - parameter id: (path) The id of the question 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteQuestionUsingDELETEWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var path = "/trivia/questions/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an import job
     
     - parameter id: (path) The id of the job 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUsingDELETE(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteUsingDELETEWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete an import job
     - DELETE /trivia/import/{id}
     - Also deletes all questions that were imported by it
     
     - parameter id: (path) The id of the job 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteUsingDELETEWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/trivia/import/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get an answer for a question
     
     - parameter questionId: (path) The id of the question 
     - parameter id: (path) The id of the answer 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnswerUsingGET(questionId: String, id: String, completion: @escaping ((_ data: AnswerResource?,_ error: Error?) -> Void)) {
        getAnswerUsingGETWithRequestBuilder(questionId: questionId, id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get an answer for a question
     - GET /trivia/questions/{questionId}/answers/{id}
     - examples: [{output=none}]
     
     - parameter questionId: (path) The id of the question 
     - parameter id: (path) The id of the answer 

     - returns: RequestBuilder<AnswerResource> 
     */
    open class func getAnswerUsingGETWithRequestBuilder(questionId: String, id: String) -> RequestBuilder<AnswerResource> {
        var path = "/trivia/questions/{questionId}/answers/{id}"
        path = path.replacingOccurrences(of: "{questionId}", with: "\(questionId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnswerResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List the answers available for a question
     
     - parameter questionId: (path) The id of the question 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnswersUsingGET(questionId: String, completion: @escaping ((_ data: [AnswerResource]?,_ error: Error?) -> Void)) {
        getAnswersUsingGETWithRequestBuilder(questionId: questionId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List the answers available for a question
     - GET /trivia/questions/{questionId}/answers
     - examples: [{output=none}]
     
     - parameter questionId: (path) The id of the question 

     - returns: RequestBuilder<[AnswerResource]> 
     */
    open class func getAnswersUsingGETWithRequestBuilder(questionId: String) -> RequestBuilder<[AnswerResource]> {
        var path = "/trivia/questions/{questionId}/answers"
        path = path.replacingOccurrences(of: "{questionId}", with: "\(questionId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[AnswerResource]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a list of import job
     
     - parameter filterVendor: (query) Filter for jobs by vendor id (optional)
     - parameter filterCategory: (query) Filter for jobs by category id (optional)
     - parameter filterName: (query) Filter for jobs which name *STARTS* with the given string (optional)
     - parameter filterStatus: (query) Filter for jobs that are in a specific set of statuses (comma separated) (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getListUsingGET1(filterVendor: String? = nil, filterCategory: String? = nil, filterName: String? = nil, filterStatus: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: PageImportJobResource?,_ error: Error?) -> Void)) {
        getListUsingGET1WithRequestBuilder(filterVendor: filterVendor, filterCategory: filterCategory, filterName: filterName, filterStatus: filterStatus, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get a list of import job
     - GET /trivia/import
     - examples: [{output=none}]
     
     - parameter filterVendor: (query) Filter for jobs by vendor id (optional)
     - parameter filterCategory: (query) Filter for jobs by category id (optional)
     - parameter filterName: (query) Filter for jobs which name *STARTS* with the given string (optional)
     - parameter filterStatus: (query) Filter for jobs that are in a specific set of statuses (comma separated) (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)

     - returns: RequestBuilder<PageImportJobResource> 
     */
    open class func getListUsingGET1WithRequestBuilder(filterVendor: String? = nil, filterCategory: String? = nil, filterName: String? = nil, filterStatus: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageImportJobResource> {
        let path = "/trivia/import"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "filter_vendor": filterVendor,
            "filter_category": filterCategory,
            "filter_name": filterName,
            "filter_status": filterStatus,
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageImportJobResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a single question template
     
     - parameter id: (path) The id of the template 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQuestionTemplateUsingGET(id: String, completion: @escaping ((_ data: QuestionTemplateResource?,_ error: Error?) -> Void)) {
        getQuestionTemplateUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get a single question template
     - GET /trivia/questions/templates/{id}
     - examples: [{output=none}]
     
     - parameter id: (path) The id of the template 

     - returns: RequestBuilder<QuestionTemplateResource> 
     */
    open class func getQuestionTemplateUsingGETWithRequestBuilder(id: String) -> RequestBuilder<QuestionTemplateResource> {
        var path = "/trivia/questions/templates/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<QuestionTemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List and search question templates
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQuestionTemplatesUsingGET(size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: PageQuestionTemplateResource?,_ error: Error?) -> Void)) {
        getQuestionTemplatesUsingGETWithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List and search question templates
     - GET /trivia/questions/templates
     - examples: [{output=none}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)

     - returns: RequestBuilder<PageQuestionTemplateResource> 
     */
    open class func getQuestionTemplatesUsingGETWithRequestBuilder(size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageQuestionTemplateResource> {
        let path = "/trivia/questions/templates"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageQuestionTemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a single question
     
     - parameter id: (path) The id of the question 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQuestionUsingGET(id: String, completion: @escaping ((_ data: QuestionResource?,_ error: Error?) -> Void)) {
        getQuestionUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get a single question
     - GET /trivia/questions/{id}
     - examples: [{output=none}]
     
     - parameter id: (path) The id of the question 

     - returns: RequestBuilder<QuestionResource> 
     */
    open class func getQuestionUsingGETWithRequestBuilder(id: String) -> RequestBuilder<QuestionResource> {
        var path = "/trivia/questions/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<QuestionResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List question deltas in ascending order of updated date
     
     - parameter since: (query) Timestamp in seconds (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQuestionsDeltaUsingGET(since: Int64? = nil, completion: @escaping ((_ data: [DeltaResource]?,_ error: Error?) -> Void)) {
        getQuestionsDeltaUsingGETWithRequestBuilder(since: since).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List question deltas in ascending order of updated date
     - GET /trivia/questions/delta
     - The 'since' parameter is important to avoid getting a full list of all questions. Implementors should make sure they pass the updated date of the last resource loaded, not the date of the last request, in order to avoid gaps
     - examples: [{output=none}]
     
     - parameter since: (query) Timestamp in seconds (optional)

     - returns: RequestBuilder<[DeltaResource]> 
     */
    open class func getQuestionsDeltaUsingGETWithRequestBuilder(since: Int64? = nil) -> RequestBuilder<[DeltaResource]> {
        let path = "/trivia/questions/delta"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "since": since?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[DeltaResource]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     List and search questions
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     - parameter filterSearch: (query) Filter for documents whose question, answers or tags contains provided string (optional)
     - parameter filterIdset: (query) Filter for documents whose id is in the comma separated list provided (optional)
     - parameter filterCategory: (query) Filter for questions with specified category, by id (optional)
     - parameter filterTagset: (query) Filter for questions with specified tags (separated by comma) (optional)
     - parameter filterType: (query) Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     - parameter filterPublished: (query) Filter for questions currenctly published or not (optional)
     - parameter filterImportId: (query) Filter for questions from a specific import job (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQuestionsUsingGET(size: Int32? = nil, page: Int32? = nil, order: String? = nil, filterSearch: String? = nil, filterIdset: String? = nil, filterCategory: String? = nil, filterTagset: String? = nil, filterType: String? = nil, filterPublished: Bool? = nil, filterImportId: Int64? = nil, completion: @escaping ((_ data: PageQuestionResource?,_ error: Error?) -> Void)) {
        getQuestionsUsingGETWithRequestBuilder(size: size, page: page, order: order, filterSearch: filterSearch, filterIdset: filterIdset, filterCategory: filterCategory, filterTagset: filterTagset, filterType: filterType, filterPublished: filterPublished, filterImportId: filterImportId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List and search questions
     - GET /trivia/questions
     - examples: [{output=none}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     - parameter filterSearch: (query) Filter for documents whose question, answers or tags contains provided string (optional)
     - parameter filterIdset: (query) Filter for documents whose id is in the comma separated list provided (optional)
     - parameter filterCategory: (query) Filter for questions with specified category, by id (optional)
     - parameter filterTagset: (query) Filter for questions with specified tags (separated by comma) (optional)
     - parameter filterType: (query) Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     - parameter filterPublished: (query) Filter for questions currenctly published or not (optional)
     - parameter filterImportId: (query) Filter for questions from a specific import job (optional)

     - returns: RequestBuilder<PageQuestionResource> 
     */
    open class func getQuestionsUsingGETWithRequestBuilder(size: Int32? = nil, page: Int32? = nil, order: String? = nil, filterSearch: String? = nil, filterIdset: String? = nil, filterCategory: String? = nil, filterTagset: String? = nil, filterType: String? = nil, filterPublished: Bool? = nil, filterImportId: Int64? = nil) -> RequestBuilder<PageQuestionResource> {
        let path = "/trivia/questions"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order,
            "filter_search": filterSearch,
            "filter_idset": filterIdset,
            "filter_category": filterCategory,
            "filter_tagset": filterTagset,
            "filter_type": filterType,
            "filter_published": filterPublished,
            "filter_import_id": filterImportId?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageQuestionResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     List the tags for a question
     
     - parameter id: (path) The id of the question 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTagsUsingGET1(id: String, completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        getTagsUsingGET1WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List the tags for a question
     - GET /trivia/questions/{id}/tags
     - examples: [{output=none}]
     
     - parameter id: (path) The id of the question 

     - returns: RequestBuilder<[String]> 
     */
    open class func getTagsUsingGET1WithRequestBuilder(id: String) -> RequestBuilder<[String]> {
        var path = "/trivia/questions/{id}/tags"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[String]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List and search tags by the beginning of the string
     
     - parameter filterSearch: (query) Filter for tags starting with the given text (optional)
     - parameter filterCategory: (query) Filter for tags on questions from a specific category (optional)
     - parameter filterImportId: (query) Filter for tags on questions from a specific import job (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTagsUsingGET2(filterSearch: String? = nil, filterCategory: String? = nil, filterImportId: Int64? = nil, completion: @escaping ((_ data: Collectionstring?,_ error: Error?) -> Void)) {
        getTagsUsingGET2WithRequestBuilder(filterSearch: filterSearch, filterCategory: filterCategory, filterImportId: filterImportId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List and search tags by the beginning of the string
     - GET /trivia/tags
     - For performance reasons, search & category filters are mutually exclusive. If category is specified, search filter will be ignored in order to do fast matches for typeahead.
     - examples: [{output=none}]
     
     - parameter filterSearch: (query) Filter for tags starting with the given text (optional)
     - parameter filterCategory: (query) Filter for tags on questions from a specific category (optional)
     - parameter filterImportId: (query) Filter for tags on questions from a specific import job (optional)

     - returns: RequestBuilder<Collectionstring> 
     */
    open class func getTagsUsingGET2WithRequestBuilder(filterSearch: String? = nil, filterCategory: String? = nil, filterImportId: Int64? = nil) -> RequestBuilder<Collectionstring> {
        let path = "/trivia/tags"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "filter_search": filterSearch,
            "filter_category": filterCategory,
            "filter_import_id": filterImportId?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Collectionstring>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get an import job
     
     - parameter id: (path) The id of the job 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsingGET(id: Int64, completion: @escaping ((_ data: ImportJobResource?,_ error: Error?) -> Void)) {
        getUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get an import job
     - GET /trivia/import/{id}
     - examples: [{output=none}]
     
     - parameter id: (path) The id of the job 

     - returns: RequestBuilder<ImportJobResource> 
     */
    open class func getUsingGETWithRequestBuilder(id: Int64) -> RequestBuilder<ImportJobResource> {
        var path = "/trivia/import/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ImportJobResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Remove an answer from a question
     
     - parameter questionId: (path) The id of the question 
     - parameter id: (path) The id of the answer 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeAnswersUsingDELETE(questionId: String, id: String, completion: @escaping ((_ error: Error?) -> Void)) {
        removeAnswersUsingDELETEWithRequestBuilder(questionId: questionId, id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Remove an answer from a question
     - DELETE /trivia/questions/{questionId}/answers/{id}
     
     - parameter questionId: (path) The id of the question 
     - parameter id: (path) The id of the answer 

     - returns: RequestBuilder<Void> 
     */
    open class func removeAnswersUsingDELETEWithRequestBuilder(questionId: String, id: String) -> RequestBuilder<Void> {
        var path = "/trivia/questions/{questionId}/answers/{id}"
        path = path.replacingOccurrences(of: "{questionId}", with: "\(questionId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Remove a tag from a question
     
     - parameter id: (path) The id of the question 
     - parameter tag: (path) The tag to remove 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeTagUsingDELETE(id: String, tag: String, completion: @escaping ((_ error: Error?) -> Void)) {
        removeTagUsingDELETEWithRequestBuilder(id: id, tag: tag).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Remove a tag from a question
     - DELETE /trivia/questions/{id}/tags/{tag}
     
     - parameter id: (path) The id of the question 
     - parameter tag: (path) The tag to remove 

     - returns: RequestBuilder<Void> 
     */
    open class func removeTagUsingDELETEWithRequestBuilder(id: String, tag: String) -> RequestBuilder<Void> {
        var path = "/trivia/questions/{id}/tags/{tag}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{tag}", with: "\(tag)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Start processing an import job
     
     - parameter id: (path) The id of the job 
     - parameter publishNow: (query) Whether the new questions should be published live immediately 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func startProcessUsingPOST(id: Int64, publishNow: Bool, completion: @escaping ((_ data: ImportJobResource?,_ error: Error?) -> Void)) {
        startProcessUsingPOSTWithRequestBuilder(id: id, publishNow: publishNow).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Start processing an import job
     - POST /trivia/import/{id}/process
     - Will process the CSV file and add new questions asynchronously. The status of the job must be 'VALID'.
     - examples: [{output=none}]
     
     - parameter id: (path) The id of the job 
     - parameter publishNow: (query) Whether the new questions should be published live immediately 

     - returns: RequestBuilder<ImportJobResource> 
     */
    open class func startProcessUsingPOSTWithRequestBuilder(id: Int64, publishNow: Bool) -> RequestBuilder<ImportJobResource> {
        var path = "/trivia/import/{id}/process"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "publish_now": publishNow
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ImportJobResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Update an answer for a question
     
     - parameter questionId: (path) The id of the question 
     - parameter id: (path) The id of the answer 
     - parameter answer: (body) The updated answer (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateAnswerUsingPUT(questionId: String, id: String, answer: AnswerResource? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        updateAnswerUsingPUTWithRequestBuilder(questionId: questionId, id: id, answer: answer).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update an answer for a question
     - PUT /trivia/questions/{questionId}/answers/{id}
     
     - parameter questionId: (path) The id of the question 
     - parameter id: (path) The id of the answer 
     - parameter answer: (body) The updated answer (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateAnswerUsingPUTWithRequestBuilder(questionId: String, id: String, answer: AnswerResource? = nil) -> RequestBuilder<Void> {
        var path = "/trivia/questions/{questionId}/answers/{id}"
        path = path.replacingOccurrences(of: "{questionId}", with: "\(questionId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = answer?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a question template
     
     - parameter id: (path) The id of the template 
     - parameter questionTemplateResource: (body) The question template resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateQuestionTemplateUsingPUT(id: String, questionTemplateResource: QuestionTemplateResource? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        updateQuestionTemplateUsingPUTWithRequestBuilder(id: id, questionTemplateResource: questionTemplateResource).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update a question template
     - PUT /trivia/questions/templates/{id}
     
     - parameter id: (path) The id of the template 
     - parameter questionTemplateResource: (body) The question template resource object (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateQuestionTemplateUsingPUTWithRequestBuilder(id: String, questionTemplateResource: QuestionTemplateResource? = nil) -> RequestBuilder<Void> {
        var path = "/trivia/questions/templates/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = questionTemplateResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a question
     
     - parameter id: (path) The id of the question 
     - parameter question: (body) The updated question (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateQuestionUsingPUT(id: String, question: QuestionResource? = nil, completion: @escaping ((_ data: QuestionResource?,_ error: Error?) -> Void)) {
        updateQuestionUsingPUTWithRequestBuilder(id: id, question: question).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Update a question
     - PUT /trivia/questions/{id}
     - examples: [{output=none}]
     
     - parameter id: (path) The id of the question 
     - parameter question: (body) The updated question (optional)

     - returns: RequestBuilder<QuestionResource> 
     */
    open class func updateQuestionUsingPUTWithRequestBuilder(id: String, question: QuestionResource? = nil) -> RequestBuilder<QuestionResource> {
        var path = "/trivia/questions/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = question?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<QuestionResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an import job
     
     - parameter id: (path) The id of the job 
     - parameter request: (body) The updated job (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUsingPUT(id: Int64, request: ImportJobResource? = nil, completion: @escaping ((_ data: ImportJobResource?,_ error: Error?) -> Void)) {
        updateUsingPUTWithRequestBuilder(id: id, request: request).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Update an import job
     - PUT /trivia/import/{id}
     - Changes should be made before process is started for there to be any effect.
     - examples: [{output=none}]
     
     - parameter id: (path) The id of the job 
     - parameter request: (body) The updated job (optional)

     - returns: RequestBuilder<ImportJobResource> 
     */
    open class func updateUsingPUTWithRequestBuilder(id: Int64, request: ImportJobResource? = nil) -> RequestBuilder<ImportJobResource> {
        var path = "/trivia/import/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = request?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ImportJobResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
