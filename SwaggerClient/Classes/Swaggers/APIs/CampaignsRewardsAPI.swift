//
// CampaignsRewardsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class CampaignsRewardsAPI: APIBase {
    /**
     Create a reward set
     
     - parameter rewardSetResource: (body) The reward set resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createRewardSetUsingPOST(rewardSetResource: RewardSetResource? = nil, completion: @escaping ((_ data: RewardSetResource?,_ error: Error?) -> Void)) {
        createRewardSetUsingPOSTWithRequestBuilder(rewardSetResource: rewardSetResource).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create a reward set
     - POST /rewards
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "short_description" : "aeiou",
  "unique_key" : "aeiou",
  "currency_rewards" : [ {
    "currency_name" : "aeiou",
    "max_rank" : 123,
    "min_rank" : 123,
    "percent" : false,
    "value" : 1.3579000000000001069366817318950779736042022705078125,
    "currency_code" : "aeiou"
  } ],
  "name" : "aeiou",
  "created_date" : 123456789,
  "id" : 123,
  "long_description" : "aeiou",
  "max_placing" : 123,
  "updated_date" : 123456789,
  "item_rewards" : [ {
    "quantity" : 123,
    "item_id" : 123,
    "max_rank" : 123,
    "item_name" : "aeiou",
    "min_rank" : 123
  } ]
}}]
     
     - parameter rewardSetResource: (body) The reward set resource object (optional)

     - returns: RequestBuilder<RewardSetResource> 
     */
    open class func createRewardSetUsingPOSTWithRequestBuilder(rewardSetResource: RewardSetResource? = nil) -> RequestBuilder<RewardSetResource> {
        let path = "/rewards"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = rewardSetResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<RewardSetResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a reward set
     
     - parameter id: (path) The reward id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRewardSetUsingDELETE(id: Int32, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteRewardSetUsingDELETEWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete a reward set
     - DELETE /rewards/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The reward id 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRewardSetUsingDELETEWithRequestBuilder(id: Int32) -> RequestBuilder<Void> {
        var path = "/rewards/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a single reward set
     
     - parameter id: (path) The reward id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRewardSetUsingGET(id: Int32, completion: @escaping ((_ data: RewardSetResource?,_ error: Error?) -> Void)) {
        getRewardSetUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get a single reward set
     - GET /rewards/{id}
     - examples: [{contentType=application/json, example={
  "short_description" : "aeiou",
  "unique_key" : "aeiou",
  "currency_rewards" : [ {
    "currency_name" : "aeiou",
    "max_rank" : 123,
    "min_rank" : 123,
    "percent" : false,
    "value" : 1.3579000000000001069366817318950779736042022705078125,
    "currency_code" : "aeiou"
  } ],
  "name" : "aeiou",
  "created_date" : 123456789,
  "id" : 123,
  "long_description" : "aeiou",
  "max_placing" : 123,
  "updated_date" : 123456789,
  "item_rewards" : [ {
    "quantity" : 123,
    "item_id" : 123,
    "max_rank" : 123,
    "item_name" : "aeiou",
    "min_rank" : 123
  } ]
}}]
     
     - parameter id: (path) The reward id 

     - returns: RequestBuilder<RewardSetResource> 
     */
    open class func getRewardSetUsingGETWithRequestBuilder(id: Int32) -> RequestBuilder<RewardSetResource> {
        var path = "/rewards/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<RewardSetResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List and search reward sets
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRewardSetsUsingGET(size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: PageRewardSetResource?,_ error: Error?) -> Void)) {
        getRewardSetsUsingGETWithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List and search reward sets
     - GET /rewards
     - examples: [{contentType=application/json, example={
  "number" : 123,
  "last" : true,
  "size" : 123,
  "total_elements" : 123456789,
  "sort" : { },
  "total_pages" : 123,
  "number_of_elements" : 123,
  "content" : [ {
    "short_description" : "aeiou",
    "unique_key" : "aeiou",
    "currency_rewards" : [ {
      "currency_name" : "aeiou",
      "max_rank" : 123,
      "min_rank" : 123,
      "percent" : false,
      "value" : 1.3579000000000001069366817318950779736042022705078125,
      "currency_code" : "aeiou"
    } ],
    "name" : "aeiou",
    "created_date" : 123456789,
    "id" : 123,
    "long_description" : "aeiou",
    "max_placing" : 123,
    "updated_date" : 123456789,
    "item_rewards" : [ {
      "quantity" : 123,
      "item_id" : 123,
      "max_rank" : 123,
      "item_name" : "aeiou",
      "min_rank" : 123
    } ]
  } ],
  "first" : true
}}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)

     - returns: RequestBuilder<PageRewardSetResource> 
     */
    open class func getRewardSetsUsingGETWithRequestBuilder(size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageRewardSetResource> {
        let path = "/rewards"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageRewardSetResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Update a reward set
     
     - parameter id: (path) The reward id 
     - parameter rewardSetResource: (body) The reward set resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateRewardSetUsingPUT(id: Int32, rewardSetResource: RewardSetResource? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        updateRewardSetUsingPUTWithRequestBuilder(id: id, rewardSetResource: rewardSetResource).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update a reward set
     - PUT /rewards/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The reward id 
     - parameter rewardSetResource: (body) The reward set resource object (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateRewardSetUsingPUTWithRequestBuilder(id: Int32, rewardSetResource: RewardSetResource? = nil) -> RequestBuilder<Void> {
        var path = "/rewards/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = rewardSetResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
