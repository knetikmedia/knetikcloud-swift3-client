//
// UsersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class UsersAPI: APIBase {
    /**
     Add a tag to a user
     
     - parameter userId: (path) The id of the user 
     - parameter tag: (body) tag 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addTagUsingPOST1(userId: Int32, tag: String, completion: @escaping ((_ error: Error?) -> Void)) {
        addTagUsingPOST1WithRequestBuilder(userId: userId, tag: tag).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Add a tag to a user
     - POST /users/{userId}/tags
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter userId: (path) The id of the user 
     - parameter tag: (body) tag 

     - returns: RequestBuilder<Void> 
     */
    open class func addTagUsingPOST1WithRequestBuilder(userId: Int32, tag: String) -> RequestBuilder<Void> {
        var path = "/users/{userId}/tags"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = tag.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a user template
     
     - parameter userTemplateResource: (body) The user template resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createUserTemplateUsingPOST(userTemplateResource: TemplateResource? = nil, completion: @escaping ((_ data: TemplateResource?,_ error: Error?) -> Void)) {
        createUserTemplateUsingPOSTWithRequestBuilder(userTemplateResource: userTemplateResource).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create a user template
     - POST /users/templates
     - User Templates define a type of user and the properties they have
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{output=none}]
     
     - parameter userTemplateResource: (body) The user template resource object (optional)

     - returns: RequestBuilder<TemplateResource> 
     */
    open class func createUserTemplateUsingPOSTWithRequestBuilder(userTemplateResource: TemplateResource? = nil) -> RequestBuilder<TemplateResource> {
        let path = "/users/templates"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = userTemplateResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a user template
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) The value needed to delete used templates (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUserTemplateUsingDELETE(id: String, cascade: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteUserTemplateUsingDELETEWithRequestBuilder(id: id, cascade: cascade).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete a user template
     - DELETE /users/templates/{id}
     - If cascade = 'detach', it will force delete the template even if it's attached to other objects
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) The value needed to delete used templates (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteUserTemplateUsingDELETEWithRequestBuilder(id: String, cascade: String? = nil) -> RequestBuilder<Void> {
        var path = "/users/templates/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "cascade": cascade
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Choose a new password after a reset
     
     - parameter id: (path) The id of the user 
     - parameter newPasswordRequest: (body) The new password request object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func doPasswordResetUsingPUT(id: Int32, newPasswordRequest: NewPasswordRequest? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        doPasswordResetUsingPUTWithRequestBuilder(id: id, newPasswordRequest: newPasswordRequest).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Choose a new password after a reset
     - PUT /users/{id}/password-reset
     - Finish resetting a user's password using the secret provided from the password-reset endpoint.  Password should be in plain text and will be encrypted on receipt. Use SSL for security.
     
     - parameter id: (path) The id of the user 
     - parameter newPasswordRequest: (body) The new password request object (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func doPasswordResetUsingPUTWithRequestBuilder(id: Int32, newPasswordRequest: NewPasswordRequest? = nil) -> RequestBuilder<Void> {
        var path = "/users/{id}/password-reset"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = newPasswordRequest?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List tags for a user
     
     - parameter userId: (path) The id of the user 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTagsUsingGET3(userId: Int32, completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        getTagsUsingGET3WithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List tags for a user
     - GET /users/{userId}/tags
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{output=none}]
     
     - parameter userId: (path) The id of the user 

     - returns: RequestBuilder<[String]> 
     */
    open class func getTagsUsingGET3WithRequestBuilder(userId: Int32) -> RequestBuilder<[String]> {
        var path = "/users/{userId}/tags"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[String]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a single user template
     
     - parameter id: (path) The id of the template 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserTemplateUsingGET(id: String, completion: @escaping ((_ data: TemplateResource?,_ error: Error?) -> Void)) {
        getUserTemplateUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get a single user template
     - GET /users/templates/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{output=none}]
     
     - parameter id: (path) The id of the template 

     - returns: RequestBuilder<TemplateResource> 
     */
    open class func getUserTemplateUsingGETWithRequestBuilder(id: String) -> RequestBuilder<TemplateResource> {
        var path = "/users/templates/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List and search user templates
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserTemplatesUsingGET(size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: PageTemplateResource?,_ error: Error?) -> Void)) {
        getUserTemplatesUsingGETWithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List and search user templates
     - GET /users/templates
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{output=none}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)

     - returns: RequestBuilder<PageTemplateResource> 
     */
    open class func getUserTemplatesUsingGETWithRequestBuilder(size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageTemplateResource> {
        let path = "/users/templates"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageTemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a single user
     
     - parameter id: (path) The id of the user or &#39;me&#39; 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserUsingGET(id: String, completion: @escaping ((_ data: UserResource?,_ error: Error?) -> Void)) {
        getUserUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get a single user
     - GET /users/{id}
     - Additional private info is included as USERS_ADMIN
     - examples: [{output=none}]
     
     - parameter id: (path) The id of the user or &#39;me&#39; 

     - returns: RequestBuilder<UserResource> 
     */
    open class func getUserUsingGETWithRequestBuilder(id: String) -> RequestBuilder<UserResource> {
        var path = "/users/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<UserResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List and search users
     
     - parameter filterRole: (query) Filter for users whose roles has the provided role (optional)
     - parameter filterDisplayname: (query) Filter for users whose display name starts with provided string. (optional)
     - parameter filterEmail: (query) Filter for users whose email starts with provided string. Requires USERS_ADMIN permission (optional)
     - parameter filterFirstname: (query) Filter for users whose first name starts with provided string. Requires USERS_ADMIN permission (optional)
     - parameter filterFullname: (query) Filter for users whose full name starts with provided string. Requires USERS_ADMIN permission (optional)
     - parameter filterLastname: (query) Filter for users whose last name starts with provided string. Requires USERS_ADMIN permission (optional)
     - parameter filterUsername: (query) Filter for users whose username starts with the provided string. Requires USERS_ADMIN permission (optional)
     - parameter filterTag: (query) Filter for users who have a given tag (optional)
     - parameter filterGroup: (query) Filter for users in a given group, by unique name (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsersUsingGET(filterRole: String? = nil, filterDisplayname: String? = nil, filterEmail: String? = nil, filterFirstname: String? = nil, filterFullname: String? = nil, filterLastname: String? = nil, filterUsername: String? = nil, filterTag: String? = nil, filterGroup: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: PageUserBaseResource?,_ error: Error?) -> Void)) {
        getUsersUsingGETWithRequestBuilder(filterRole: filterRole, filterDisplayname: filterDisplayname, filterEmail: filterEmail, filterFirstname: filterFirstname, filterFullname: filterFullname, filterLastname: filterLastname, filterUsername: filterUsername, filterTag: filterTag, filterGroup: filterGroup, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List and search users
     - GET /users
     - Additional private info is included as USERS_ADMIN
     - examples: [{output=none}]
     
     - parameter filterRole: (query) Filter for users whose roles has the provided role (optional)
     - parameter filterDisplayname: (query) Filter for users whose display name starts with provided string. (optional)
     - parameter filterEmail: (query) Filter for users whose email starts with provided string. Requires USERS_ADMIN permission (optional)
     - parameter filterFirstname: (query) Filter for users whose first name starts with provided string. Requires USERS_ADMIN permission (optional)
     - parameter filterFullname: (query) Filter for users whose full name starts with provided string. Requires USERS_ADMIN permission (optional)
     - parameter filterLastname: (query) Filter for users whose last name starts with provided string. Requires USERS_ADMIN permission (optional)
     - parameter filterUsername: (query) Filter for users whose username starts with the provided string. Requires USERS_ADMIN permission (optional)
     - parameter filterTag: (query) Filter for users who have a given tag (optional)
     - parameter filterGroup: (query) Filter for users in a given group, by unique name (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)

     - returns: RequestBuilder<PageUserBaseResource> 
     */
    open class func getUsersUsingGETWithRequestBuilder(filterRole: String? = nil, filterDisplayname: String? = nil, filterEmail: String? = nil, filterFirstname: String? = nil, filterFullname: String? = nil, filterLastname: String? = nil, filterUsername: String? = nil, filterTag: String? = nil, filterGroup: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageUserBaseResource> {
        let path = "/users"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "filter_role": filterRole,
            "filter_displayname": filterDisplayname,
            "filter_email": filterEmail,
            "filter_firstname": filterFirstname,
            "filter_fullname": filterFullname,
            "filter_lastname": filterLastname,
            "filter_username": filterUsername,
            "filter_tag": filterTag,
            "filter_group": filterGroup,
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageUserBaseResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Reset a user's password
     
     - parameter id: (path) The id of the user 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func initiatePasswordResetUsingPOST(id: Int32, completion: @escaping ((_ error: Error?) -> Void)) {
        initiatePasswordResetUsingPOSTWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Reset a user's password
     - POST /users/{id}/password-reset
     - A reset code will be generated and a 'forgot_password' BRE event will be fired with that code; this can be routed to the user as needed and submitted to the 'choose a new password' endpoint.
     
     - parameter id: (path) The id of the user 

     - returns: RequestBuilder<Void> 
     */
    open class func initiatePasswordResetUsingPOSTWithRequestBuilder(id: Int32) -> RequestBuilder<Void> {
        var path = "/users/{id}/password-reset"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Register a new user
     
     - parameter userResource: (body) The user resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func registerUserUsingPOST(userResource: UserResource? = nil, completion: @escaping ((_ data: UserResource?,_ error: Error?) -> Void)) {
        registerUserUsingPOSTWithRequestBuilder(userResource: userResource).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Register a new user
     - POST /users
     - Password should be in plain text and will be encrypted on receipt. Use SSL for security
     - examples: [{output=none}]
     
     - parameter userResource: (body) The user resource object (optional)

     - returns: RequestBuilder<UserResource> 
     */
    open class func registerUserUsingPOSTWithRequestBuilder(userResource: UserResource? = nil) -> RequestBuilder<UserResource> {
        let path = "/users"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = userResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<UserResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Remove a tag from a user
     
     - parameter userId: (path) The id of the user 
     - parameter tag: (path) The tag to remove 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeTagUsingDELETE1(userId: Int32, tag: String, completion: @escaping ((_ error: Error?) -> Void)) {
        removeTagUsingDELETE1WithRequestBuilder(userId: userId, tag: tag).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Remove a tag from a user
     - DELETE /users/{userId}/tags/{tag}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter userId: (path) The id of the user 
     - parameter tag: (path) The tag to remove 

     - returns: RequestBuilder<Void> 
     */
    open class func removeTagUsingDELETE1WithRequestBuilder(userId: Int32, tag: String) -> RequestBuilder<Void> {
        var path = "/users/{userId}/tags/{tag}"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{tag}", with: "\(tag)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Set a user's password
     
     - parameter id: (path) The id of the user 
     - parameter password: (body) The new plain text password (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setPasswordUsingPUT(id: Int32, password: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        setPasswordUsingPUTWithRequestBuilder(id: id, password: password).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Set a user's password
     - PUT /users/{id}/password
     - Password should be in plain text and will be encrypted on receipt. Use SSL for security.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The id of the user 
     - parameter password: (body) The new plain text password (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func setPasswordUsingPUTWithRequestBuilder(id: Int32, password: String? = nil) -> RequestBuilder<Void> {
        var path = "/users/{id}/password"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = password?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a user template
     
     - parameter id: (path) The id of the template 
     - parameter userTemplateResource: (body) The user template resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUserTemplateUsingPUT(id: String, userTemplateResource: TemplateResource? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        updateUserTemplateUsingPUTWithRequestBuilder(id: id, userTemplateResource: userTemplateResource).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update a user template
     - PUT /users/templates/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The id of the template 
     - parameter userTemplateResource: (body) The user template resource object (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateUserTemplateUsingPUTWithRequestBuilder(id: String, userTemplateResource: TemplateResource? = nil) -> RequestBuilder<Void> {
        var path = "/users/templates/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = userTemplateResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a user's info
     
     - parameter id: (path) The id of the user or &#39;me&#39; 
     - parameter userResource: (body) The user resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUserUsingPUT(id: String, userResource: UserResource? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        updateUserUsingPUTWithRequestBuilder(id: id, userResource: userResource).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update a user's info
     - PUT /users/{id}
     - Password will not be edited on this endpoint, use password specific endpoints.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The id of the user or &#39;me&#39; 
     - parameter userResource: (body) The user resource object (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateUserUsingPUTWithRequestBuilder(id: String, userResource: UserResource? = nil) -> RequestBuilder<Void> {
        var path = "/users/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = userResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
