//
// ContentCommentsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class ContentCommentsAPI: APIBase {
    /**
     Add a new comment
     
     - parameter commentResource: (body) The comment to be added (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addCommentUsingPOST(commentResource: CommentResource? = nil, completion: @escaping ((_ data: CommentResource?,_ error: Error?) -> Void)) {
        addCommentUsingPOSTWithRequestBuilder(commentResource: commentResource).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Add a new comment
     - POST /comments
     - examples: [{output=none}]
     
     - parameter commentResource: (body) The comment to be added (optional)

     - returns: RequestBuilder<CommentResource> 
     */
    open class func addCommentUsingPOSTWithRequestBuilder(commentResource: CommentResource? = nil) -> RequestBuilder<CommentResource> {
        let path = "/comments"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = commentResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CommentResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a comment
     
     - parameter id: (path) The comment id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteCommentUsingDELETE(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteCommentUsingDELETEWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete a comment
     - DELETE /comments/{id}
     
     - parameter id: (path) The comment id 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteCommentUsingDELETEWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/comments/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Returns a comment by comment id
     
     - parameter id: (path) The comment id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCommentUsingGET(id: Int64, completion: @escaping ((_ data: CommentResource?,_ error: Error?) -> Void)) {
        getCommentUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Returns a comment by comment id
     - GET /comments/{id}
     - examples: [{output=none}]
     
     - parameter id: (path) The comment id 

     - returns: RequestBuilder<CommentResource> 
     */
    open class func getCommentUsingGETWithRequestBuilder(id: Int64) -> RequestBuilder<CommentResource> {
        var path = "/comments/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CommentResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Returns a page of comments
     
     - parameter context: (query) Get comments by context type 
     - parameter contextId: (query) Get comments by context id 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCommentsUsingGET(context: String, contextId: Int32, size: Int32? = nil, page: Int32? = nil, completion: @escaping ((_ data: PageCommentResource?,_ error: Error?) -> Void)) {
        getCommentsUsingGETWithRequestBuilder(context: context, contextId: contextId, size: size, page: page).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Returns a page of comments
     - GET /comments
     - examples: [{output=none}]
     
     - parameter context: (query) Get comments by context type 
     - parameter contextId: (query) Get comments by context id 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)

     - returns: RequestBuilder<PageCommentResource> 
     */
    open class func getCommentsUsingGETWithRequestBuilder(context: String, contextId: Int32, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<PageCommentResource> {
        let path = "/comments"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "context": context,
            "context_id": contextId.encodeToJSON(),
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageCommentResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Search the comment index
     
     - parameter query: (body) The search query (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func searchCommentsUsingPOST(query: Any? = nil, size: Int32? = nil, page: Int32? = nil, completion: @escaping ((_ data: CommentSearch?,_ error: Error?) -> Void)) {
        searchCommentsUsingPOSTWithRequestBuilder(query: query, size: size, page: page).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Search the comment index
     - POST /comments/search
     - The body is an ElasticSearch query json. Please see their <a href='https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html'>documentation</a> for details on the format and search options
     - examples: [{output=none}]
     
     - parameter query: (body) The search query (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)

     - returns: RequestBuilder<CommentSearch> 
     */
    open class func searchCommentsUsingPOSTWithRequestBuilder(query: Any? = nil, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<CommentSearch> {
        let path = "/comments/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = query?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CommentSearch>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Update comment content
     
     - parameter id: (path) The comment id 
     - parameter content: (body) The comment content (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateCommentUsingPUT(id: Int64, content: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        updateCommentUsingPUTWithRequestBuilder(id: id, content: content).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update comment content
     - PUT /comments/{id}/content
     
     - parameter id: (path) The comment id 
     - parameter content: (body) The comment content (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateCommentUsingPUTWithRequestBuilder(id: Int64, content: String? = nil) -> RequestBuilder<Void> {
        var path = "/comments/{id}/content"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = content?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
