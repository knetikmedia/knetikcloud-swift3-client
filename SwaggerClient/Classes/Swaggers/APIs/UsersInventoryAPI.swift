//
// UsersInventoryAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class UsersInventoryAPI: APIBase {
    /**
     Adds an item to the user inventory
     
     - parameter id: (path) The id of the user 
     - parameter userInventoryAddRequest: (body) The user inventory add request object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addItemToUserInventory(id: Int32, userInventoryAddRequest: UserInventoryAddRequest? = nil, completion: @escaping ((_ data: InvoiceResource?,_ error: Error?) -> Void)) {
        addItemToUserInventoryWithRequestBuilder(id: id, userInventoryAddRequest: userInventoryAddRequest).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Adds an item to the user inventory
     - POST /users/{id}/inventory
     - The inventory is fulfilled asynchronously UNLESS the invoice is explicitely skipped. Depending on the use case, it might require the client to verify that the entitlement was added after the fact or configure a BRE rule to get a notification in real time
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "shipping_city_name" : "aeiou",
  "order_notes" : "aeiou",
  "parent_invoice_id" : 8,
  "discount" : 9.777061338403021,
  "state_tax" : 7.834430296736397,
  "cart_id" : "aeiou",
  "name_prefix" : "aeiou",
  "billing_postal_code" : "aeiou",
  "shipping" : 7.2153165964861445,
  "billing_state_name" : "aeiou",
  "billing_country_name" : "aeiou",
  "currency" : "aeiou",
  "current_fulfillment_status" : "aeiou",
  "grand_total" : 0.47711403140365594,
  "id" : 5,
  "current_payment_status" : "aeiou",
  "billing_address1" : "aeiou",
  "invoice_number" : "aeiou",
  "billing_address2" : "aeiou",
  "email" : "aeiou",
  "vendor_name" : "aeiou",
  "billing_full_name" : "aeiou",
  "sort" : 6,
  "shipping_full_name" : "aeiou",
  "fed_tax" : 0.797453337376276,
  "payment_method_id" : 3,
  "phone" : "aeiou",
  "external_ref" : "aeiou",
  "shipping_address2" : "aeiou",
  "subtotal" : 9.99788372800883,
  "shipping_address1" : "aeiou",
  "vendor_id" : 4,
  "shipping_state_name" : "aeiou",
  "billing_city_name" : "aeiou",
  "phone_number" : "aeiou",
  "created_date" : 6,
  "shipping_country_name" : "aeiou",
  "updated_date" : 1,
  "items" : [ {
    "type_hint" : "aeiou",
    "total_price" : 3.822250481016524,
    "affiliate_id" : 6,
    "item_id" : 5,
    "system_price" : 2.3232957857584866,
    "item_name" : "aeiou",
    "original_unit_price" : 8.01783372112763,
    "unit_price" : 1.478246213074228,
    "qty" : 0,
    "invoice_id" : 5,
    "current_fulfillment_status" : "aeiou",
    "id" : 4,
    "sale_name" : "aeiou",
    "bundle_sku" : "aeiou",
    "original_total_price" : 7.196580796334251,
    "sku" : "aeiou",
    "sku_description" : "aeiou"
  } ],
  "user" : {
    "avatar_url" : "aeiou",
    "id" : 6,
    "display_name" : "aeiou",
    "username" : "aeiou"
  },
  "shipping_postal_code" : "aeiou"
}}]
     
     - parameter id: (path) The id of the user 
     - parameter userInventoryAddRequest: (body) The user inventory add request object (optional)

     - returns: RequestBuilder<InvoiceResource> 
     */
    open class func addItemToUserInventoryWithRequestBuilder(id: Int32, userInventoryAddRequest: UserInventoryAddRequest? = nil) -> RequestBuilder<InvoiceResource> {
        var path = "/users/{id}/inventory"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = userInventoryAddRequest?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InvoiceResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Check for access to an item without consuming
     
     - parameter userId: (path) The id of the user to check for or &#39;me&#39; for logged in user 
     - parameter itemId: (path) The id of the item 
     - parameter sku: (query) The specific sku of an entitlement list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func checkUserEntitlementItem(userId: String, itemId: Int32, sku: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        checkUserEntitlementItemWithRequestBuilder(userId: userId, itemId: itemId, sku: sku).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Check for access to an item without consuming
     - GET /users/{userId}/entitlements/{itemId}/check
     - Useful for pre-check and accounts for all various buisness rules
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter userId: (path) The id of the user to check for or &#39;me&#39; for logged in user 
     - parameter itemId: (path) The id of the item 
     - parameter sku: (query) The specific sku of an entitlement list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func checkUserEntitlementItemWithRequestBuilder(userId: String, itemId: Int32, sku: String? = nil) -> RequestBuilder<Void> {
        var path = "/users/{userId}/entitlements/{itemId}/check"
        path = path.replacingOccurrences(of: "{user_id}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{item_id}", with: "\(itemId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "sku": sku
        ])
        

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create an entitlement item
     
     - parameter cascade: (query) Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (optional, default to false)
     - parameter entitlementItem: (body) The entitlement item object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createEntitlementItem(cascade: Bool? = nil, entitlementItem: EntitlementItem? = nil, completion: @escaping ((_ data: EntitlementItem?,_ error: Error?) -> Void)) {
        createEntitlementItemWithRequestBuilder(cascade: cascade, entitlementItem: entitlementItem).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create an entitlement item
     - POST /entitlements
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "template" : "aeiou",
  "short_description" : "aeiou",
  "type_hint" : "aeiou",
  "behaviors" : [ {
    "type_hint" : "aeiou"
  } ],
  "unique_key" : "aeiou",
  "long_description" : "aeiou",
  "sort" : 7,
  "tags" : [ "aeiou" ],
  "name" : "aeiou",
  "additional_properties" : {
    "key" : {
      "type" : "aeiou"
    }
  },
  "created_date" : 2,
  "id" : 6,
  "updated_date" : 3,
  "category" : "aeiou"
}}]
     
     - parameter cascade: (query) Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (optional, default to false)
     - parameter entitlementItem: (body) The entitlement item object (optional)

     - returns: RequestBuilder<EntitlementItem> 
     */
    open class func createEntitlementItemWithRequestBuilder(cascade: Bool? = nil, entitlementItem: EntitlementItem? = nil) -> RequestBuilder<EntitlementItem> {
        let path = "/entitlements"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = entitlementItem?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "cascade": cascade
        ])
        

        let requestBuilder: RequestBuilder<EntitlementItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create an entitlement template
     
     - parameter template: (body) The entitlement template to be created (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createEntitlementTemplate(template: ItemTemplateResource? = nil, completion: @escaping ((_ data: ItemTemplateResource?,_ error: Error?) -> Void)) {
        createEntitlementTemplateWithRequestBuilder(template: template).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create an entitlement template
     - POST /entitlements/templates
     - Entitlement templates define a type of entitlement and the properties they have
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "behaviors" : [ {
    "behavior" : {
      "type_hint" : "aeiou"
    },
    "modifiable" : false,
    "required" : false
  } ],
  "name" : "aeiou",
  "created_date" : 9,
  "id" : "aeiou",
  "updated_date" : 8,
  "properties" : [ {
    "name" : "aeiou",
    "type" : "aeiou",
    "required" : false
  } ]
}}]
     
     - parameter template: (body) The entitlement template to be created (optional)

     - returns: RequestBuilder<ItemTemplateResource> 
     */
    open class func createEntitlementTemplateWithRequestBuilder(template: ItemTemplateResource? = nil) -> RequestBuilder<ItemTemplateResource> {
        let path = "/entitlements/templates"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = template?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ItemTemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete an entitlement item
     
     - parameter entitlementId: (path) The id of the entitlement 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteEntitlementItem(entitlementId: Int32, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteEntitlementItemWithRequestBuilder(entitlementId: entitlementId).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete an entitlement item
     - DELETE /entitlements/{entitlementId}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter entitlementId: (path) The id of the entitlement 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteEntitlementItemWithRequestBuilder(entitlementId: Int32) -> RequestBuilder<Void> {
        var path = "/entitlements/{entitlementId}"
        path = path.replacingOccurrences(of: "{entitlement_id}", with: "\(entitlementId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete an entitlement template
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) The value needed to delete used templates (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteEntitlementTemplate(id: String, cascade: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteEntitlementTemplateWithRequestBuilder(id: id, cascade: cascade).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete an entitlement template
     - DELETE /entitlements/templates/{id}
     - If cascade = 'detach', it will force delete the template even if it's attached to other objects
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) The value needed to delete used templates (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteEntitlementTemplateWithRequestBuilder(id: String, cascade: String? = nil) -> RequestBuilder<Void> {
        var path = "/entitlements/templates/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "cascade": cascade
        ])
        

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a single entitlement item
     
     - parameter entitlementId: (path) The id of the entitlement 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEntitlementItem(entitlementId: Int32, completion: @escaping ((_ data: EntitlementItem?,_ error: Error?) -> Void)) {
        getEntitlementItemWithRequestBuilder(entitlementId: entitlementId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get a single entitlement item
     - GET /entitlements/{entitlementId}
     - examples: [{contentType=application/json, example={
  "template" : "aeiou",
  "short_description" : "aeiou",
  "type_hint" : "aeiou",
  "behaviors" : [ {
    "type_hint" : "aeiou"
  } ],
  "unique_key" : "aeiou",
  "long_description" : "aeiou",
  "sort" : 1,
  "tags" : [ "aeiou" ],
  "name" : "aeiou",
  "additional_properties" : {
    "key" : {
      "type" : "aeiou"
    }
  },
  "created_date" : 7,
  "id" : 1,
  "updated_date" : 4,
  "category" : "aeiou"
}}]
     
     - parameter entitlementId: (path) The id of the entitlement 

     - returns: RequestBuilder<EntitlementItem> 
     */
    open class func getEntitlementItemWithRequestBuilder(entitlementId: Int32) -> RequestBuilder<EntitlementItem> {
        var path = "/entitlements/{entitlementId}"
        path = path.replacingOccurrences(of: "{entitlement_id}", with: "\(entitlementId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<EntitlementItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List and search entitlement items
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEntitlementItems(size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: PageResourceEntitlementItem?,_ error: Error?) -> Void)) {
        getEntitlementItemsWithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List and search entitlement items
     - GET /entitlements
     - examples: [{contentType=application/json, example={
  "number" : 5,
  "last" : true,
  "size" : 8,
  "total_elements" : 4,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 9,
  "number_of_elements" : 4,
  "content" : [ {
    "template" : "aeiou",
    "short_description" : "aeiou",
    "type_hint" : "aeiou",
    "behaviors" : [ {
      "type_hint" : "aeiou"
    } ],
    "unique_key" : "aeiou",
    "long_description" : "aeiou",
    "sort" : 5,
    "tags" : [ "aeiou" ],
    "name" : "aeiou",
    "additional_properties" : {
      "key" : {
        "type" : "aeiou"
      }
    },
    "created_date" : 8,
    "id" : 1,
    "updated_date" : 4,
    "category" : "aeiou"
  } ],
  "first" : true
}}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)

     - returns: RequestBuilder<PageResourceEntitlementItem> 
     */
    open class func getEntitlementItemsWithRequestBuilder(size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceEntitlementItem> {
        let path = "/entitlements"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "size": size?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "order": order
        ])
        

        let requestBuilder: RequestBuilder<PageResourceEntitlementItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a single entitlement template
     
     - parameter id: (path) The id of the template 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEntitlementTemplate(id: String, completion: @escaping ((_ data: ItemTemplateResource?,_ error: Error?) -> Void)) {
        getEntitlementTemplateWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get a single entitlement template
     - GET /entitlements/templates/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "behaviors" : [ {
    "behavior" : {
      "type_hint" : "aeiou"
    },
    "modifiable" : false,
    "required" : false
  } ],
  "name" : "aeiou",
  "created_date" : 5,
  "id" : "aeiou",
  "updated_date" : 3,
  "properties" : [ {
    "name" : "aeiou",
    "type" : "aeiou",
    "required" : false
  } ]
}}]
     
     - parameter id: (path) The id of the template 

     - returns: RequestBuilder<ItemTemplateResource> 
     */
    open class func getEntitlementTemplateWithRequestBuilder(id: String) -> RequestBuilder<ItemTemplateResource> {
        var path = "/entitlements/templates/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ItemTemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List and search entitlement templates
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEntitlementTemplates(size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: PageResourceItemTemplateResource?,_ error: Error?) -> Void)) {
        getEntitlementTemplatesWithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List and search entitlement templates
     - GET /entitlements/templates
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 5,
  "last" : true,
  "size" : 8,
  "total_elements" : 0,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 6,
  "number_of_elements" : 2,
  "content" : [ {
    "behaviors" : [ {
      "behavior" : {
        "type_hint" : "aeiou"
      },
      "modifiable" : false,
      "required" : false
    } ],
    "name" : "aeiou",
    "created_date" : 5,
    "id" : "aeiou",
    "updated_date" : 0,
    "properties" : [ {
      "name" : "aeiou",
      "type" : "aeiou",
      "required" : false
    } ]
  } ],
  "first" : true
}}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)

     - returns: RequestBuilder<PageResourceItemTemplateResource> 
     */
    open class func getEntitlementTemplatesWithRequestBuilder(size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceItemTemplateResource> {
        let path = "/entitlements/templates"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "size": size?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "order": order
        ])
        

        let requestBuilder: RequestBuilder<PageResourceItemTemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List the user inventory entries for a given user
     
     - parameter id: (path) The id of the user 
     - parameter inactive: (query) If true, accepts inactive user inventories (optional, default to false)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter filterItemName: (query) Filter by items whose name starts with a string (optional)
     - parameter filterItemId: (query) Filter by item id (optional)
     - parameter filterUsername: (query) Filter by entries owned by the user with the specified username (optional)
     - parameter filterGroup: (query) Filter by entries owned by the users in a given group, by unique name (optional)
     - parameter filterDate: (query) A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserInventories(id: Int32, inactive: Bool? = nil, size: Int32? = nil, page: Int32? = nil, filterItemName: String? = nil, filterItemId: Int32? = nil, filterUsername: String? = nil, filterGroup: String? = nil, filterDate: String? = nil, completion: @escaping ((_ data: PageResourceUserInventoryResource?,_ error: Error?) -> Void)) {
        getUserInventoriesWithRequestBuilder(id: id, inactive: inactive, size: size, page: page, filterItemName: filterItemName, filterItemId: filterItemId, filterUsername: filterUsername, filterGroup: filterGroup, filterDate: filterDate).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List the user inventory entries for a given user
     - GET /users/{id}/inventory
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 1,
  "last" : true,
  "size" : 3,
  "total_elements" : 6,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 9,
  "number_of_elements" : 0,
  "content" : [ {
    "behavior_data" : "{}",
    "expires" : 8,
    "item_id" : 8,
    "invoice_id" : 2,
    "item_name" : "aeiou",
    "created_date" : 5,
    "id" : 7,
    "updated_date" : 8,
    "item_type_hint" : "aeiou",
    "user" : {
      "avatar_url" : "aeiou",
      "id" : 6,
      "display_name" : "aeiou",
      "username" : "aeiou"
    },
    "status" : "pending"
  } ],
  "first" : true
}}]
     
     - parameter id: (path) The id of the user 
     - parameter inactive: (query) If true, accepts inactive user inventories (optional, default to false)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter filterItemName: (query) Filter by items whose name starts with a string (optional)
     - parameter filterItemId: (query) Filter by item id (optional)
     - parameter filterUsername: (query) Filter by entries owned by the user with the specified username (optional)
     - parameter filterGroup: (query) Filter by entries owned by the users in a given group, by unique name (optional)
     - parameter filterDate: (query) A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)

     - returns: RequestBuilder<PageResourceUserInventoryResource> 
     */
    open class func getUserInventoriesWithRequestBuilder(id: Int32, inactive: Bool? = nil, size: Int32? = nil, page: Int32? = nil, filterItemName: String? = nil, filterItemId: Int32? = nil, filterUsername: String? = nil, filterGroup: String? = nil, filterDate: String? = nil) -> RequestBuilder<PageResourceUserInventoryResource> {
        var path = "/users/{id}/inventory"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "inactive": inactive, 
            "size": size?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "filter_item_name": filterItemName, 
            "filter_item_id": filterItemId?.encodeToJSON(), 
            "filter_username": filterUsername, 
            "filter_group": filterGroup, 
            "filter_date": filterDate
        ])
        

        let requestBuilder: RequestBuilder<PageResourceUserInventoryResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get an inventory entry
     
     - parameter userId: (path) The id of the inventory owner or &#39;me&#39; for the logged in user 
     - parameter id: (path) The id of the user inventory 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserInventory(userId: Int32, id: Int32, completion: @escaping ((_ data: UserInventoryResource?,_ error: Error?) -> Void)) {
        getUserInventoryWithRequestBuilder(userId: userId, id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get an inventory entry
     - GET /users/{userId}/inventory/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "behavior_data" : "{}",
  "expires" : 5,
  "item_id" : 6,
  "invoice_id" : 8,
  "item_name" : "aeiou",
  "created_date" : 0,
  "id" : 9,
  "updated_date" : 8,
  "item_type_hint" : "aeiou",
  "user" : {
    "avatar_url" : "aeiou",
    "id" : 2,
    "display_name" : "aeiou",
    "username" : "aeiou"
  },
  "status" : "pending"
}}]
     
     - parameter userId: (path) The id of the inventory owner or &#39;me&#39; for the logged in user 
     - parameter id: (path) The id of the user inventory 

     - returns: RequestBuilder<UserInventoryResource> 
     */
    open class func getUserInventoryWithRequestBuilder(userId: Int32, id: Int32) -> RequestBuilder<UserInventoryResource> {
        var path = "/users/{userId}/inventory/{id}"
        path = path.replacingOccurrences(of: "{user_id}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UserInventoryResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List the log entries for this inventory entry
     
     - parameter userId: (path) The id of the inventory owner or &#39;me&#39; for the logged in user 
     - parameter id: (path) The id of the user inventory 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserInventoryLog(userId: String, id: Int32, size: Int32? = nil, page: Int32? = nil, completion: @escaping ((_ data: PageResourceUserItemLogResource?,_ error: Error?) -> Void)) {
        getUserInventoryLogWithRequestBuilder(userId: userId, id: id, size: size, page: page).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List the log entries for this inventory entry
     - GET /users/{userId}/inventory/{id}/log
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 9,
  "last" : true,
  "size" : 1,
  "total_elements" : 3,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 7,
  "number_of_elements" : 4,
  "content" : [ {
    "item" : {
      "name" : "aeiou",
      "id" : 1
    },
    "log_date" : 8,
    "id" : 9,
    "type" : "aeiou",
    "user" : {
      "avatar_url" : "aeiou",
      "id" : 9,
      "display_name" : "aeiou",
      "username" : "aeiou"
    },
    "info" : "aeiou",
    "user_inventory" : 4
  } ],
  "first" : true
}}]
     
     - parameter userId: (path) The id of the inventory owner or &#39;me&#39; for the logged in user 
     - parameter id: (path) The id of the user inventory 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)

     - returns: RequestBuilder<PageResourceUserItemLogResource> 
     */
    open class func getUserInventoryLogWithRequestBuilder(userId: String, id: Int32, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<PageResourceUserItemLogResource> {
        var path = "/users/{userId}/inventory/{id}/log"
        path = path.replacingOccurrences(of: "{user_id}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "size": size?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<PageResourceUserItemLogResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List the user inventory entries for all users
     
     - parameter inactive: (query) If true, accepts inactive user inventories (optional, default to false)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter filterItemName: (query) Filter by items whose name starts with a string (optional)
     - parameter filterItemId: (query) Filter by item id (optional)
     - parameter filterUsername: (query) Filter by entries owned by the user with the specified username (optional)
     - parameter filterGroup: (query) Filter by entries owned by the users in a given group, by unique name (optional)
     - parameter filterDate: (query) A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsersInventory(inactive: Bool? = nil, size: Int32? = nil, page: Int32? = nil, filterItemName: String? = nil, filterItemId: Int32? = nil, filterUsername: String? = nil, filterGroup: String? = nil, filterDate: String? = nil, completion: @escaping ((_ data: PageResourceUserInventoryResource?,_ error: Error?) -> Void)) {
        getUsersInventoryWithRequestBuilder(inactive: inactive, size: size, page: page, filterItemName: filterItemName, filterItemId: filterItemId, filterUsername: filterUsername, filterGroup: filterGroup, filterDate: filterDate).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List the user inventory entries for all users
     - GET /inventories
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 8,
  "last" : true,
  "size" : 9,
  "total_elements" : 1,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 8,
  "number_of_elements" : 8,
  "content" : [ {
    "behavior_data" : "{}",
    "expires" : 9,
    "item_id" : 7,
    "invoice_id" : 2,
    "item_name" : "aeiou",
    "created_date" : 7,
    "id" : 4,
    "updated_date" : 1,
    "item_type_hint" : "aeiou",
    "user" : {
      "avatar_url" : "aeiou",
      "id" : 9,
      "display_name" : "aeiou",
      "username" : "aeiou"
    },
    "status" : "pending"
  } ],
  "first" : true
}}]
     
     - parameter inactive: (query) If true, accepts inactive user inventories (optional, default to false)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter filterItemName: (query) Filter by items whose name starts with a string (optional)
     - parameter filterItemId: (query) Filter by item id (optional)
     - parameter filterUsername: (query) Filter by entries owned by the user with the specified username (optional)
     - parameter filterGroup: (query) Filter by entries owned by the users in a given group, by unique name (optional)
     - parameter filterDate: (query) A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)

     - returns: RequestBuilder<PageResourceUserInventoryResource> 
     */
    open class func getUsersInventoryWithRequestBuilder(inactive: Bool? = nil, size: Int32? = nil, page: Int32? = nil, filterItemName: String? = nil, filterItemId: Int32? = nil, filterUsername: String? = nil, filterGroup: String? = nil, filterDate: String? = nil) -> RequestBuilder<PageResourceUserInventoryResource> {
        let path = "/inventories"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "inactive": inactive, 
            "size": size?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "filter_item_name": filterItemName, 
            "filter_item_id": filterItemId?.encodeToJSON(), 
            "filter_username": filterUsername, 
            "filter_group": filterGroup, 
            "filter_date": filterDate
        ])
        

        let requestBuilder: RequestBuilder<PageResourceUserInventoryResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Grant an entitlement
     
     - parameter userId: (path) The id of the user to grant the entitlement to 
     - parameter grantRequest: (body) grantRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func grantUserEntitlement(userId: Int32, grantRequest: EntitlementGrantRequest, completion: @escaping ((_ error: Error?) -> Void)) {
        grantUserEntitlementWithRequestBuilder(userId: userId, grantRequest: grantRequest).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Grant an entitlement
     - POST /users/{userId}/entitlements
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter userId: (path) The id of the user to grant the entitlement to 
     - parameter grantRequest: (body) grantRequest 

     - returns: RequestBuilder<Void> 
     */
    open class func grantUserEntitlementWithRequestBuilder(userId: Int32, grantRequest: EntitlementGrantRequest) -> RequestBuilder<Void> {
        var path = "/users/{userId}/entitlements"
        path = path.replacingOccurrences(of: "{user_id}", with: "\(userId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = grantRequest.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update an entitlement item
     
     - parameter entitlementId: (path) The id of the entitlement 
     - parameter cascade: (query) Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (optional, default to false)
     - parameter entitlementItem: (body) The entitlement item object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateEntitlementItem(entitlementId: Int32, cascade: Bool? = nil, entitlementItem: EntitlementItem? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        updateEntitlementItemWithRequestBuilder(entitlementId: entitlementId, cascade: cascade, entitlementItem: entitlementItem).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update an entitlement item
     - PUT /entitlements/{entitlementId}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter entitlementId: (path) The id of the entitlement 
     - parameter cascade: (query) Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (optional, default to false)
     - parameter entitlementItem: (body) The entitlement item object (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateEntitlementItemWithRequestBuilder(entitlementId: Int32, cascade: Bool? = nil, entitlementItem: EntitlementItem? = nil) -> RequestBuilder<Void> {
        var path = "/entitlements/{entitlementId}"
        path = path.replacingOccurrences(of: "{entitlement_id}", with: "\(entitlementId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = entitlementItem?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "cascade": cascade
        ])
        

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update an entitlement template
     
     - parameter id: (path) The id of the template 
     - parameter template: (body) The updated template (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateEntitlementTemplate(id: String, template: ItemTemplateResource? = nil, completion: @escaping ((_ data: ItemTemplateResource?,_ error: Error?) -> Void)) {
        updateEntitlementTemplateWithRequestBuilder(id: id, template: template).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Update an entitlement template
     - PUT /entitlements/templates/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "behaviors" : [ {
    "behavior" : {
      "type_hint" : "aeiou"
    },
    "modifiable" : false,
    "required" : false
  } ],
  "name" : "aeiou",
  "created_date" : 5,
  "id" : "aeiou",
  "updated_date" : 5,
  "properties" : [ {
    "name" : "aeiou",
    "type" : "aeiou",
    "required" : false
  } ]
}}]
     
     - parameter id: (path) The id of the template 
     - parameter template: (body) The updated template (optional)

     - returns: RequestBuilder<ItemTemplateResource> 
     */
    open class func updateEntitlementTemplateWithRequestBuilder(id: String, template: ItemTemplateResource? = nil) -> RequestBuilder<ItemTemplateResource> {
        var path = "/entitlements/templates/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = template?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ItemTemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set the behavior data for an inventory entry
     
     - parameter userId: (path) The id of the user 
     - parameter id: (path) The id of the user inventory 
     - parameter data: (body) The data map (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUserInventoryBehaviorData(userId: Int32, id: Int32, data: Any? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        updateUserInventoryBehaviorDataWithRequestBuilder(userId: userId, id: id, data: data).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Set the behavior data for an inventory entry
     - PUT /users/{userId}/inventory/{id}/behavior-data
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter userId: (path) The id of the user 
     - parameter id: (path) The id of the user inventory 
     - parameter data: (body) The data map (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateUserInventoryBehaviorDataWithRequestBuilder(userId: Int32, id: Int32, data: Any? = nil) -> RequestBuilder<Void> {
        var path = "/users/{userId}/inventory/{id}/behavior-data"
        path = path.replacingOccurrences(of: "{user_id}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set the expiration date
     
     - parameter userId: (path) user_id 
     - parameter id: (path) The id of the user inventory 
     - parameter timestamp: (body) The new expiration date as a unix timestamp in seconds. May be null (no body). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUserInventoryExpires(userId: Int32, id: Int32, timestamp: Int64? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        updateUserInventoryExpiresWithRequestBuilder(userId: userId, id: id, timestamp: timestamp).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Set the expiration date
     - PUT /users/{userId}/inventory/{id}/expires
     - Will change the current grace period for a subscription but not the bill date (possibly even ending before having the chance to re-bill)
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter userId: (path) user_id 
     - parameter id: (path) The id of the user inventory 
     - parameter timestamp: (body) The new expiration date as a unix timestamp in seconds. May be null (no body). (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateUserInventoryExpiresWithRequestBuilder(userId: Int32, id: Int32, timestamp: Int64? = nil) -> RequestBuilder<Void> {
        var path = "/users/{userId}/inventory/{id}/expires"
        path = path.replacingOccurrences(of: "{user_id}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = timestamp?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set the status for an inventory entry
     
     - parameter userId: (path) The id of the user 
     - parameter id: (path) The id of the user inventory 
     - parameter inventoryStatus: (body) The inventory status object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUserInventoryStatus(userId: Int32, id: Int32, inventoryStatus: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        updateUserInventoryStatusWithRequestBuilder(userId: userId, id: id, inventoryStatus: inventoryStatus).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Set the status for an inventory entry
     - PUT /users/{userId}/inventory/{id}/status
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter userId: (path) The id of the user 
     - parameter id: (path) The id of the user inventory 
     - parameter inventoryStatus: (body) The inventory status object (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateUserInventoryStatusWithRequestBuilder(userId: Int32, id: Int32, inventoryStatus: String? = nil) -> RequestBuilder<Void> {
        var path = "/users/{userId}/inventory/{id}/status"
        path = path.replacingOccurrences(of: "{user_id}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = inventoryStatus?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Use an item
     
     - parameter userId: (path) The id of the user to check for or &#39;me&#39; for logged in user 
     - parameter itemId: (path) The id of the item 
     - parameter sku: (query) The specific sku of an entitlement_list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)
     - parameter info: (query) Any additional info to add to the log about this use (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func useUserEntitlementItem(userId: String, itemId: Int32, sku: String? = nil, info: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        useUserEntitlementItemWithRequestBuilder(userId: userId, itemId: itemId, sku: sku, info: info).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Use an item
     - POST /users/{userId}/entitlements/{itemId}/use
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter userId: (path) The id of the user to check for or &#39;me&#39; for logged in user 
     - parameter itemId: (path) The id of the item 
     - parameter sku: (query) The specific sku of an entitlement_list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)
     - parameter info: (query) Any additional info to add to the log about this use (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func useUserEntitlementItemWithRequestBuilder(userId: String, itemId: Int32, sku: String? = nil, info: String? = nil) -> RequestBuilder<Void> {
        var path = "/users/{userId}/entitlements/{itemId}/use"
        path = path.replacingOccurrences(of: "{user_id}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{item_id}", with: "\(itemId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "sku": sku, 
            "info": info
        ])
        

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
