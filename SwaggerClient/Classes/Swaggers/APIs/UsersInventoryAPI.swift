//
// UsersInventoryAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class UsersInventoryAPI: APIBase {
    /**
     Adds an item to the user inventory
     
     - parameter id: (path) The id of the user 
     - parameter userInventoryAddRequest: (body) The user inventory add request object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addItemUsingPOST1(id: Int32, userInventoryAddRequest: UserInventoryAddRequest? = nil, completion: @escaping ((_ data: InvoiceResource?,_ error: Error?) -> Void)) {
        addItemUsingPOST1WithRequestBuilder(id: id, userInventoryAddRequest: userInventoryAddRequest).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Adds an item to the user inventory
     - POST /users/{id}/inventory
     - The inventory is fulfilled asynchronously UNLESS the invoice is explicitely skipped. Depending on the use case, it might require the client to verify that the entitlement was added after the fact or configure a BRE rule to get a notification in real time
     - examples: [{output=none}]
     
     - parameter id: (path) The id of the user 
     - parameter userInventoryAddRequest: (body) The user inventory add request object (optional)

     - returns: RequestBuilder<InvoiceResource> 
     */
    open class func addItemUsingPOST1WithRequestBuilder(id: Int32, userInventoryAddRequest: UserInventoryAddRequest? = nil) -> RequestBuilder<InvoiceResource> {
        var path = "/users/{id}/inventory"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = userInventoryAddRequest?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InvoiceResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create an entitlement item
     
     - parameter entitlementItem: (body) The entitlement item object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createItemUsingPOST(entitlementItem: EntitlementItem? = nil, completion: @escaping ((_ data: EntitlementItem?,_ error: Error?) -> Void)) {
        createItemUsingPOSTWithRequestBuilder(entitlementItem: entitlementItem).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create an entitlement item
     - POST /entitlements
     - examples: [{output=none}]
     
     - parameter entitlementItem: (body) The entitlement item object (optional)

     - returns: RequestBuilder<EntitlementItem> 
     */
    open class func createItemUsingPOSTWithRequestBuilder(entitlementItem: EntitlementItem? = nil) -> RequestBuilder<EntitlementItem> {
        let path = "/entitlements"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = entitlementItem?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<EntitlementItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an entitlement item
     
     - parameter entitlementId: (path) The id of the entitlement 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteItemUsingDELETE(entitlementId: Int32, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteItemUsingDELETEWithRequestBuilder(entitlementId: entitlementId).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete an entitlement item
     - DELETE /entitlements/{entitlementId}
     
     - parameter entitlementId: (path) The id of the entitlement 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteItemUsingDELETEWithRequestBuilder(entitlementId: Int32) -> RequestBuilder<Void> {
        var path = "/entitlements/{entitlementId}"
        path = path.replacingOccurrences(of: "{entitlementId}", with: "\(entitlementId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Check for access to an item without consuming
     
     - parameter userId: (path) The id of the user to check for or &#39;me&#39; for logged in user 
     - parameter itemId: (path) The id of the item 
     - parameter sku: (query) The specific sku of an entitlement list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func entitlementCheckUsingGET(userId: String, itemId: Int32, sku: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        entitlementCheckUsingGETWithRequestBuilder(userId: userId, itemId: itemId, sku: sku).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Check for access to an item without consuming
     - GET /users/{userId}/entitlements/{itemId}/check
     - Useful for pre-check and accounts for all various buisness rules
     
     - parameter userId: (path) The id of the user to check for or &#39;me&#39; for logged in user 
     - parameter itemId: (path) The id of the item 
     - parameter sku: (query) The specific sku of an entitlement list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func entitlementCheckUsingGETWithRequestBuilder(userId: String, itemId: Int32, sku: String? = nil) -> RequestBuilder<Void> {
        var path = "/users/{userId}/entitlements/{itemId}/check"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{itemId}", with: "\(itemId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "sku": sku
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Use an item
     
     - parameter userId: (path) The id of the user to check for or &#39;me&#39; for logged in user 
     - parameter itemId: (path) The id of the item 
     - parameter sku: (query) The specific sku of an entitlement_list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)
     - parameter info: (query) Any additional info to add to the log about this use (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func entitlementUseUsingPOST(userId: String, itemId: Int32, sku: String? = nil, info: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        entitlementUseUsingPOSTWithRequestBuilder(userId: userId, itemId: itemId, sku: sku, info: info).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Use an item
     - POST /users/{userId}/entitlements/{itemId}/use
     
     - parameter userId: (path) The id of the user to check for or &#39;me&#39; for logged in user 
     - parameter itemId: (path) The id of the item 
     - parameter sku: (query) The specific sku of an entitlement_list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)
     - parameter info: (query) Any additional info to add to the log about this use (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func entitlementUseUsingPOSTWithRequestBuilder(userId: String, itemId: Int32, sku: String? = nil, info: String? = nil) -> RequestBuilder<Void> {
        var path = "/users/{userId}/entitlements/{itemId}/use"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{itemId}", with: "\(itemId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "sku": sku,
            "info": info
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     List and search entitlement items
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCurrenciesUsingGET1(size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: PageEntitlementItem?,_ error: Error?) -> Void)) {
        getCurrenciesUsingGET1WithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List and search entitlement items
     - GET /entitlements
     - examples: [{output=none}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)

     - returns: RequestBuilder<PageEntitlementItem> 
     */
    open class func getCurrenciesUsingGET1WithRequestBuilder(size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageEntitlementItem> {
        let path = "/entitlements"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageEntitlementItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     List the user inventory entries for all users
     
     - parameter inactive: (query) If true, accepts inactive user inventories (optional, default to false)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter filterItemName: (query) Filter by items whose name starts with a string (optional)
     - parameter filterMinDate: (query) Filter for inventory added after the specified date, unix timestamp in seconds (optional)
     - parameter filterMaxDate: (query) Filter for inventory added before the specified date, unix timestamp in seconds (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInventoryListUsingGET(inactive: Bool? = nil, size: Int32? = nil, page: Int32? = nil, filterItemName: String? = nil, filterMinDate: Int64? = nil, filterMaxDate: Int64? = nil, completion: @escaping ((_ data: PageUserInventoryResource?,_ error: Error?) -> Void)) {
        getInventoryListUsingGETWithRequestBuilder(inactive: inactive, size: size, page: page, filterItemName: filterItemName, filterMinDate: filterMinDate, filterMaxDate: filterMaxDate).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List the user inventory entries for all users
     - GET /inventories
     - examples: [{output=none}]
     
     - parameter inactive: (query) If true, accepts inactive user inventories (optional, default to false)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter filterItemName: (query) Filter by items whose name starts with a string (optional)
     - parameter filterMinDate: (query) Filter for inventory added after the specified date, unix timestamp in seconds (optional)
     - parameter filterMaxDate: (query) Filter for inventory added before the specified date, unix timestamp in seconds (optional)

     - returns: RequestBuilder<PageUserInventoryResource> 
     */
    open class func getInventoryListUsingGETWithRequestBuilder(inactive: Bool? = nil, size: Int32? = nil, page: Int32? = nil, filterItemName: String? = nil, filterMinDate: Int64? = nil, filterMaxDate: Int64? = nil) -> RequestBuilder<PageUserInventoryResource> {
        let path = "/inventories"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "inactive": inactive,
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "filter_item_name": filterItemName,
            "filter_min_date": filterMinDate?.encodeToJSON(),
            "filter_max_date": filterMaxDate?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageUserInventoryResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get an inventory entry
     
     - parameter userId: (path) The id of the inventory owner or &#39;me&#39; for the logged in user 
     - parameter id: (path) The id of the user inventory 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInventoryUsingGET(userId: Int32, id: Int32, completion: @escaping ((_ data: UserInventoryResource?,_ error: Error?) -> Void)) {
        getInventoryUsingGETWithRequestBuilder(userId: userId, id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get an inventory entry
     - GET /users/{userId}/inventory/{id}
     - examples: [{output=none}]
     
     - parameter userId: (path) The id of the inventory owner or &#39;me&#39; for the logged in user 
     - parameter id: (path) The id of the user inventory 

     - returns: RequestBuilder<UserInventoryResource> 
     */
    open class func getInventoryUsingGETWithRequestBuilder(userId: Int32, id: Int32) -> RequestBuilder<UserInventoryResource> {
        var path = "/users/{userId}/inventory/{id}"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<UserInventoryResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a single entitlement item
     
     - parameter entitlementId: (path) The id of the entitlement 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getItemUsingGET(entitlementId: Int32, completion: @escaping ((_ data: EntitlementItem?,_ error: Error?) -> Void)) {
        getItemUsingGETWithRequestBuilder(entitlementId: entitlementId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get a single entitlement item
     - GET /entitlements/{entitlementId}
     - examples: [{output=none}]
     
     - parameter entitlementId: (path) The id of the entitlement 

     - returns: RequestBuilder<EntitlementItem> 
     */
    open class func getItemUsingGETWithRequestBuilder(entitlementId: Int32) -> RequestBuilder<EntitlementItem> {
        var path = "/entitlements/{entitlementId}"
        path = path.replacingOccurrences(of: "{entitlementId}", with: "\(entitlementId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<EntitlementItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List the user inventory entries for a given user
     
     - parameter id: (path) The id of the user 
     - parameter inactive: (query) If true, accepts inactive user inventories (optional, default to false)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter filterItemName: (query) Filter by items whose name starts with a string (optional)
     - parameter filterMinDate: (query) Filter for inventory added after the specified date, unix timestamp in seconds (optional)
     - parameter filterMaxDate: (query) Filter for inventory added before the specified date, unix timestamp in seconds (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserInventoryListUsingGET(id: Int32, inactive: Bool? = nil, size: Int32? = nil, page: Int32? = nil, filterItemName: String? = nil, filterMinDate: Int64? = nil, filterMaxDate: Int64? = nil, completion: @escaping ((_ data: PageUserInventoryResource?,_ error: Error?) -> Void)) {
        getUserInventoryListUsingGETWithRequestBuilder(id: id, inactive: inactive, size: size, page: page, filterItemName: filterItemName, filterMinDate: filterMinDate, filterMaxDate: filterMaxDate).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List the user inventory entries for a given user
     - GET /users/{id}/inventory
     - examples: [{output=none}]
     
     - parameter id: (path) The id of the user 
     - parameter inactive: (query) If true, accepts inactive user inventories (optional, default to false)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter filterItemName: (query) Filter by items whose name starts with a string (optional)
     - parameter filterMinDate: (query) Filter for inventory added after the specified date, unix timestamp in seconds (optional)
     - parameter filterMaxDate: (query) Filter for inventory added before the specified date, unix timestamp in seconds (optional)

     - returns: RequestBuilder<PageUserInventoryResource> 
     */
    open class func getUserInventoryListUsingGETWithRequestBuilder(id: Int32, inactive: Bool? = nil, size: Int32? = nil, page: Int32? = nil, filterItemName: String? = nil, filterMinDate: Int64? = nil, filterMaxDate: Int64? = nil) -> RequestBuilder<PageUserInventoryResource> {
        var path = "/users/{id}/inventory"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "inactive": inactive,
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "filter_item_name": filterItemName,
            "filter_min_date": filterMinDate?.encodeToJSON(),
            "filter_max_date": filterMaxDate?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageUserInventoryResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     List the log entries for this inventory entry.
     
     - parameter userId: (path) The id of the inventory owner or &#39;me&#39; for the logged in user 
     - parameter id: (path) The id of the user inventory 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserInventoryLogUsingGET(userId: String, id: Int32, size: Int32? = nil, page: Int32? = nil, completion: @escaping ((_ data: PageUserItemLogResource?,_ error: Error?) -> Void)) {
        getUserInventoryLogUsingGETWithRequestBuilder(userId: userId, id: id, size: size, page: page).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List the log entries for this inventory entry.
     - GET /users/{userId}/inventory/{id}/log
     - examples: [{output=none}]
     
     - parameter userId: (path) The id of the inventory owner or &#39;me&#39; for the logged in user 
     - parameter id: (path) The id of the user inventory 
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)

     - returns: RequestBuilder<PageUserItemLogResource> 
     */
    open class func getUserInventoryLogUsingGETWithRequestBuilder(userId: String, id: Int32, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<PageUserItemLogResource> {
        var path = "/users/{userId}/inventory/{id}/log"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageUserItemLogResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Update an entitlement item
     
     - parameter entitlementId: (path) The id of the entitlement 
     - parameter entitlementItem: (body) The entitlement item object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateItemUsingPUT1(entitlementId: Int32, entitlementItem: EntitlementItem? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        updateItemUsingPUT1WithRequestBuilder(entitlementId: entitlementId, entitlementItem: entitlementItem).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update an entitlement item
     - PUT /entitlements/{entitlementId}
     
     - parameter entitlementId: (path) The id of the entitlement 
     - parameter entitlementItem: (body) The entitlement item object (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateItemUsingPUT1WithRequestBuilder(entitlementId: Int32, entitlementItem: EntitlementItem? = nil) -> RequestBuilder<Void> {
        var path = "/entitlements/{entitlementId}"
        path = path.replacingOccurrences(of: "{entitlementId}", with: "\(entitlementId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = entitlementItem?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Set the behavior data for an inventory entry
     
     - parameter userId: (path) The id of the user 
     - parameter id: (path) The id of the user inventory 
     - parameter data: (body) The data map (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUserInventoryBehaviorDataUsingPUT(userId: Int32, id: Int32, data: Any? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        updateUserInventoryBehaviorDataUsingPUTWithRequestBuilder(userId: userId, id: id, data: data).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Set the behavior data for an inventory entry
     - PUT /users/{userId}/inventory/{id}/behavior-data
     
     - parameter userId: (path) The id of the user 
     - parameter id: (path) The id of the user inventory 
     - parameter data: (body) The data map (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateUserInventoryBehaviorDataUsingPUTWithRequestBuilder(userId: Int32, id: Int32, data: Any? = nil) -> RequestBuilder<Void> {
        var path = "/users/{userId}/inventory/{id}/behavior-data"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Set the expiration date
     
     - parameter userId: (path) user_id 
     - parameter id: (path) The id of the user inventory 
     - parameter timestamp: (body) The new expiration date as a unix timestamp in seconds. May be null (no body). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUserInventoryExpiresUsingPUT(userId: Int32, id: Int32, timestamp: Int64? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        updateUserInventoryExpiresUsingPUTWithRequestBuilder(userId: userId, id: id, timestamp: timestamp).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Set the expiration date
     - PUT /users/{userId}/inventory/{id}/expires
     - Will change the current grace period for a subscription but not the bill date (possibly even ending before having the chance to re-bill)
     
     - parameter userId: (path) user_id 
     - parameter id: (path) The id of the user inventory 
     - parameter timestamp: (body) The new expiration date as a unix timestamp in seconds. May be null (no body). (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateUserInventoryExpiresUsingPUTWithRequestBuilder(userId: Int32, id: Int32, timestamp: Int64? = nil) -> RequestBuilder<Void> {
        var path = "/users/{userId}/inventory/{id}/expires"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = timestamp?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Set the status for an inventory entry
     
     - parameter userId: (path) The id of the user 
     - parameter id: (path) The id of the user inventory 
     - parameter inventoryStatus: (body) The inventory status object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUserInventoryStatusUsingPUT(userId: Int32, id: Int32, inventoryStatus: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        updateUserInventoryStatusUsingPUTWithRequestBuilder(userId: userId, id: id, inventoryStatus: inventoryStatus).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Set the status for an inventory entry
     - PUT /users/{userId}/inventory/{id}/status
     
     - parameter userId: (path) The id of the user 
     - parameter id: (path) The id of the user inventory 
     - parameter inventoryStatus: (body) The inventory status object (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateUserInventoryStatusUsingPUTWithRequestBuilder(userId: Int32, id: Int32, inventoryStatus: String? = nil) -> RequestBuilder<Void> {
        var path = "/users/{userId}/inventory/{id}/status"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = inventoryStatus?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
