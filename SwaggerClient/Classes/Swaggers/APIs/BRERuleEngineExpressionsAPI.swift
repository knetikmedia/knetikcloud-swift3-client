//
// BRERuleEngineExpressionsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class BRERuleEngineExpressionsAPI: APIBase {
    /**
     Get a list of 'lookup' type expressions
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLookupTypesUsingGET(completion: @escaping ((_ data: [LookupTypeResource]?,_ error: Error?) -> Void)) {
        getLookupTypesUsingGETWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get a list of 'lookup' type expressions
     - GET /bre/expressions/lookup
     - These are expression types that take a second expression as input and produce a value. These can be used in addition to the standard types, like parameter, global and constant (see BRE documentation for details).
     - examples: [{output=none}]

     - returns: RequestBuilder<[LookupTypeResource]> 
     */
    open class func getLookupTypesUsingGETWithRequestBuilder() -> RequestBuilder<[LookupTypeResource]> {
        let path = "/bre/expressions/lookup"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[LookupTypeResource]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
