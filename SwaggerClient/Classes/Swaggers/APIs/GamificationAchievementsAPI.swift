//
// GamificationAchievementsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class GamificationAchievementsAPI: APIBase {
    /**
     Create a new achievement definition
     
     - parameter achievement: (body) The achievement definition (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createAchievement(achievement: AchievementDefinitionResource? = nil, completion: @escaping ((_ data: AchievementDefinitionResource?,_ error: Error?) -> Void)) {
        createAchievementWithRequestBuilder(achievement: achievement).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create a new achievement definition
     - POST /achievements
     - If the definition contains a trigger event name, a BRE rule is created, so that tracking logic is executed when the triggering event occurs. If no trigger event name is specified, the user's achievement status must manually be updated via the API.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "rule_id" : "aeiou",
  "template" : "aeiou",
  "hidden" : false,
  "name" : "aeiou",
  "description" : "aeiou",
  "additional_properties" : {
    "key" : {
      "type" : "aeiou"
    }
  },
  "created_date" : 2,
  "required_progress" : 0,
  "trigger_event_name" : "aeiou",
  "updated_date" : 4,
  "tags" : [ "aeiou" ]
}}]
     
     - parameter achievement: (body) The achievement definition (optional)

     - returns: RequestBuilder<AchievementDefinitionResource> 
     */
    open class func createAchievementWithRequestBuilder(achievement: AchievementDefinitionResource? = nil) -> RequestBuilder<AchievementDefinitionResource> {
        let path = "/achievements"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = achievement?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AchievementDefinitionResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create an achievement template
     
     - parameter template: (body) The achievement template to be created (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createAchievementTemplate(template: TemplateResource? = nil, completion: @escaping ((_ data: TemplateResource?,_ error: Error?) -> Void)) {
        createAchievementTemplateWithRequestBuilder(template: template).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create an achievement template
     - POST /achievements/templates
     - Achievement templates define a type of achievement and the properties they have
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "created_date" : 2,
  "id" : "aeiou",
  "updated_date" : 4,
  "properties" : [ {
    "name" : "aeiou",
    "type" : "aeiou",
    "required" : false
  } ]
}}]
     
     - parameter template: (body) The achievement template to be created (optional)

     - returns: RequestBuilder<TemplateResource> 
     */
    open class func createAchievementTemplateWithRequestBuilder(template: TemplateResource? = nil) -> RequestBuilder<TemplateResource> {
        let path = "/achievements/templates"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = template?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<TemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete an achievement definition
     
     - parameter name: (path) The name of the achievement 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAchievement(name: String, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteAchievementWithRequestBuilder(name: name).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete an achievement definition
     - DELETE /achievements/{name}
     - Will also disable the associated generated rule, if any.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter name: (path) The name of the achievement 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteAchievementWithRequestBuilder(name: String) -> RequestBuilder<Void> {
        var path = "/achievements/{name}"
        path = path.replacingOccurrences(of: "{name}", with: "\(name)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete an achievement template
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) The value needed to delete used templates (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAchievementTemplate(id: String, cascade: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteAchievementTemplateWithRequestBuilder(id: id, cascade: cascade).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete an achievement template
     - DELETE /achievements/templates/{id}
     - If cascade = 'detach', it will force delete the template even if it's attached to other objects
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) The value needed to delete used templates (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteAchievementTemplateWithRequestBuilder(id: String, cascade: String? = nil) -> RequestBuilder<Void> {
        var path = "/achievements/templates/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "cascade": cascade
        ])
        

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a single achievement definition
     
     - parameter name: (path) The name of the achievement 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAchievement(name: String, completion: @escaping ((_ data: AchievementDefinitionResource?,_ error: Error?) -> Void)) {
        getAchievementWithRequestBuilder(name: name).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get a single achievement definition
     - GET /achievements/{name}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "rule_id" : "aeiou",
  "template" : "aeiou",
  "hidden" : false,
  "name" : "aeiou",
  "description" : "aeiou",
  "additional_properties" : {
    "key" : {
      "type" : "aeiou"
    }
  },
  "created_date" : 2,
  "required_progress" : 6,
  "trigger_event_name" : "aeiou",
  "updated_date" : 2,
  "tags" : [ "aeiou" ]
}}]
     
     - parameter name: (path) The name of the achievement 

     - returns: RequestBuilder<AchievementDefinitionResource> 
     */
    open class func getAchievementWithRequestBuilder(name: String) -> RequestBuilder<AchievementDefinitionResource> {
        var path = "/achievements/{name}"
        path = path.replacingOccurrences(of: "{name}", with: "\(name)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AchievementDefinitionResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a single achievement template
     
     - parameter id: (path) The id of the template 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAchievementTemplate(id: String, completion: @escaping ((_ data: TemplateResource?,_ error: Error?) -> Void)) {
        getAchievementTemplateWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get a single achievement template
     - GET /achievements/templates/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "created_date" : 5,
  "id" : "aeiou",
  "updated_date" : 6,
  "properties" : [ {
    "name" : "aeiou",
    "type" : "aeiou",
    "required" : false
  } ]
}}]
     
     - parameter id: (path) The id of the template 

     - returns: RequestBuilder<TemplateResource> 
     */
    open class func getAchievementTemplateWithRequestBuilder(id: String) -> RequestBuilder<TemplateResource> {
        var path = "/achievements/templates/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<TemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List and search achievement templates
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAchievementTemplates(size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: PageResourceTemplateResource?,_ error: Error?) -> Void)) {
        getAchievementTemplatesWithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List and search achievement templates
     - GET /achievements/templates
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 2,
  "last" : true,
  "size" : 2,
  "total_elements" : 5,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 7,
  "number_of_elements" : 5,
  "content" : [ {
    "name" : "aeiou",
    "created_date" : 1,
    "id" : "aeiou",
    "updated_date" : 0,
    "properties" : [ {
      "name" : "aeiou",
      "type" : "aeiou",
      "required" : false
    } ]
  } ],
  "first" : true
}}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)

     - returns: RequestBuilder<PageResourceTemplateResource> 
     */
    open class func getAchievementTemplatesWithRequestBuilder(size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceTemplateResource> {
        let path = "/achievements/templates"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "size": size?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "order": order
        ])
        

        let requestBuilder: RequestBuilder<PageResourceTemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the list of triggers that can be used to trigger an achievement progress update
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAchievementTriggers(completion: @escaping ((_ data: [BreTriggerResource]?,_ error: Error?) -> Void)) {
        getAchievementTriggersWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get the list of triggers that can be used to trigger an achievement progress update
     - GET /achievements/triggers
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example=[ {
  "trigger_name" : "aeiou",
  "system_trigger" : false,
  "event_name" : "aeiou",
  "category" : "achievement",
  "parameters" : [ {
    "name" : "aeiou",
    "type" : "aeiou"
  } ],
  "trigger_description" : "aeiou"
} ]}]

     - returns: RequestBuilder<[BreTriggerResource]> 
     */
    open class func getAchievementTriggersWithRequestBuilder() -> RequestBuilder<[BreTriggerResource]> {
        let path = "/achievements/triggers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[BreTriggerResource]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all achievement definitions in the system
     
     - parameter filterTagset: (query) Filter for achievements with specified tags (separated by comma) (optional)
     - parameter filterName: (query) Filter for achievements whose name contains a string (optional)
     - parameter filterHidden: (query) Filter for achievements that are hidden or not (optional)
     - parameter filterDerived: (query) Filter for achievements that are derived from other services (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAchievements(filterTagset: String? = nil, filterName: String? = nil, filterHidden: Bool? = nil, filterDerived: Bool? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: PageResourceAchievementDefinitionResource?,_ error: Error?) -> Void)) {
        getAchievementsWithRequestBuilder(filterTagset: filterTagset, filterName: filterName, filterHidden: filterHidden, filterDerived: filterDerived, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get all achievement definitions in the system
     - GET /achievements
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 0,
  "last" : true,
  "size" : 7,
  "total_elements" : 5,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 8,
  "number_of_elements" : 5,
  "content" : [ {
    "rule_id" : "aeiou",
    "template" : "aeiou",
    "hidden" : false,
    "name" : "aeiou",
    "description" : "aeiou",
    "additional_properties" : {
      "key" : {
        "type" : "aeiou"
      }
    },
    "created_date" : 3,
    "required_progress" : 9,
    "trigger_event_name" : "aeiou",
    "updated_date" : 6,
    "tags" : [ "aeiou" ]
  } ],
  "first" : true
}}]
     
     - parameter filterTagset: (query) Filter for achievements with specified tags (separated by comma) (optional)
     - parameter filterName: (query) Filter for achievements whose name contains a string (optional)
     - parameter filterHidden: (query) Filter for achievements that are hidden or not (optional)
     - parameter filterDerived: (query) Filter for achievements that are derived from other services (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)

     - returns: RequestBuilder<PageResourceAchievementDefinitionResource> 
     */
    open class func getAchievementsWithRequestBuilder(filterTagset: String? = nil, filterName: String? = nil, filterHidden: Bool? = nil, filterDerived: Bool? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageResourceAchievementDefinitionResource> {
        let path = "/achievements"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter_tagset": filterTagset, 
            "filter_name": filterName, 
            "filter_hidden": filterHidden, 
            "filter_derived": filterDerived, 
            "size": size?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "order": order
        ])
        

        let requestBuilder: RequestBuilder<PageResourceAchievementDefinitionResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a list of derived achievements
     
     - parameter name: (path) The name of the derived achievement 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDerivedAchievements(name: String, completion: @escaping ((_ data: [AchievementDefinitionResource]?,_ error: Error?) -> Void)) {
        getDerivedAchievementsWithRequestBuilder(name: name).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get a list of derived achievements
     - GET /achievements/derived/{name}
     - Used by other services that depend on achievements
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example=[ {
  "rule_id" : "aeiou",
  "template" : "aeiou",
  "hidden" : false,
  "name" : "aeiou",
  "description" : "aeiou",
  "additional_properties" : {
    "key" : {
      "type" : "aeiou"
    }
  },
  "created_date" : 2,
  "required_progress" : 8,
  "trigger_event_name" : "aeiou",
  "updated_date" : 9,
  "tags" : [ "aeiou" ]
} ]}]
     
     - parameter name: (path) The name of the derived achievement 

     - returns: RequestBuilder<[AchievementDefinitionResource]> 
     */
    open class func getDerivedAchievementsWithRequestBuilder(name: String) -> RequestBuilder<[AchievementDefinitionResource]> {
        var path = "/achievements/derived/{name}"
        path = path.replacingOccurrences(of: "{name}", with: "\(name)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[AchievementDefinitionResource]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieve progress on a given achievement for a given user
     
     - parameter userId: (path) The user&#39;s id 
     - parameter achievementName: (path) The achievement&#39;s name 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserAchievementProgress(userId: Int32, achievementName: String, completion: @escaping ((_ data: UserAchievementGroupResource?,_ error: Error?) -> Void)) {
        getUserAchievementProgressWithRequestBuilder(userId: userId, achievementName: achievementName).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Retrieve progress on a given achievement for a given user
     - GET /users/{userId}/achievements/{achievementName}
     - Assets will not be filled in on the resources returned. Use 'Get a single poll' to retrieve the full resource with assets for a given item as needed.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "achievements" : [ {
    "achievement_name" : "aeiou",
    "achieved" : false,
    "earned_date" : 3,
    "created_date" : 2,
    "updated_date" : 9
  } ],
  "group_name" : "aeiou",
  "user_id" : 3,
  "progress" : 0,
  "id" : "aeiou"
}}]
     
     - parameter userId: (path) The user&#39;s id 
     - parameter achievementName: (path) The achievement&#39;s name 

     - returns: RequestBuilder<UserAchievementGroupResource> 
     */
    open class func getUserAchievementProgressWithRequestBuilder(userId: Int32, achievementName: String) -> RequestBuilder<UserAchievementGroupResource> {
        var path = "/users/{userId}/achievements/{achievementName}"
        path = path.replacingOccurrences(of: "{user_id}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{achievement_name}", with: "\(achievementName)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UserAchievementGroupResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieve progress on achievements for a given user
     
     - parameter userId: (path) The user&#39;s id 
     - parameter filterAchievementDerived: (query) Filter for achievements that are derived from other services (optional)
     - parameter filterAchievementTagset: (query) Filter for achievements with specified tags (separated by comma) (optional)
     - parameter filterAchievementName: (query) Filter for achievements whose name contains a string (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserAchievementsProgress(userId: Int32, filterAchievementDerived: Bool? = nil, filterAchievementTagset: String? = nil, filterAchievementName: String? = nil, size: Int32? = nil, page: Int32? = nil, completion: @escaping ((_ data: PageResourceUserAchievementGroupResource?,_ error: Error?) -> Void)) {
        getUserAchievementsProgressWithRequestBuilder(userId: userId, filterAchievementDerived: filterAchievementDerived, filterAchievementTagset: filterAchievementTagset, filterAchievementName: filterAchievementName, size: size, page: page).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Retrieve progress on achievements for a given user
     - GET /users/{userId}/achievements
     - Assets will not be filled in on the resources returned. Use 'Get a single poll' to retrieve the full resource with assets for a given item as needed.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 5,
  "last" : true,
  "size" : 2,
  "total_elements" : 2,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 4,
  "number_of_elements" : 2,
  "content" : [ {
    "achievements" : [ {
      "achievement_name" : "aeiou",
      "achieved" : false,
      "earned_date" : 3,
      "created_date" : 6,
      "updated_date" : 0
    } ],
    "group_name" : "aeiou",
    "user_id" : 3,
    "progress" : 9,
    "id" : "aeiou"
  } ],
  "first" : true
}}]
     
     - parameter userId: (path) The user&#39;s id 
     - parameter filterAchievementDerived: (query) Filter for achievements that are derived from other services (optional)
     - parameter filterAchievementTagset: (query) Filter for achievements with specified tags (separated by comma) (optional)
     - parameter filterAchievementName: (query) Filter for achievements whose name contains a string (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)

     - returns: RequestBuilder<PageResourceUserAchievementGroupResource> 
     */
    open class func getUserAchievementsProgressWithRequestBuilder(userId: Int32, filterAchievementDerived: Bool? = nil, filterAchievementTagset: String? = nil, filterAchievementName: String? = nil, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<PageResourceUserAchievementGroupResource> {
        var path = "/users/{userId}/achievements"
        path = path.replacingOccurrences(of: "{user_id}", with: "\(userId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter_achievement_derived": filterAchievementDerived, 
            "filter_achievement_tagset": filterAchievementTagset, 
            "filter_achievement_name": filterAchievementName, 
            "size": size?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<PageResourceUserAchievementGroupResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieve progress on a given achievement for all users
     
     - parameter achievementName: (path) The achievement&#39;s name 
     - parameter filterAchievementDerived: (query) Filter for achievements that are derived from other services (optional)
     - parameter filterAchievementTagset: (query) Filter for achievements with specified tags (separated by comma) (optional)
     - parameter filterAchievementName: (query) Filter for achievements whose name contains a string (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsersAchievementProgress(achievementName: String, filterAchievementDerived: Bool? = nil, filterAchievementTagset: String? = nil, filterAchievementName: String? = nil, size: Int32? = nil, page: Int32? = nil, completion: @escaping ((_ data: PageResourceUserAchievementGroupResource?,_ error: Error?) -> Void)) {
        getUsersAchievementProgressWithRequestBuilder(achievementName: achievementName, filterAchievementDerived: filterAchievementDerived, filterAchievementTagset: filterAchievementTagset, filterAchievementName: filterAchievementName, size: size, page: page).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Retrieve progress on a given achievement for all users
     - GET /users/achievements/{achievementName}
     - Assets will not be filled in on the resources returned. Use 'Get single achievement progress for user' to retrieve the full resource with assets for a given user as needed.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 5,
  "last" : true,
  "size" : 9,
  "total_elements" : 4,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 9,
  "number_of_elements" : 4,
  "content" : [ {
    "achievements" : [ {
      "achievement_name" : "aeiou",
      "achieved" : false,
      "earned_date" : 7,
      "created_date" : 0,
      "updated_date" : 7
    } ],
    "group_name" : "aeiou",
    "user_id" : 5,
    "progress" : 0,
    "id" : "aeiou"
  } ],
  "first" : true
}}]
     
     - parameter achievementName: (path) The achievement&#39;s name 
     - parameter filterAchievementDerived: (query) Filter for achievements that are derived from other services (optional)
     - parameter filterAchievementTagset: (query) Filter for achievements with specified tags (separated by comma) (optional)
     - parameter filterAchievementName: (query) Filter for achievements whose name contains a string (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)

     - returns: RequestBuilder<PageResourceUserAchievementGroupResource> 
     */
    open class func getUsersAchievementProgressWithRequestBuilder(achievementName: String, filterAchievementDerived: Bool? = nil, filterAchievementTagset: String? = nil, filterAchievementName: String? = nil, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<PageResourceUserAchievementGroupResource> {
        var path = "/users/achievements/{achievementName}"
        path = path.replacingOccurrences(of: "{achievement_name}", with: "\(achievementName)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter_achievement_derived": filterAchievementDerived, 
            "filter_achievement_tagset": filterAchievementTagset, 
            "filter_achievement_name": filterAchievementName, 
            "size": size?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<PageResourceUserAchievementGroupResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieve progress on achievements for all users
     
     - parameter filterAchievementDerived: (query) Filter for achievements that are derived from other services (optional)
     - parameter filterAchievementTagset: (query) Filter for achievements with specified tags (separated by comma) (optional)
     - parameter filterAchievementName: (query) Filter for achievements whose name contains a string (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsersAchievementsProgress(filterAchievementDerived: Bool? = nil, filterAchievementTagset: String? = nil, filterAchievementName: String? = nil, size: Int32? = nil, page: Int32? = nil, completion: @escaping ((_ data: PageResourceUserAchievementGroupResource?,_ error: Error?) -> Void)) {
        getUsersAchievementsProgressWithRequestBuilder(filterAchievementDerived: filterAchievementDerived, filterAchievementTagset: filterAchievementTagset, filterAchievementName: filterAchievementName, size: size, page: page).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Retrieve progress on achievements for all users
     - GET /users/achievements
     - Assets will not be filled in on the resources returned. Use 'Get single achievement progress for user' to retrieve the full resource with assets for a given user as needed.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 8,
  "last" : true,
  "size" : 0,
  "total_elements" : 9,
  "sort" : [ {
    "ignore_case" : true,
    "null_handling" : "NATIVE",
    "property" : "aeiou",
    "ascending" : true,
    "direction" : "ASC"
  } ],
  "total_pages" : 3,
  "number_of_elements" : 4,
  "content" : [ {
    "achievements" : [ {
      "achievement_name" : "aeiou",
      "achieved" : false,
      "earned_date" : 1,
      "created_date" : 0,
      "updated_date" : 5
    } ],
    "group_name" : "aeiou",
    "user_id" : 9,
    "progress" : 9,
    "id" : "aeiou"
  } ],
  "first" : true
}}]
     
     - parameter filterAchievementDerived: (query) Filter for achievements that are derived from other services (optional)
     - parameter filterAchievementTagset: (query) Filter for achievements with specified tags (separated by comma) (optional)
     - parameter filterAchievementName: (query) Filter for achievements whose name contains a string (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)

     - returns: RequestBuilder<PageResourceUserAchievementGroupResource> 
     */
    open class func getUsersAchievementsProgressWithRequestBuilder(filterAchievementDerived: Bool? = nil, filterAchievementTagset: String? = nil, filterAchievementName: String? = nil, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<PageResourceUserAchievementGroupResource> {
        let path = "/users/achievements"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter_achievement_derived": filterAchievementDerived, 
            "filter_achievement_tagset": filterAchievementTagset, 
            "filter_achievement_name": filterAchievementName, 
            "size": size?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<PageResourceUserAchievementGroupResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update an achievement definition
     
     - parameter name: (path) The name of the achievement 
     - parameter achievement: (body) The achievement definition (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateAchievement(name: String, achievement: AchievementDefinitionResource? = nil, completion: @escaping ((_ data: AchievementDefinitionResource?,_ error: Error?) -> Void)) {
        updateAchievementWithRequestBuilder(name: name, achievement: achievement).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Update an achievement definition
     - PUT /achievements/{name}
     - The existing generated rule, if any, will be deleted. A new rule will be created if a trigger event name is specified in the new version.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "rule_id" : "aeiou",
  "template" : "aeiou",
  "hidden" : false,
  "name" : "aeiou",
  "description" : "aeiou",
  "additional_properties" : {
    "key" : {
      "type" : "aeiou"
    }
  },
  "created_date" : 1,
  "required_progress" : 3,
  "trigger_event_name" : "aeiou",
  "updated_date" : 7,
  "tags" : [ "aeiou" ]
}}]
     
     - parameter name: (path) The name of the achievement 
     - parameter achievement: (body) The achievement definition (optional)

     - returns: RequestBuilder<AchievementDefinitionResource> 
     */
    open class func updateAchievementWithRequestBuilder(name: String, achievement: AchievementDefinitionResource? = nil) -> RequestBuilder<AchievementDefinitionResource> {
        var path = "/achievements/{name}"
        path = path.replacingOccurrences(of: "{name}", with: "\(name)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = achievement?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AchievementDefinitionResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update or create an achievement progress record for a user
     
     - parameter userId: (path) The user&#39;s id 
     - parameter achievementName: (path) The achievement&#39;s name 
     - parameter request: (body) The progress update details (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateAchievementProgress(userId: Int32, achievementName: String, request: AchievementProgressUpdateRequest? = nil, completion: @escaping ((_ data: UserAchievementGroupResource?,_ error: Error?) -> Void)) {
        updateAchievementProgressWithRequestBuilder(userId: userId, achievementName: achievementName, request: request).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Update or create an achievement progress record for a user
     - PUT /users/{userId}/achievements/{achievementName}
     - If no progress record yet exists for the user, it will be created. Otherwise it will be updated. If progress meets or exceeds the achievement's max_value it will be marked as earned and a BRE event will be triggered for the <code>BreAchievementEarnedTrigger</code>.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "achievements" : [ {
    "achievement_name" : "aeiou",
    "achieved" : false,
    "earned_date" : 2,
    "created_date" : 5,
    "updated_date" : 1
  } ],
  "group_name" : "aeiou",
  "user_id" : 4,
  "progress" : 3,
  "id" : "aeiou"
}}]
     
     - parameter userId: (path) The user&#39;s id 
     - parameter achievementName: (path) The achievement&#39;s name 
     - parameter request: (body) The progress update details (optional)

     - returns: RequestBuilder<UserAchievementGroupResource> 
     */
    open class func updateAchievementProgressWithRequestBuilder(userId: Int32, achievementName: String, request: AchievementProgressUpdateRequest? = nil) -> RequestBuilder<UserAchievementGroupResource> {
        var path = "/users/{userId}/achievements/{achievementName}"
        path = path.replacingOccurrences(of: "{user_id}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{achievement_name}", with: "\(achievementName)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = request?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UserAchievementGroupResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update an achievement template
     
     - parameter id: (path) The id of the template 
     - parameter template: (body) The updated template (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateAchievementTemplate(id: String, template: TemplateResource? = nil, completion: @escaping ((_ data: TemplateResource?,_ error: Error?) -> Void)) {
        updateAchievementTemplateWithRequestBuilder(id: id, template: template).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Update an achievement template
     - PUT /achievements/templates/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "created_date" : 6,
  "id" : "aeiou",
  "updated_date" : 5,
  "properties" : [ {
    "name" : "aeiou",
    "type" : "aeiou",
    "required" : false
  } ]
}}]
     
     - parameter id: (path) The id of the template 
     - parameter template: (body) The updated template (optional)

     - returns: RequestBuilder<TemplateResource> 
     */
    open class func updateAchievementTemplateWithRequestBuilder(id: String, template: TemplateResource? = nil) -> RequestBuilder<TemplateResource> {
        var path = "/achievements/templates/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = template?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<TemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
