//
// GamificationAchievementsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class GamificationAchievementsAPI: APIBase {
    /**
     Create a new achievement definition
     
     - parameter achievement: (body) The achievement definition (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createAchievementUsingPOST(achievement: AchievementDefinitionResource? = nil, completion: @escaping ((_ data: AchievementDefinitionResource?,_ error: Error?) -> Void)) {
        createAchievementUsingPOSTWithRequestBuilder(achievement: achievement).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create a new achievement definition
     - POST /achievements
     - If the definition contains a trigger event name, a BRE rule is created, so that tracking logic is executed when the triggering event occurs. If no trigger event name is specified, the user's achievement status must manually be updated via the API.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "rule_id" : "aeiou",
  "template" : "aeiou",
  "hidden" : false,
  "name" : "aeiou",
  "description" : "aeiou",
  "additional_properties" : {
    "key" : {
      "type" : "aeiou"
    }
  },
  "created_date" : 123456789,
  "required_progress" : 123,
  "trigger_event_name" : "aeiou",
  "updated_date" : 123456789,
  "tags" : [ "aeiou" ]
}}]
     
     - parameter achievement: (body) The achievement definition (optional)

     - returns: RequestBuilder<AchievementDefinitionResource> 
     */
    open class func createAchievementUsingPOSTWithRequestBuilder(achievement: AchievementDefinitionResource? = nil) -> RequestBuilder<AchievementDefinitionResource> {
        let path = "/achievements"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = achievement?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AchievementDefinitionResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create an achievement template
     
     - parameter template: (body) The achievement template to be created (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createTemplateUsingPOST(template: TemplateResource? = nil, completion: @escaping ((_ data: TemplateResource?,_ error: Error?) -> Void)) {
        createTemplateUsingPOSTWithRequestBuilder(template: template).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create an achievement template
     - POST /achievements/templates
     - Achievement templates define a type of achievement and the properties they have
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "created_date" : 123456789,
  "id" : "aeiou",
  "updated_date" : 123456789,
  "properties" : [ {
    "name" : "aeiou",
    "type" : "aeiou",
    "required" : false
  } ]
}}]
     
     - parameter template: (body) The achievement template to be created (optional)

     - returns: RequestBuilder<TemplateResource> 
     */
    open class func createTemplateUsingPOSTWithRequestBuilder(template: TemplateResource? = nil) -> RequestBuilder<TemplateResource> {
        let path = "/achievements/templates"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = template?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an achievement template
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) The value needed to delete used templates (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAchievementTemplateUsingDELETE(id: String, cascade: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteAchievementTemplateUsingDELETEWithRequestBuilder(id: id, cascade: cascade).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete an achievement template
     - DELETE /achievements/templates/{id}
     - If cascade = 'detach', it will force delete the template even if it's attached to other objects
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) The value needed to delete used templates (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteAchievementTemplateUsingDELETEWithRequestBuilder(id: String, cascade: String? = nil) -> RequestBuilder<Void> {
        var path = "/achievements/templates/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "cascade": cascade
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Delete an achievement definition
     
     - parameter name: (path) The name of the achievement 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAchievementUsingDELETE(name: String, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteAchievementUsingDELETEWithRequestBuilder(name: name).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete an achievement definition
     - DELETE /achievements/{name}
     - Will also disable the associated generated rule, if any.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter name: (path) The name of the achievement 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteAchievementUsingDELETEWithRequestBuilder(name: String) -> RequestBuilder<Void> {
        var path = "/achievements/{name}"
        path = path.replacingOccurrences(of: "{name}", with: "\(name)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a list of derived achievements
     
     - parameter name: (path) The name of the derived achievement 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findAllByGroupNameUsingGET(name: String, completion: @escaping ((_ data: [AchievementDefinitionResource]?,_ error: Error?) -> Void)) {
        findAllByGroupNameUsingGETWithRequestBuilder(name: name).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get a list of derived achievements
     - GET /achievements/derived/{name}
     - Used by other services that depend on achievements
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example=[ {
  "rule_id" : "aeiou",
  "template" : "aeiou",
  "hidden" : false,
  "name" : "aeiou",
  "description" : "aeiou",
  "additional_properties" : {
    "key" : {
      "type" : "aeiou"
    }
  },
  "created_date" : 123456789,
  "required_progress" : 123,
  "trigger_event_name" : "aeiou",
  "updated_date" : 123456789,
  "tags" : [ "aeiou" ]
} ]}]
     
     - parameter name: (path) The name of the derived achievement 

     - returns: RequestBuilder<[AchievementDefinitionResource]> 
     */
    open class func findAllByGroupNameUsingGETWithRequestBuilder(name: String) -> RequestBuilder<[AchievementDefinitionResource]> {
        var path = "/achievements/derived/{name}"
        path = path.replacingOccurrences(of: "{name}", with: "\(name)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[AchievementDefinitionResource]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a single achievement template
     
     - parameter id: (path) The id of the template 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAchievementTemplateUsingGET(id: String, completion: @escaping ((_ data: TemplateResource?,_ error: Error?) -> Void)) {
        getAchievementTemplateUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get a single achievement template
     - GET /achievements/templates/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "created_date" : 123456789,
  "id" : "aeiou",
  "updated_date" : 123456789,
  "properties" : [ {
    "name" : "aeiou",
    "type" : "aeiou",
    "required" : false
  } ]
}}]
     
     - parameter id: (path) The id of the template 

     - returns: RequestBuilder<TemplateResource> 
     */
    open class func getAchievementTemplateUsingGETWithRequestBuilder(id: String) -> RequestBuilder<TemplateResource> {
        var path = "/achievements/templates/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List and search achievement templates
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAchievementTemplatesUsingGET(size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: PageTemplateResource?,_ error: Error?) -> Void)) {
        getAchievementTemplatesUsingGETWithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List and search achievement templates
     - GET /achievements/templates
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 123,
  "last" : true,
  "size" : 123,
  "total_elements" : 123456789,
  "sort" : { },
  "total_pages" : 123,
  "number_of_elements" : 123,
  "content" : [ {
    "name" : "aeiou",
    "created_date" : 123456789,
    "id" : "aeiou",
    "updated_date" : 123456789,
    "properties" : [ {
      "name" : "aeiou",
      "type" : "aeiou",
      "required" : false
    } ]
  } ],
  "first" : true
}}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)

     - returns: RequestBuilder<PageTemplateResource> 
     */
    open class func getAchievementTemplatesUsingGETWithRequestBuilder(size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageTemplateResource> {
        let path = "/achievements/templates"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageTemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a single achievement definition
     
     - parameter name: (path) The name of the achievement 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAchievementUsingGET(name: String, completion: @escaping ((_ data: AchievementDefinitionResource?,_ error: Error?) -> Void)) {
        getAchievementUsingGETWithRequestBuilder(name: name).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get a single achievement definition
     - GET /achievements/{name}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "rule_id" : "aeiou",
  "template" : "aeiou",
  "hidden" : false,
  "name" : "aeiou",
  "description" : "aeiou",
  "additional_properties" : {
    "key" : {
      "type" : "aeiou"
    }
  },
  "created_date" : 123456789,
  "required_progress" : 123,
  "trigger_event_name" : "aeiou",
  "updated_date" : 123456789,
  "tags" : [ "aeiou" ]
}}]
     
     - parameter name: (path) The name of the achievement 

     - returns: RequestBuilder<AchievementDefinitionResource> 
     */
    open class func getAchievementUsingGETWithRequestBuilder(name: String) -> RequestBuilder<AchievementDefinitionResource> {
        var path = "/achievements/{name}"
        path = path.replacingOccurrences(of: "{name}", with: "\(name)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AchievementDefinitionResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get all achievement definitions in the system
     
     - parameter filterTagset: (query) Filter for achievements with specified tags (separated by comma) (optional)
     - parameter filterName: (query) Filter for achievements whose name contains a string (optional)
     - parameter filterHidden: (query) Filter for achievements that are hidden or not (optional)
     - parameter filterDerived: (query) Filter for achievements that are derived from other services (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAchievementsUsingGET(filterTagset: String? = nil, filterName: String? = nil, filterHidden: Bool? = nil, filterDerived: Bool? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: PageAchievementDefinitionResource?,_ error: Error?) -> Void)) {
        getAchievementsUsingGETWithRequestBuilder(filterTagset: filterTagset, filterName: filterName, filterHidden: filterHidden, filterDerived: filterDerived, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get all achievement definitions in the system
     - GET /achievements
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 123,
  "last" : true,
  "size" : 123,
  "total_elements" : 123456789,
  "sort" : { },
  "total_pages" : 123,
  "number_of_elements" : 123,
  "content" : [ {
    "rule_id" : "aeiou",
    "template" : "aeiou",
    "hidden" : false,
    "name" : "aeiou",
    "description" : "aeiou",
    "additional_properties" : {
      "key" : {
        "type" : "aeiou"
      }
    },
    "created_date" : 123456789,
    "required_progress" : 123,
    "trigger_event_name" : "aeiou",
    "updated_date" : 123456789,
    "tags" : [ "aeiou" ]
  } ],
  "first" : true
}}]
     
     - parameter filterTagset: (query) Filter for achievements with specified tags (separated by comma) (optional)
     - parameter filterName: (query) Filter for achievements whose name contains a string (optional)
     - parameter filterHidden: (query) Filter for achievements that are hidden or not (optional)
     - parameter filterDerived: (query) Filter for achievements that are derived from other services (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)

     - returns: RequestBuilder<PageAchievementDefinitionResource> 
     */
    open class func getAchievementsUsingGETWithRequestBuilder(filterTagset: String? = nil, filterName: String? = nil, filterHidden: Bool? = nil, filterDerived: Bool? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageAchievementDefinitionResource> {
        let path = "/achievements"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "filter_tagset": filterTagset,
            "filter_name": filterName,
            "filter_hidden": filterHidden,
            "filter_derived": filterDerived,
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageAchievementDefinitionResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Retrieve progress on a given achievement for all users
     
     - parameter achievementName: (path) The achievement&#39;s name 
     - parameter filterAchievementDerived: (query) Filter for achievements that are derived from other services (optional)
     - parameter filterAchievementTagset: (query) Filter for achievements with specified tags (separated by comma) (optional)
     - parameter filterAchievementHidden: (query) Filter for achievements that are hidden or not (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllUserProgressForAchievementUsingGET(achievementName: String, filterAchievementDerived: Bool? = nil, filterAchievementTagset: String? = nil, filterAchievementHidden: Bool? = nil, size: Int32? = nil, page: Int32? = nil, completion: @escaping ((_ data: PageUserAchievementGroupResource?,_ error: Error?) -> Void)) {
        getAllUserProgressForAchievementUsingGETWithRequestBuilder(achievementName: achievementName, filterAchievementDerived: filterAchievementDerived, filterAchievementTagset: filterAchievementTagset, filterAchievementHidden: filterAchievementHidden, size: size, page: page).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Retrieve progress on a given achievement for all users
     - GET /users/achievements/{achievementName}
     - Assets will not be filled in on the resources returned. Use 'Get single achievement progress for user' to retrieve the full resource with assets for a given user as needed.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 123,
  "last" : true,
  "size" : 123,
  "total_elements" : 123456789,
  "sort" : { },
  "total_pages" : 123,
  "number_of_elements" : 123,
  "content" : [ {
    "achievements" : [ {
      "achievement_name" : "aeiou",
      "achieved" : false,
      "earned_date" : 123456789,
      "created_date" : 123456789,
      "updated_date" : 123456789
    } ],
    "group_name" : "aeiou",
    "user_id" : 123,
    "progress" : 123,
    "id" : "aeiou"
  } ],
  "first" : true
}}]
     
     - parameter achievementName: (path) The achievement&#39;s name 
     - parameter filterAchievementDerived: (query) Filter for achievements that are derived from other services (optional)
     - parameter filterAchievementTagset: (query) Filter for achievements with specified tags (separated by comma) (optional)
     - parameter filterAchievementHidden: (query) Filter for achievements that are hidden or not (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)

     - returns: RequestBuilder<PageUserAchievementGroupResource> 
     */
    open class func getAllUserProgressForAchievementUsingGETWithRequestBuilder(achievementName: String, filterAchievementDerived: Bool? = nil, filterAchievementTagset: String? = nil, filterAchievementHidden: Bool? = nil, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<PageUserAchievementGroupResource> {
        var path = "/users/achievements/{achievementName}"
        path = path.replacingOccurrences(of: "{achievementName}", with: "\(achievementName)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "filter_achievement_derived": filterAchievementDerived,
            "filter_achievement_tagset": filterAchievementTagset,
            "filter_achievement_hidden": filterAchievementHidden,
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageUserAchievementGroupResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Retrieve progress on achievements for all users
     
     - parameter filterAchievementDerived: (query) Filter for achievements that are derived from other services (optional)
     - parameter filterAchievementTagset: (query) Filter for achievements with specified tags (separated by comma) (optional)
     - parameter filterAchievementName: (query) Filter for achievements whose name contains a string (optional)
     - parameter filterAchievementHidden: (query) Filter for achievements that are hidden or not (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllUserProgressUsingGET(filterAchievementDerived: Bool? = nil, filterAchievementTagset: String? = nil, filterAchievementName: String? = nil, filterAchievementHidden: Bool? = nil, size: Int32? = nil, page: Int32? = nil, completion: @escaping ((_ data: PageUserAchievementGroupResource?,_ error: Error?) -> Void)) {
        getAllUserProgressUsingGETWithRequestBuilder(filterAchievementDerived: filterAchievementDerived, filterAchievementTagset: filterAchievementTagset, filterAchievementName: filterAchievementName, filterAchievementHidden: filterAchievementHidden, size: size, page: page).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Retrieve progress on achievements for all users
     - GET /users/achievements
     - Assets will not be filled in on the resources returned. Use 'Get single achievement progress for user' to retrieve the full resource with assets for a given user as needed.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 123,
  "last" : true,
  "size" : 123,
  "total_elements" : 123456789,
  "sort" : { },
  "total_pages" : 123,
  "number_of_elements" : 123,
  "content" : [ {
    "achievements" : [ {
      "achievement_name" : "aeiou",
      "achieved" : false,
      "earned_date" : 123456789,
      "created_date" : 123456789,
      "updated_date" : 123456789
    } ],
    "group_name" : "aeiou",
    "user_id" : 123,
    "progress" : 123,
    "id" : "aeiou"
  } ],
  "first" : true
}}]
     
     - parameter filterAchievementDerived: (query) Filter for achievements that are derived from other services (optional)
     - parameter filterAchievementTagset: (query) Filter for achievements with specified tags (separated by comma) (optional)
     - parameter filterAchievementName: (query) Filter for achievements whose name contains a string (optional)
     - parameter filterAchievementHidden: (query) Filter for achievements that are hidden or not (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)

     - returns: RequestBuilder<PageUserAchievementGroupResource> 
     */
    open class func getAllUserProgressUsingGETWithRequestBuilder(filterAchievementDerived: Bool? = nil, filterAchievementTagset: String? = nil, filterAchievementName: String? = nil, filterAchievementHidden: Bool? = nil, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<PageUserAchievementGroupResource> {
        let path = "/users/achievements"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "filter_achievement_derived": filterAchievementDerived,
            "filter_achievement_tagset": filterAchievementTagset,
            "filter_achievement_name": filterAchievementName,
            "filter_achievement_hidden": filterAchievementHidden,
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageUserAchievementGroupResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get the list of triggers that can be used to trigger an achievement progress update
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAvailableTriggersUsingGET(completion: @escaping ((_ data: [BreTriggerResource]?,_ error: Error?) -> Void)) {
        getAvailableTriggersUsingGETWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get the list of triggers that can be used to trigger an achievement progress update
     - GET /achievements/triggers
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example=[ {
  "trigger_name" : "aeiou",
  "system_trigger" : false,
  "event_name" : "aeiou",
  "category" : "aeiou",
  "parameters" : [ {
    "name" : "aeiou",
    "type" : "aeiou"
  } ],
  "trigger_description" : "aeiou"
} ]}]

     - returns: RequestBuilder<[BreTriggerResource]> 
     */
    open class func getAvailableTriggersUsingGETWithRequestBuilder() -> RequestBuilder<[BreTriggerResource]> {
        let path = "/achievements/triggers"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[BreTriggerResource]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Retrieve progress on a given achievement for a given user
     
     - parameter userId: (path) The user&#39;s id 
     - parameter achievementName: (path) The achievement&#39;s name 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserProgressForAchievementUsingGET(userId: Int32, achievementName: String, completion: @escaping ((_ data: UserAchievementGroupResource?,_ error: Error?) -> Void)) {
        getUserProgressForAchievementUsingGETWithRequestBuilder(userId: userId, achievementName: achievementName).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Retrieve progress on a given achievement for a given user
     - GET /users/{userId}/achievements/{achievementName}
     - Assets will not be filled in on the resources returned. Use 'Get a single poll' to retrieve the full resource with assets for a given item as needed.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "achievements" : [ {
    "achievement_name" : "aeiou",
    "achieved" : false,
    "earned_date" : 123456789,
    "created_date" : 123456789,
    "updated_date" : 123456789
  } ],
  "group_name" : "aeiou",
  "user_id" : 123,
  "progress" : 123,
  "id" : "aeiou"
}}]
     
     - parameter userId: (path) The user&#39;s id 
     - parameter achievementName: (path) The achievement&#39;s name 

     - returns: RequestBuilder<UserAchievementGroupResource> 
     */
    open class func getUserProgressForAchievementUsingGETWithRequestBuilder(userId: Int32, achievementName: String) -> RequestBuilder<UserAchievementGroupResource> {
        var path = "/users/{userId}/achievements/{achievementName}"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{achievementName}", with: "\(achievementName)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<UserAchievementGroupResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Retrieve progress on achievements for a given user
     
     - parameter userId: (path) The user&#39;s id 
     - parameter filterAchievementDerived: (query) Filter for achievements that are derived from other services (optional)
     - parameter filterAchievementTagset: (query) Filter for achievements with specified tags (separated by comma) (optional)
     - parameter filterAchievementName: (query) Filter for achievements whose name contains a string (optional)
     - parameter filterAchievementHidden: (query) Filter for achievements that are hidden or not (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserProgressUsingGET(userId: Int32, filterAchievementDerived: Bool? = nil, filterAchievementTagset: String? = nil, filterAchievementName: String? = nil, filterAchievementHidden: Bool? = nil, size: Int32? = nil, page: Int32? = nil, completion: @escaping ((_ data: PageUserAchievementGroupResource?,_ error: Error?) -> Void)) {
        getUserProgressUsingGETWithRequestBuilder(userId: userId, filterAchievementDerived: filterAchievementDerived, filterAchievementTagset: filterAchievementTagset, filterAchievementName: filterAchievementName, filterAchievementHidden: filterAchievementHidden, size: size, page: page).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Retrieve progress on achievements for a given user
     - GET /users/{userId}/achievements
     - Assets will not be filled in on the resources returned. Use 'Get a single poll' to retrieve the full resource with assets for a given item as needed.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "number" : 123,
  "last" : true,
  "size" : 123,
  "total_elements" : 123456789,
  "sort" : { },
  "total_pages" : 123,
  "number_of_elements" : 123,
  "content" : [ {
    "achievements" : [ {
      "achievement_name" : "aeiou",
      "achieved" : false,
      "earned_date" : 123456789,
      "created_date" : 123456789,
      "updated_date" : 123456789
    } ],
    "group_name" : "aeiou",
    "user_id" : 123,
    "progress" : 123,
    "id" : "aeiou"
  } ],
  "first" : true
}}]
     
     - parameter userId: (path) The user&#39;s id 
     - parameter filterAchievementDerived: (query) Filter for achievements that are derived from other services (optional)
     - parameter filterAchievementTagset: (query) Filter for achievements with specified tags (separated by comma) (optional)
     - parameter filterAchievementName: (query) Filter for achievements whose name contains a string (optional)
     - parameter filterAchievementHidden: (query) Filter for achievements that are hidden or not (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)

     - returns: RequestBuilder<PageUserAchievementGroupResource> 
     */
    open class func getUserProgressUsingGETWithRequestBuilder(userId: Int32, filterAchievementDerived: Bool? = nil, filterAchievementTagset: String? = nil, filterAchievementName: String? = nil, filterAchievementHidden: Bool? = nil, size: Int32? = nil, page: Int32? = nil) -> RequestBuilder<PageUserAchievementGroupResource> {
        var path = "/users/{userId}/achievements"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "filter_achievement_derived": filterAchievementDerived,
            "filter_achievement_tagset": filterAchievementTagset,
            "filter_achievement_name": filterAchievementName,
            "filter_achievement_hidden": filterAchievementHidden,
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageUserAchievementGroupResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Update an achievement definition
     
     - parameter name: (path) The name of the achievement 
     - parameter achievement: (body) The achievement definition (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateAchievementUsingPUT(name: String, achievement: AchievementDefinitionResource? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        updateAchievementUsingPUTWithRequestBuilder(name: name, achievement: achievement).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update an achievement definition
     - PUT /achievements/{name}
     - The existing generated rule, if any, will be deleted. A new rule will be created if a trigger event name is specified in the new version.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter name: (path) The name of the achievement 
     - parameter achievement: (body) The achievement definition (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateAchievementUsingPUTWithRequestBuilder(name: String, achievement: AchievementDefinitionResource? = nil) -> RequestBuilder<Void> {
        var path = "/achievements/{name}"
        path = path.replacingOccurrences(of: "{name}", with: "\(name)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = achievement?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update or create an achievement progress record for a user
     
     - parameter userId: (path) The user&#39;s id 
     - parameter achievementName: (path) The achievement&#39;s name 
     - parameter request: (body) The progress update details (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateProgressUsingPUT(userId: Int32, achievementName: String, request: AchievementProgressUpdateRequest? = nil, completion: @escaping ((_ data: UserAchievementGroupResource?,_ error: Error?) -> Void)) {
        updateProgressUsingPUTWithRequestBuilder(userId: userId, achievementName: achievementName, request: request).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Update or create an achievement progress record for a user
     - PUT /users/{userId}/achievements/{achievementName}
     - If no progress record yet exists for the user, it will be created. Otherwise it will be updated. If progress meets or exceeds the achievement's max_value it will be marked as earned and a BRE event will be triggered for the <code>BreAchievementEarnedTrigger</code>.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{contentType=application/json, example={
  "achievements" : [ {
    "achievement_name" : "aeiou",
    "achieved" : false,
    "earned_date" : 123456789,
    "created_date" : 123456789,
    "updated_date" : 123456789
  } ],
  "group_name" : "aeiou",
  "user_id" : 123,
  "progress" : 123,
  "id" : "aeiou"
}}]
     
     - parameter userId: (path) The user&#39;s id 
     - parameter achievementName: (path) The achievement&#39;s name 
     - parameter request: (body) The progress update details (optional)

     - returns: RequestBuilder<UserAchievementGroupResource> 
     */
    open class func updateProgressUsingPUTWithRequestBuilder(userId: Int32, achievementName: String, request: AchievementProgressUpdateRequest? = nil) -> RequestBuilder<UserAchievementGroupResource> {
        var path = "/users/{userId}/achievements/{achievementName}"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{achievementName}", with: "\(achievementName)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = request?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<UserAchievementGroupResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an achievement template
     
     - parameter id: (path) The id of the template 
     - parameter template: (body) The updated template (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateTemplateUsingPUT(id: String, template: TemplateResource? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        updateTemplateUsingPUTWithRequestBuilder(id: id, template: template).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update an achievement template
     - PUT /achievements/templates/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The id of the template 
     - parameter template: (body) The updated template (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateTemplateUsingPUTWithRequestBuilder(id: String, template: TemplateResource? = nil) -> RequestBuilder<Void> {
        var path = "/achievements/templates/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = template?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
