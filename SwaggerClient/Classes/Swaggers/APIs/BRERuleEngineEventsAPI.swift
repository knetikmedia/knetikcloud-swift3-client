//
// BRERuleEngineEventsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class BRERuleEngineEventsAPI: APIBase {
    /**
     Fire a new event, based on an existing trigger
     
     - parameter breEvent: (body) The BRE event object (optional)
     - parameter authentication: (body) The authentication object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func fireEventUsingPOST(breEvent: BreEvent? = nil, authentication: OAuth2Authentication? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        fireEventUsingPOSTWithRequestBuilder(breEvent: breEvent, authentication: authentication).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Fire a new event, based on an existing trigger
     - POST /bre/events
     - Parameters within the event must match names and types from the trigger. Actual rule execution is asynchornous.
     
     - parameter breEvent: (body) The BRE event object (optional)
     - parameter authentication: (body) The authentication object (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func fireEventUsingPOSTWithRequestBuilder(breEvent: BreEvent? = nil, authentication: OAuth2Authentication? = nil) -> RequestBuilder<Void> {
        let path = "/bre/events"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = authentication?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
