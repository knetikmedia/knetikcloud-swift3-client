//
// MediaArtistsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class MediaArtistsAPI: APIBase {
    /**
     Adds a new artist in the system
     
     - parameter artistResource: (body) The new artist (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addArtistUsingPOST(artistResource: ArtistResource? = nil, completion: @escaping ((_ data: ArtistResource?,_ error: Error?) -> Void)) {
        addArtistUsingPOSTWithRequestBuilder(artistResource: artistResource).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Adds a new artist in the system
     - POST /media/artists
     - Adds a new artist in the system. Use specific media contributions endpoint to add contributions
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{output=none}]
     
     - parameter artistResource: (body) The new artist (optional)

     - returns: RequestBuilder<ArtistResource> 
     */
    open class func addArtistUsingPOSTWithRequestBuilder(artistResource: ArtistResource? = nil) -> RequestBuilder<ArtistResource> {
        let path = "/media/artists"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = artistResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ArtistResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create an artist template
     
     - parameter artistTemplateResource: (body) The artist template resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createArtistTemplateUsingPOST(artistTemplateResource: TemplateResource? = nil, completion: @escaping ((_ data: TemplateResource?,_ error: Error?) -> Void)) {
        createArtistTemplateUsingPOSTWithRequestBuilder(artistTemplateResource: artistTemplateResource).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create an artist template
     - POST /media/artists/templates
     - Artist Templates define a type of artist and the properties they have
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{output=none}]
     
     - parameter artistTemplateResource: (body) The artist template resource object (optional)

     - returns: RequestBuilder<TemplateResource> 
     */
    open class func createArtistTemplateUsingPOSTWithRequestBuilder(artistTemplateResource: TemplateResource? = nil) -> RequestBuilder<TemplateResource> {
        let path = "/media/artists/templates"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = artistTemplateResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an artist template
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) The value needed to delete used templates (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteArtistTemplateUsingDELETE(id: String, cascade: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteArtistTemplateUsingDELETEWithRequestBuilder(id: id, cascade: cascade).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete an artist template
     - DELETE /media/artists/templates/{id}
     - If cascade = 'detach', it will force delete the template even if it's attached to other objects
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) The value needed to delete used templates (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteArtistTemplateUsingDELETEWithRequestBuilder(id: String, cascade: String? = nil) -> RequestBuilder<Void> {
        var path = "/media/artists/templates/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "cascade": cascade
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Removes an artist from the system IF no resources are attached to it
     
     - parameter id: (path) The artist id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteArtistUsingDELETE(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteArtistUsingDELETEWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Removes an artist from the system IF no resources are attached to it
     - DELETE /media/artists/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The artist id 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteArtistUsingDELETEWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/media/artists/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a single artist template
     
     - parameter id: (path) The id of the template 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getArtistTemplateUsingGET(id: String, completion: @escaping ((_ data: TemplateResource?,_ error: Error?) -> Void)) {
        getArtistTemplateUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get a single artist template
     - GET /media/artists/templates/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{output=none}]
     
     - parameter id: (path) The id of the template 

     - returns: RequestBuilder<TemplateResource> 
     */
    open class func getArtistTemplateUsingGETWithRequestBuilder(id: String) -> RequestBuilder<TemplateResource> {
        var path = "/media/artists/templates/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List and search artist templates
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getArtistTemplatesUsingGET(size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: PageTemplateResource?,_ error: Error?) -> Void)) {
        getArtistTemplatesUsingGETWithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List and search artist templates
     - GET /media/artists/templates
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - examples: [{output=none}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)

     - returns: RequestBuilder<PageTemplateResource> 
     */
    open class func getArtistTemplatesUsingGETWithRequestBuilder(size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageTemplateResource> {
        let path = "/media/artists/templates"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageTemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Loads a specific artist details
     
     - parameter id: (path) The artist id 
     - parameter showContributions: (query) The number of contributions to show fetch (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getArtistUsingGET(id: Int64, showContributions: Int32? = nil, completion: @escaping ((_ data: ArtistResource?,_ error: Error?) -> Void)) {
        getArtistUsingGETWithRequestBuilder(id: id, showContributions: showContributions).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Loads a specific artist details
     - GET /media/artists/{id}
     - examples: [{output=none}]
     
     - parameter id: (path) The artist id 
     - parameter showContributions: (query) The number of contributions to show fetch (optional)

     - returns: RequestBuilder<ArtistResource> 
     */
    open class func getArtistUsingGETWithRequestBuilder(id: Int64, showContributions: Int32? = nil) -> RequestBuilder<ArtistResource> {
        var path = "/media/artists/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "show_contributions": showContributions?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ArtistResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Search for artists
     
     - parameter filterArtistsByName: (query) Filter for artists which name *STARTS* with the given string (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func searchArtistsUsingGET(filterArtistsByName: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: PageArtistResource?,_ error: Error?) -> Void)) {
        searchArtistsUsingGETWithRequestBuilder(filterArtistsByName: filterArtistsByName, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Search for artists
     - GET /media/artists
     - examples: [{output=none}]
     
     - parameter filterArtistsByName: (query) Filter for artists which name *STARTS* with the given string (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)

     - returns: RequestBuilder<PageArtistResource> 
     */
    open class func searchArtistsUsingGETWithRequestBuilder(filterArtistsByName: String? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageArtistResource> {
        let path = "/media/artists"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "filter_artists_by_name": filterArtistsByName,
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageArtistResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Update an artist template
     
     - parameter id: (path) The id of the template 
     - parameter artistTemplateResource: (body) The artist template resource object (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateArtistTemplateUsingPUT(id: String, artistTemplateResource: TemplateResource? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        updateArtistTemplateUsingPUTWithRequestBuilder(id: id, artistTemplateResource: artistTemplateResource).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update an artist template
     - PUT /media/artists/templates/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The id of the template 
     - parameter artistTemplateResource: (body) The artist template resource object (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateArtistTemplateUsingPUTWithRequestBuilder(id: String, artistTemplateResource: TemplateResource? = nil) -> RequestBuilder<Void> {
        var path = "/media/artists/templates/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = artistTemplateResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Modifies an artist details
     
     - parameter id: (path) The artist id 
     - parameter artistResource: (body) The new artist (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateArtistUsingPUT(id: Int64, artistResource: ArtistResource? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        updateArtistUsingPUTWithRequestBuilder(id: id, artistResource: artistResource).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Modifies an artist details
     - PUT /media/artists/{id}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     
     - parameter id: (path) The artist id 
     - parameter artistResource: (body) The new artist (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateArtistUsingPUTWithRequestBuilder(id: Int64, artistResource: ArtistResource? = nil) -> RequestBuilder<Void> {
        var path = "/media/artists/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = artistResource?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
