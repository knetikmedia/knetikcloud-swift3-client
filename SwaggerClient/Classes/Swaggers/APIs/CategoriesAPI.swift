//
// CategoriesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class CategoriesAPI: APIBase {
    /**
     Create a new category
     
     - parameter category: (body) The category to create (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createCategoryUsingPOST(category: CategoryResource? = nil, completion: @escaping ((_ data: CategoryResource?,_ error: Error?) -> Void)) {
        createCategoryUsingPOSTWithRequestBuilder(category: category).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create a new category
     - POST /categories
     - examples: [{output=none}]
     
     - parameter category: (body) The category to create (optional)

     - returns: RequestBuilder<CategoryResource> 
     */
    open class func createCategoryUsingPOSTWithRequestBuilder(category: CategoryResource? = nil) -> RequestBuilder<CategoryResource> {
        let path = "/categories"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = category?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CategoryResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a category template
     
     - parameter template: (body) The template to create (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createTemplateUsingPOST2(template: TemplateResource? = nil, completion: @escaping ((_ data: TemplateResource?,_ error: Error?) -> Void)) {
        createTemplateUsingPOST2WithRequestBuilder(template: template).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create a category template
     - POST /categories/templates
     - Templates define a type of category and the properties they have
     - examples: [{output=none}]
     
     - parameter template: (body) The template to create (optional)

     - returns: RequestBuilder<TemplateResource> 
     */
    open class func createTemplateUsingPOST2WithRequestBuilder(template: TemplateResource? = nil) -> RequestBuilder<TemplateResource> {
        let path = "/categories/templates"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = template?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an existing category
     
     - parameter id: (path) The id of the category to be deleted 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteCategoryUsingDELETE(id: String, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteCategoryUsingDELETEWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete an existing category
     - DELETE /categories/{id}
     
     - parameter id: (path) The id of the category to be deleted 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteCategoryUsingDELETEWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var path = "/categories/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a category template
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) The value needed to delete used templates (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteTemplateUsingDELETE1(id: String, cascade: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteTemplateUsingDELETE1WithRequestBuilder(id: id, cascade: cascade).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete a category template
     - DELETE /categories/templates/{id}
     - If cascade = 'detach', it will force delete the template even if it's attached to other objects
     
     - parameter id: (path) The id of the template 
     - parameter cascade: (query) The value needed to delete used templates (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteTemplateUsingDELETE1WithRequestBuilder(id: String, cascade: String? = nil) -> RequestBuilder<Void> {
        var path = "/categories/templates/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "cascade": cascade
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     List and search category templates
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getArticleTemplatesUsingGET1(size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: PageTemplateResource?,_ error: Error?) -> Void)) {
        getArticleTemplatesUsingGET1WithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List and search category templates
     - GET /categories/templates
     - examples: [{output=none}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)

     - returns: RequestBuilder<PageTemplateResource> 
     */
    open class func getArticleTemplatesUsingGET1WithRequestBuilder(size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageTemplateResource> {
        let path = "/categories/templates"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageTemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     List and search categories with optional filters
     
     - parameter filterSearch: (query) Filter for categories whose names begin with provided string (optional)
     - parameter filterActive: (query) Filter for categories that are specifically active or inactive (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCategoriesUsingGET1(filterSearch: String? = nil, filterActive: Bool? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: PageCategoryResource?,_ error: Error?) -> Void)) {
        getCategoriesUsingGET1WithRequestBuilder(filterSearch: filterSearch, filterActive: filterActive, size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List and search categories with optional filters
     - GET /categories
     - examples: [{output=none}]
     
     - parameter filterSearch: (query) Filter for categories whose names begin with provided string (optional)
     - parameter filterActive: (query) Filter for categories that are specifically active or inactive (optional)
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)

     - returns: RequestBuilder<PageCategoryResource> 
     */
    open class func getCategoriesUsingGET1WithRequestBuilder(filterSearch: String? = nil, filterActive: Bool? = nil, size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<PageCategoryResource> {
        let path = "/categories"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "filter_search": filterSearch,
            "filter_active": filterActive,
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PageCategoryResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a single category
     
     - parameter id: (path) The id of the category to retrieve 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCategoryUsingGET1(id: String, completion: @escaping ((_ data: CategoryResource?,_ error: Error?) -> Void)) {
        getCategoryUsingGET1WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get a single category
     - GET /categories/{id}
     - examples: [{output=none}]
     
     - parameter id: (path) The id of the category to retrieve 

     - returns: RequestBuilder<CategoryResource> 
     */
    open class func getCategoryUsingGET1WithRequestBuilder(id: String) -> RequestBuilder<CategoryResource> {
        var path = "/categories/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CategoryResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List all trivia tags in the system
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTagsUsingGET(size: Int32? = nil, page: Int32? = nil, order: String? = nil, completion: @escaping ((_ data: Pagestring?,_ error: Error?) -> Void)) {
        getTagsUsingGETWithRequestBuilder(size: size, page: page, order: order).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List all trivia tags in the system
     - GET /tags
     - examples: [{output=none}]
     
     - parameter size: (query) The number of objects returned per page (optional, default to 25)
     - parameter page: (query) The number of the page returned, starting with 1 (optional, default to 1)
     - parameter order: (query) a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)

     - returns: RequestBuilder<Pagestring> 
     */
    open class func getTagsUsingGETWithRequestBuilder(size: Int32? = nil, page: Int32? = nil, order: String? = nil) -> RequestBuilder<Pagestring> {
        let path = "/tags"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "size": size?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Pagestring>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a single category template
     
     - parameter id: (path) The id of the template 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTemplateUsingGET1(id: String, completion: @escaping ((_ data: TemplateResource?,_ error: Error?) -> Void)) {
        getTemplateUsingGET1WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get a single category template
     - GET /categories/templates/{id}
     - examples: [{output=none}]
     
     - parameter id: (path) The id of the template 

     - returns: RequestBuilder<TemplateResource> 
     */
    open class func getTemplateUsingGET1WithRequestBuilder(id: String) -> RequestBuilder<TemplateResource> {
        var path = "/categories/templates/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TemplateResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an existing category
     
     - parameter id: (path) The id of the category 
     - parameter category: (body) The category to update (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateCategoryUsingPUT1(id: String, category: CategoryResource? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        updateCategoryUsingPUT1WithRequestBuilder(id: id, category: category).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update an existing category
     - PUT /categories/{id}
     
     - parameter id: (path) The id of the category 
     - parameter category: (body) The category to update (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateCategoryUsingPUT1WithRequestBuilder(id: String, category: CategoryResource? = nil) -> RequestBuilder<Void> {
        var path = "/categories/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = category?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a category template
     
     - parameter id: (path) The id of the template 
     - parameter template: (body) The updated template information (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateTemplateUsingPUT2(id: String, template: TemplateResource? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        updateTemplateUsingPUT2WithRequestBuilder(id: id, template: template).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update a category template
     - PUT /categories/templates/{id}
     
     - parameter id: (path) The id of the template 
     - parameter template: (body) The updated template information (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateTemplateUsingPUT2WithRequestBuilder(id: String, template: TemplateResource? = nil) -> RequestBuilder<Void> {
        var path = "/categories/templates/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = template?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
